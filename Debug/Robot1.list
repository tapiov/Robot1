
Robot1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005454  08005454  00015454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e0  20000008  080054a0  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004e8  080054a0  000204e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c6b0  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000485e  00000000  00000000  0004c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f7a3  00000000  00000000  00050f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012d8  00000000  00000000  000606f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001820  00000000  00000000  000619c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bc0b  00000000  00000000  000631e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000738d  00000000  00000000  0006edf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00076180  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a1c  00000000  00000000  000761fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800543c 	.word	0x0800543c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	0800543c 	.word	0x0800543c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b97a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	468c      	mov	ip, r1
 8000a22:	460d      	mov	r5, r1
 8000a24:	4604      	mov	r4, r0
 8000a26:	9e08      	ldr	r6, [sp, #32]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d151      	bne.n	8000ad0 <__udivmoddi4+0xb4>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4617      	mov	r7, r2
 8000a30:	d96d      	bls.n	8000b0e <__udivmoddi4+0xf2>
 8000a32:	fab2 fe82 	clz	lr, r2
 8000a36:	f1be 0f00 	cmp.w	lr, #0
 8000a3a:	d00b      	beq.n	8000a54 <__udivmoddi4+0x38>
 8000a3c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a40:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a48:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a4c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a58:	0c25      	lsrs	r5, r4, #16
 8000a5a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a5e:	fa1f f987 	uxth.w	r9, r7
 8000a62:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a6a:	fb08 f309 	mul.w	r3, r8, r9
 8000a6e:	42ab      	cmp	r3, r5
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x6c>
 8000a72:	19ed      	adds	r5, r5, r7
 8000a74:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a78:	f080 8123 	bcs.w	8000cc2 <__udivmoddi4+0x2a6>
 8000a7c:	42ab      	cmp	r3, r5
 8000a7e:	f240 8120 	bls.w	8000cc2 <__udivmoddi4+0x2a6>
 8000a82:	f1a8 0802 	sub.w	r8, r8, #2
 8000a86:	443d      	add	r5, r7
 8000a88:	1aed      	subs	r5, r5, r3
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a90:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a98:	fb00 f909 	mul.w	r9, r0, r9
 8000a9c:	45a1      	cmp	r9, r4
 8000a9e:	d909      	bls.n	8000ab4 <__udivmoddi4+0x98>
 8000aa0:	19e4      	adds	r4, r4, r7
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	f080 810a 	bcs.w	8000cbe <__udivmoddi4+0x2a2>
 8000aaa:	45a1      	cmp	r9, r4
 8000aac:	f240 8107 	bls.w	8000cbe <__udivmoddi4+0x2a2>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	443c      	add	r4, r7
 8000ab4:	eba4 0409 	sub.w	r4, r4, r9
 8000ab8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000abc:	2100      	movs	r1, #0
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d061      	beq.n	8000b86 <__udivmoddi4+0x16a>
 8000ac2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	6034      	str	r4, [r6, #0]
 8000aca:	6073      	str	r3, [r6, #4]
 8000acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d907      	bls.n	8000ae4 <__udivmoddi4+0xc8>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d054      	beq.n	8000b82 <__udivmoddi4+0x166>
 8000ad8:	2100      	movs	r1, #0
 8000ada:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae4:	fab3 f183 	clz	r1, r3
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	f040 808e 	bne.w	8000c0a <__udivmoddi4+0x1ee>
 8000aee:	42ab      	cmp	r3, r5
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xdc>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80fa 	bhi.w	8000cec <__udivmoddi4+0x2d0>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb65 0503 	sbc.w	r5, r5, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	46ac      	mov	ip, r5
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d03f      	beq.n	8000b86 <__udivmoddi4+0x16a>
 8000b06:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	b912      	cbnz	r2, 8000b16 <__udivmoddi4+0xfa>
 8000b10:	2701      	movs	r7, #1
 8000b12:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b16:	fab7 fe87 	clz	lr, r7
 8000b1a:	f1be 0f00 	cmp.w	lr, #0
 8000b1e:	d134      	bne.n	8000b8a <__udivmoddi4+0x16e>
 8000b20:	1beb      	subs	r3, r5, r7
 8000b22:	0c3a      	lsrs	r2, r7, #16
 8000b24:	fa1f fc87 	uxth.w	ip, r7
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b2e:	0c25      	lsrs	r5, r4, #16
 8000b30:	fb02 3318 	mls	r3, r2, r8, r3
 8000b34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b38:	fb0c f308 	mul.w	r3, ip, r8
 8000b3c:	42ab      	cmp	r3, r5
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x134>
 8000b40:	19ed      	adds	r5, r5, r7
 8000b42:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x132>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	f200 80d1 	bhi.w	8000cf0 <__udivmoddi4+0x2d4>
 8000b4e:	4680      	mov	r8, r0
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b58:	fb02 5510 	mls	r5, r2, r0, r5
 8000b5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b60:	fb0c fc00 	mul.w	ip, ip, r0
 8000b64:	45a4      	cmp	ip, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x15c>
 8000b68:	19e4      	adds	r4, r4, r7
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x15a>
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	f200 80b8 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 040c 	sub.w	r4, r4, ip
 8000b7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b80:	e79d      	b.n	8000abe <__udivmoddi4+0xa2>
 8000b82:	4631      	mov	r1, r6
 8000b84:	4630      	mov	r0, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	f1ce 0420 	rsb	r4, lr, #32
 8000b8e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b92:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b96:	fa20 f804 	lsr.w	r8, r0, r4
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa25 f404 	lsr.w	r4, r5, r4
 8000ba0:	ea48 0803 	orr.w	r8, r8, r3
 8000ba4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ba8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bac:	fb02 4411 	mls	r4, r2, r1, r4
 8000bb0:	fa1f fc87 	uxth.w	ip, r7
 8000bb4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bb8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x1bc>
 8000bc4:	19ed      	adds	r5, r5, r7
 8000bc6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bca:	f080 808a 	bcs.w	8000ce2 <__udivmoddi4+0x2c6>
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	f240 8087 	bls.w	8000ce2 <__udivmoddi4+0x2c6>
 8000bd4:	3902      	subs	r1, #2
 8000bd6:	443d      	add	r5, r7
 8000bd8:	1aeb      	subs	r3, r5, r3
 8000bda:	fa1f f588 	uxth.w	r5, r8
 8000bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8000be2:	fb02 3310 	mls	r3, r2, r0, r3
 8000be6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bea:	fb00 f30c 	mul.w	r3, r0, ip
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x1e6>
 8000bf2:	19ed      	adds	r5, r5, r7
 8000bf4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bf8:	d26f      	bcs.n	8000cda <__udivmoddi4+0x2be>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d96d      	bls.n	8000cda <__udivmoddi4+0x2be>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	443d      	add	r5, r7
 8000c02:	1aeb      	subs	r3, r5, r3
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	e78f      	b.n	8000b2a <__udivmoddi4+0x10e>
 8000c0a:	f1c1 0720 	rsb	r7, r1, #32
 8000c0e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c12:	408b      	lsls	r3, r1
 8000c14:	fa05 f401 	lsl.w	r4, r5, r1
 8000c18:	ea48 0303 	orr.w	r3, r8, r3
 8000c1c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c2a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c32:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c36:	fa1f f883 	uxth.w	r8, r3
 8000c3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c3e:	fb09 f408 	mul.w	r4, r9, r8
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	fa02 f201 	lsl.w	r2, r2, r1
 8000c48:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x244>
 8000c4e:	18ed      	adds	r5, r5, r3
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c54:	d243      	bcs.n	8000cde <__udivmoddi4+0x2c2>
 8000c56:	42ac      	cmp	r4, r5
 8000c58:	d941      	bls.n	8000cde <__udivmoddi4+0x2c2>
 8000c5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5e:	441d      	add	r5, r3
 8000c60:	1b2d      	subs	r5, r5, r4
 8000c62:	fa1f fe8e 	uxth.w	lr, lr
 8000c66:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c6a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c72:	fb00 f808 	mul.w	r8, r0, r8
 8000c76:	45a0      	cmp	r8, r4
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x26e>
 8000c7a:	18e4      	adds	r4, r4, r3
 8000c7c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c80:	d229      	bcs.n	8000cd6 <__udivmoddi4+0x2ba>
 8000c82:	45a0      	cmp	r8, r4
 8000c84:	d927      	bls.n	8000cd6 <__udivmoddi4+0x2ba>
 8000c86:	3802      	subs	r0, #2
 8000c88:	441c      	add	r4, r3
 8000c8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8e:	eba4 0408 	sub.w	r4, r4, r8
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	454c      	cmp	r4, r9
 8000c98:	46c6      	mov	lr, r8
 8000c9a:	464d      	mov	r5, r9
 8000c9c:	d315      	bcc.n	8000cca <__udivmoddi4+0x2ae>
 8000c9e:	d012      	beq.n	8000cc6 <__udivmoddi4+0x2aa>
 8000ca0:	b156      	cbz	r6, 8000cb8 <__udivmoddi4+0x29c>
 8000ca2:	ebba 030e 	subs.w	r3, sl, lr
 8000ca6:	eb64 0405 	sbc.w	r4, r4, r5
 8000caa:	fa04 f707 	lsl.w	r7, r4, r7
 8000cae:	40cb      	lsrs	r3, r1
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	40cc      	lsrs	r4, r1
 8000cb4:	6037      	str	r7, [r6, #0]
 8000cb6:	6074      	str	r4, [r6, #4]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	e6f8      	b.n	8000ab4 <__udivmoddi4+0x98>
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	e6e0      	b.n	8000a88 <__udivmoddi4+0x6c>
 8000cc6:	45c2      	cmp	sl, r8
 8000cc8:	d2ea      	bcs.n	8000ca0 <__udivmoddi4+0x284>
 8000cca:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cce:	eb69 0503 	sbc.w	r5, r9, r3
 8000cd2:	3801      	subs	r0, #1
 8000cd4:	e7e4      	b.n	8000ca0 <__udivmoddi4+0x284>
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	e7d7      	b.n	8000c8a <__udivmoddi4+0x26e>
 8000cda:	4640      	mov	r0, r8
 8000cdc:	e791      	b.n	8000c02 <__udivmoddi4+0x1e6>
 8000cde:	4681      	mov	r9, r0
 8000ce0:	e7be      	b.n	8000c60 <__udivmoddi4+0x244>
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	e778      	b.n	8000bd8 <__udivmoddi4+0x1bc>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	e745      	b.n	8000b78 <__udivmoddi4+0x15c>
 8000cec:	4608      	mov	r0, r1
 8000cee:	e708      	b.n	8000b02 <__udivmoddi4+0xe6>
 8000cf0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf4:	443d      	add	r5, r7
 8000cf6:	e72b      	b.n	8000b50 <__udivmoddi4+0x134>

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f000 f970 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f004 fac7 	bl	8005298 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d0a:	f003 fff7 	bl	8004cfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000d0e:	2000      	movs	r0, #0
 8000d10:	bd08      	pop	{r3, pc}
	...

08000d14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x10>)
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_IncTick+0x14>)
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	440b      	add	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000028 	.word	0x20000028
 8000d28:	20000000 	.word	0x20000000

08000d2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <HAL_GetTick+0x8>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000028 	.word	0x20000028

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff fff6 	bl	8000d2c <HAL_GetTick>
 8000d40:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d44:	bf1e      	ittt	ne
 8000d46:	4b04      	ldrne	r3, [pc, #16]	; (8000d58 <HAL_Delay+0x20>)
 8000d48:	781b      	ldrbne	r3, [r3, #0]
 8000d4a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	1b40      	subs	r0, r0, r5
 8000d52:	4284      	cmp	r4, r0
 8000d54:	d8fa      	bhi.n	8000d4c <HAL_Delay+0x14>
  {
  }
}
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	20000000 	.word	0x20000000

08000d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d5e:	4604      	mov	r4, r0
 8000d60:	2800      	cmp	r0, #0
 8000d62:	f000 8099 	beq.w	8000e98 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d68:	b923      	cbnz	r3, 8000d74 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d70:	f004 f80a 	bl	8004d88 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d76:	06db      	lsls	r3, r3, #27
 8000d78:	f100 808c 	bmi.w	8000e94 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d82:	f023 0302 	bic.w	r3, r3, #2
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_ADC_Init+0x140>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d94:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	6861      	ldr	r1, [r4, #4]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d9e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000da0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000db0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000db2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000dba:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dc0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dc2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd0:	4933      	ldr	r1, [pc, #204]	; (8000ea0 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dd2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd6:	428a      	cmp	r2, r1
 8000dd8:	d050      	beq.n	8000e7c <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000dda:	6899      	ldr	r1, [r3, #8]
 8000ddc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000de0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000de2:	6899      	ldr	r1, [r3, #8]
 8000de4:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000df6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000df8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000dfa:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dfc:	f022 0202 	bic.w	r2, r2, #2
 8000e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e0a:	6a22      	ldr	r2, [r4, #32]
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d03d      	beq.n	8000e8c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e10:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e18:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e2a:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2c:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e30:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e36:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e40:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e52:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e64:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e66:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e6a:	f023 0303 	bic.w	r3, r3, #3
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e74:	2300      	movs	r3, #0
 8000e76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000e7a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e8a:	e7b4      	b.n	8000df6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e92:	e7ca      	b.n	8000e2a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
 8000e96:	e7ed      	b.n	8000e74 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
}
 8000e9a:	bd10      	pop	{r4, pc}
 8000e9c:	40012300 	.word	0x40012300
 8000ea0:	0f000001 	.word	0x0f000001

08000ea4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8000ea4:	2300      	movs	r3, #0
{
 8000ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000ea8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000eaa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d071      	beq.n	8000f96 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000eb2:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000eb8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000eba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000ebe:	b2ae      	uxth	r6, r5
 8000ec0:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000ec2:	d931      	bls.n	8000f28 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ec4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000ec8:	f04f 0e07 	mov.w	lr, #7
 8000ecc:	68e7      	ldr	r7, [r4, #12]
 8000ece:	3b1e      	subs	r3, #30
 8000ed0:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ed4:	ea27 070e 	bic.w	r7, r7, lr
 8000ed8:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eda:	4f3d      	ldr	r7, [pc, #244]	; (8000fd0 <HAL_ADC_ConfigChannel+0x12c>)
 8000edc:	42bd      	cmp	r5, r7
 8000ede:	d11e      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000ee0:	68e3      	ldr	r3, [r4, #12]
 8000ee2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ee6:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8000ee8:	684a      	ldr	r2, [r1, #4]
 8000eea:	2a06      	cmp	r2, #6
 8000eec:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000ef0:	d82a      	bhi.n	8000f48 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ef2:	4413      	add	r3, r2
 8000ef4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000ef6:	1f59      	subs	r1, r3, #5
 8000ef8:	231f      	movs	r3, #31
 8000efa:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000efc:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f00:	ea27 0303 	bic.w	r3, r7, r3
 8000f04:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f08:	4311      	orrs	r1, r2
 8000f0a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_ADC_ConfigChannel+0x130>)
 8000f0e:	429c      	cmp	r4, r3
 8000f10:	d039      	beq.n	8000f86 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8000f12:	2300      	movs	r3, #0
 8000f14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000f18:	4618      	mov	r0, r3
}
 8000f1a:	b003      	add	sp, #12
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f1e:	68e7      	ldr	r7, [r4, #12]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	433b      	orrs	r3, r7
 8000f26:	e7de      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f28:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000f2c:	f04f 0e07 	mov.w	lr, #7
 8000f30:	6927      	ldr	r7, [r4, #16]
 8000f32:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f3a:	ea27 070e 	bic.w	r7, r7, lr
 8000f3e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f40:	6927      	ldr	r7, [r4, #16]
 8000f42:	433b      	orrs	r3, r7
 8000f44:	6123      	str	r3, [r4, #16]
 8000f46:	e7cf      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000f48:	2a0c      	cmp	r2, #12
 8000f4a:	d80e      	bhi.n	8000f6a <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f4c:	4413      	add	r3, r2
 8000f4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f50:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000f54:	231f      	movs	r3, #31
 8000f56:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f58:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f5c:	ea21 0303 	bic.w	r3, r1, r3
 8000f60:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f64:	431a      	orrs	r2, r3
 8000f66:	6322      	str	r2, [r4, #48]	; 0x30
 8000f68:	e7d0      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f6a:	4413      	add	r3, r2
 8000f6c:	221f      	movs	r2, #31
 8000f6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f70:	3b41      	subs	r3, #65	; 0x41
 8000f72:	409a      	lsls	r2, r3
 8000f74:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f78:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f80:	4311      	orrs	r1, r2
 8000f82:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000f84:	e7c2      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f86:	2d12      	cmp	r5, #18
 8000f88:	d107      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_ADC_ConfigChannel+0x134>)
 8000f8c:	6853      	ldr	r3, [r2, #4]
 8000f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f92:	6053      	str	r3, [r2, #4]
 8000f94:	e7bd      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8000f96:	2002      	movs	r0, #2
 8000f98:	e7bf      	b.n	8000f1a <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_ADC_ConfigChannel+0x12c>)
 8000f9c:	429d      	cmp	r5, r3
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x100>
 8000fa0:	2d11      	cmp	r5, #17
 8000fa2:	d1b6      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fa6:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000fa8:	684a      	ldr	r2, [r1, #4]
 8000faa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fae:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fb0:	d1af      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_ADC_ConfigChannel+0x138>)
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_ADC_ConfigChannel+0x13c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	4353      	muls	r3, r2
        counter--;
 8000fc0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0a4      	beq.n	8000f12 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8000fc8:	9b01      	ldr	r3, [sp, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	e7f8      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x11c>
 8000fce:	bf00      	nop
 8000fd0:	10000012 	.word	0x10000012
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40012300 	.word	0x40012300
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	000f4240 	.word	0x000f4240

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fe6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff2:	041b      	lsls	r3, r3, #16
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ffe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001000:	60d3      	str	r3, [r2, #12]
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b530      	push	{r4, r5, lr}
 800100c:	68dc      	ldr	r4, [r3, #12]
 800100e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001012:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	2b04      	cmp	r3, #4
 800101a:	bf28      	it	cs
 800101c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001024:	bf8c      	ite	hi
 8001026:	3c03      	subhi	r4, #3
 8001028:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800102e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f103 33ff 	add.w	r3, r3, #4294967295
 8001034:	ea01 0103 	and.w	r1, r1, r3
 8001038:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	fa05 f404 	lsl.w	r4, r5, r4
 8001040:	f104 34ff 	add.w	r4, r4, #4294967295
 8001044:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	ea42 0201 	orr.w	r2, r2, r1
 800104c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001050:	da05      	bge.n	800105e <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	f000 000f 	and.w	r0, r0, #15
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_NVIC_SetPriority+0x6c>)
 800105a:	541a      	strb	r2, [r3, r0]
 800105c:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001068:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800106c:	bd30      	pop	{r4, r5, pc}
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	e000ed14 	.word	0xe000ed14

08001078 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001078:	0942      	lsrs	r2, r0, #5
 800107a:	2301      	movs	r3, #1
 800107c:	f000 001f 	and.w	r0, r0, #31
 8001080:	fa03 f000 	lsl.w	r0, r3, r0
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_NVIC_EnableIRQ+0x14>)
 8001086:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100

08001090 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	3801      	subs	r0, #1
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d20a      	bcs.n	80010ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	21f0      	movs	r1, #240	; 0xf0
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010be:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	bf0c      	ite	eq
 80010c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c8:	f022 0204 	bicne.w	r2, r2, #4
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4770      	bx	lr
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d4:	4770      	bx	lr

080010d6 <HAL_SYSTICK_IRQHandler>:
{
 80010d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010d8:	f7ff fffc 	bl	80010d4 <HAL_SYSTICK_Callback>
 80010dc:	bd08      	pop	{r3, pc}

080010de <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010de:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d003      	beq.n	80010ee <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f0:	2305      	movs	r3, #5
 80010f2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 80010f6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	4770      	bx	lr

08001102 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8001102:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001104:	4604      	mov	r4, r0
 8001106:	b330      	cbz	r0, 8001156 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001108:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800110c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001110:	b91b      	cbnz	r3, 800111a <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001112:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001116:	f003 fe63 	bl	8004de0 <HAL_DMA2D_MspInit>
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800111a:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800111c:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800111e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001120:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001122:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800112c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800112e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001130:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001132:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001134:	f023 0307 	bic.w	r3, r3, #7
 8001138:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800113a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800113c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800113e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001140:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001148:	430b      	orrs	r3, r1
 800114a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800114c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800114e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001150:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001154:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001156:	2001      	movs	r0, #1
}
 8001158:	bd10      	pop	{r4, pc}

0800115a <HAL_DMA2D_LineEventCallback>:
 800115a:	4770      	bx	lr

0800115c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800115c:	4770      	bx	lr

0800115e <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800115e:	6803      	ldr	r3, [r0, #0]
{
 8001160:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001162:	685e      	ldr	r6, [r3, #4]
{
 8001164:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001166:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001168:	07f2      	lsls	r2, r6, #31
 800116a:	d514      	bpl.n	8001196 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != RESET)    
 800116c:	05e9      	lsls	r1, r5, #23
 800116e:	d512      	bpl.n	8001196 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001176:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001178:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001180:	2201      	movs	r2, #1
 8001182:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001184:	2304      	movs	r3, #4
 8001186:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 800118a:	2300      	movs	r3, #0
 800118c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001190:	6943      	ldr	r3, [r0, #20]
 8001192:	b103      	cbz	r3, 8001196 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8001194:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001196:	06b2      	lsls	r2, r6, #26
 8001198:	d516      	bpl.n	80011c8 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != RESET)    
 800119a:	04ab      	lsls	r3, r5, #18
 800119c:	d514      	bpl.n	80011c8 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80011a8:	2220      	movs	r2, #32
 80011aa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 80011ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80011b4:	2304      	movs	r3, #4
 80011b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 80011ba:	2300      	movs	r3, #0
 80011bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80011c0:	6963      	ldr	r3, [r4, #20]
 80011c2:	b10b      	cbz	r3, 80011c8 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80011c4:	4620      	mov	r0, r4
 80011c6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80011c8:	0730      	lsls	r0, r6, #28
 80011ca:	d516      	bpl.n	80011fa <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 80011cc:	0529      	lsls	r1, r5, #20
 80011ce:	d514      	bpl.n	80011fa <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80011da:	2208      	movs	r2, #8
 80011dc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 80011de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 80011ec:	2300      	movs	r3, #0
 80011ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80011f2:	6963      	ldr	r3, [r4, #20]
 80011f4:	b10b      	cbz	r3, 80011fa <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80011f6:	4620      	mov	r0, r4
 80011f8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 80011fa:	0772      	lsls	r2, r6, #29
 80011fc:	d50b      	bpl.n	8001216 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != RESET)    
 80011fe:	056b      	lsls	r3, r5, #21
 8001200:	d509      	bpl.n	8001216 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001202:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001204:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800120c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800120e:	2204      	movs	r2, #4
 8001210:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001212:	f7ff ffa2 	bl	800115a <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001216:	07b0      	lsls	r0, r6, #30
 8001218:	d514      	bpl.n	8001244 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != RESET)    
 800121a:	05a9      	lsls	r1, r5, #22
 800121c:	d512      	bpl.n	8001244 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001226:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001228:	2202      	movs	r2, #2
 800122a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 800122c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800122e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001230:	2301      	movs	r3, #1
 8001232:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001236:	2300      	movs	r3, #0
 8001238:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 800123c:	6923      	ldr	r3, [r4, #16]
 800123e:	b10b      	cbz	r3, 8001244 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8001240:	4620      	mov	r0, r4
 8001242:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001244:	06f2      	lsls	r2, r6, #27
 8001246:	d513      	bpl.n	8001270 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8001248:	04eb      	lsls	r3, r5, #19
 800124a:	d511      	bpl.n	8001270 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800124c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 800124e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001256:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001258:	2210      	movs	r2, #16
 800125a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 800125c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800125e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001260:	2301      	movs	r3, #1
 8001262:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 800126c:	f7ff ff76 	bl	800115c <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001270:	bd70      	pop	{r4, r5, r6, pc}
	...

08001274 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001274:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001278:	2b01      	cmp	r3, #1
 800127a:	f04f 0302 	mov.w	r3, #2
{ 
 800127e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8001280:	d037      	beq.n	80012f2 <HAL_DMA2D_ConfigLayer+0x7e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001282:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8001284:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001286:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800128a:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 800128c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8001290:	4f1c      	ldr	r7, [pc, #112]	; (8001304 <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001292:	69dd      	ldr	r5, [r3, #28]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001298:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800129c:	3d09      	subs	r5, #9
 800129e:	6803      	ldr	r3, [r0, #0]
 80012a0:	2d01      	cmp	r5, #1
 80012a2:	d80f      	bhi.n	80012c4 <HAL_DMA2D_ConfigLayer+0x50>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80012a4:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 80012a8:	ea4e 0202 	orr.w	r2, lr, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 80012ac:	b969      	cbnz	r1, 80012ca <HAL_DMA2D_ConfigLayer+0x56>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012b0:	4039      	ands	r1, r7
 80012b2:	430a      	orrs	r2, r1
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80012b6:	6982      	ldr	r2, [r0, #24]
 80012b8:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80012ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80012bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
 80012c2:	e010      	b.n	80012e6 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80012c4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 80012c8:	b1a9      	cbz	r1, 80012f6 <HAL_DMA2D_ConfigLayer+0x82>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80012ca:	69d9      	ldr	r1, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80012cc:	4406      	add	r6, r0
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012ce:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80012d0:	ea01 0107 	and.w	r1, r1, r7
 80012d4:	ea42 0201 	orr.w	r2, r2, r1
 80012d8:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80012da:	69b2      	ldr	r2, [r6, #24]
 80012dc:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012de:	d802      	bhi.n	80012e6 <HAL_DMA2D_ConfigLayer+0x72>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80012e0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80012e4:	621c      	str	r4, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 80012ec:	2300      	movs	r3, #0
 80012ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80012f2:	4618      	mov	r0, r3
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012f8:	4039      	ands	r1, r7
 80012fa:	430a      	orrs	r2, r1
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80012fe:	6982      	ldr	r2, [r0, #24]
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e7f0      	b.n	80012e6 <HAL_DMA2D_ConfigLayer+0x72>
 8001304:	00fcfff0 	.word	0x00fcfff0

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130c:	680b      	ldr	r3, [r1, #0]
{
 800130e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80014d4 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001314:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001316:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4a6c      	ldr	r2, [pc, #432]	; (80014cc <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80014d8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800131e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001324:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001328:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800132c:	45b6      	cmp	lr, r6
 800132e:	f040 80b3 	bne.w	8001498 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	684c      	ldr	r4, [r1, #4]
 8001334:	f024 0710 	bic.w	r7, r4, #16
 8001338:	2f02      	cmp	r7, #2
 800133a:	d116      	bne.n	800136a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800133c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001340:	f003 0b07 	and.w	fp, r3, #7
 8001344:	f04f 0c0f 	mov.w	ip, #15
 8001348:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800134c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001350:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001354:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001358:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800135c:	690d      	ldr	r5, [r1, #16]
 800135e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001362:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001366:	f8ca 5020 	str.w	r5, [sl, #32]
 800136a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800136e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001370:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001374:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001378:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800137e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001382:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001386:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800138a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800138e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001392:	d811      	bhi.n	80013b8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001394:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001396:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800139a:	68cf      	ldr	r7, [r1, #12]
 800139c:	fa07 fc0a 	lsl.w	ip, r7, sl
 80013a0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80013a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013ac:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80013b0:	409f      	lsls	r7, r3
 80013b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013b6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013b8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ba:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013bc:	688f      	ldr	r7, [r1, #8]
 80013be:	fa07 f70a 	lsl.w	r7, r7, sl
 80013c2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013c4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	00e5      	lsls	r5, r4, #3
 80013c8:	d566      	bpl.n	8001498 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80013ce:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013d2:	f003 0e03 	and.w	lr, r3, #3
 80013d6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80013de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80013ea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80013ee:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80013f2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80013f6:	9503      	str	r5, [sp, #12]
 80013f8:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013fa:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80013fe:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001402:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001406:	4d32      	ldr	r5, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x1c8>)
 8001408:	42a8      	cmp	r0, r5
 800140a:	d04c      	beq.n	80014a6 <HAL_GPIO_Init+0x19e>
 800140c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001410:	42a8      	cmp	r0, r5
 8001412:	d04a      	beq.n	80014aa <HAL_GPIO_Init+0x1a2>
 8001414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001418:	42a8      	cmp	r0, r5
 800141a:	d048      	beq.n	80014ae <HAL_GPIO_Init+0x1a6>
 800141c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001420:	42a8      	cmp	r0, r5
 8001422:	d046      	beq.n	80014b2 <HAL_GPIO_Init+0x1aa>
 8001424:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001428:	42a8      	cmp	r0, r5
 800142a:	d044      	beq.n	80014b6 <HAL_GPIO_Init+0x1ae>
 800142c:	4548      	cmp	r0, r9
 800142e:	d044      	beq.n	80014ba <HAL_GPIO_Init+0x1b2>
 8001430:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001434:	42a8      	cmp	r0, r5
 8001436:	d042      	beq.n	80014be <HAL_GPIO_Init+0x1b6>
 8001438:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800143c:	42a8      	cmp	r0, r5
 800143e:	d040      	beq.n	80014c2 <HAL_GPIO_Init+0x1ba>
 8001440:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001444:	42a8      	cmp	r0, r5
 8001446:	d03e      	beq.n	80014c6 <HAL_GPIO_Init+0x1be>
 8001448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800144c:	42a8      	cmp	r0, r5
 800144e:	bf14      	ite	ne
 8001450:	250a      	movne	r5, #10
 8001452:	2509      	moveq	r5, #9
 8001454:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800145c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001460:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001462:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001466:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001468:	bf0c      	ite	eq
 800146a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800146c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001472:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001474:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001476:	bf0c      	ite	eq
 8001478:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800147a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001480:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001482:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001484:	bf0c      	ite	eq
 8001486:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001488:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800148c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800148e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001490:	bf54      	ite	pl
 8001492:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001494:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001496:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001498:	3301      	adds	r3, #1
 800149a:	2b10      	cmp	r3, #16
 800149c:	f47f af3f 	bne.w	800131e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80014a0:	b005      	add	sp, #20
 80014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a6:	2500      	movs	r5, #0
 80014a8:	e7d4      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014aa:	2501      	movs	r5, #1
 80014ac:	e7d2      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014ae:	2502      	movs	r5, #2
 80014b0:	e7d0      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014b2:	2503      	movs	r5, #3
 80014b4:	e7ce      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014b6:	2504      	movs	r5, #4
 80014b8:	e7cc      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014ba:	2505      	movs	r5, #5
 80014bc:	e7ca      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014be:	2506      	movs	r5, #6
 80014c0:	e7c8      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014c2:	2507      	movs	r5, #7
 80014c4:	e7c6      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014c6:	2508      	movs	r5, #8
 80014c8:	e7c4      	b.n	8001454 <HAL_GPIO_Init+0x14c>
 80014ca:	bf00      	nop
 80014cc:	40013c00 	.word	0x40013c00
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40021400 	.word	0x40021400

080014dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	b10a      	cbz	r2, 80014e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014de:	6181      	str	r1, [r0, #24]
 80014e0:	4770      	bx	lr
 80014e2:	0409      	lsls	r1, r1, #16
 80014e4:	e7fb      	b.n	80014de <HAL_GPIO_WritePin+0x2>

080014e6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014e6:	6803      	ldr	r3, [r0, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	0791      	lsls	r1, r2, #30
 80014ec:	d501      	bpl.n	80014f2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	07d2      	lsls	r2, r2, #31
 80014f6:	d403      	bmi.n	8001500 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	4770      	bx	lr

08001502 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001502:	b530      	push	{r4, r5, lr}
 8001504:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001506:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800150a:	6805      	ldr	r5, [r0, #0]
 800150c:	4323      	orrs	r3, r4
 800150e:	0d64      	lsrs	r4, r4, #21
 8001510:	6868      	ldr	r0, [r5, #4]
 8001512:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001516:	4319      	orrs	r1, r3
 8001518:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800151c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001520:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001524:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001528:	f044 0403 	orr.w	r4, r4, #3
 800152c:	ea20 0404 	bic.w	r4, r0, r4
 8001530:	4321      	orrs	r1, r4
 8001532:	6069      	str	r1, [r5, #4]
 8001534:	bd30      	pop	{r4, r5, pc}

08001536 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001536:	f011 0301 	ands.w	r3, r1, #1
 800153a:	d007      	beq.n	800154c <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800153c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001540:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001544:	2b28      	cmp	r3, #40	; 0x28
 8001546:	bf0c      	ite	eq
 8001548:	2342      	moveq	r3, #66	; 0x42
 800154a:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800154c:	078a      	lsls	r2, r1, #30
 800154e:	d509      	bpl.n	8001564 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001550:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001554:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001558:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800155a:	bf0c      	ite	eq
 800155c:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001560:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001564:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001566:	f001 0211 	and.w	r2, r1, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800156a:	f001 0112 	and.w	r1, r1, #18
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800156e:	bf48      	it	mi
 8001570:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001574:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001576:	bf08      	it	eq
 8001578:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800157c:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800157e:	6801      	ldr	r1, [r0, #0]

  return HAL_OK;
}
 8001580:	f04f 0000 	mov.w	r0, #0
    tmpisr |= I2C_IT_TCI;
 8001584:	bf08      	it	eq
 8001586:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800158a:	680a      	ldr	r2, [r1, #0]
 800158c:	ea22 0303 	bic.w	r3, r2, r3
 8001590:	600b      	str	r3, [r1, #0]
}
 8001592:	4770      	bx	lr

08001594 <I2C_WaitOnFlagUntilTimeout>:
{
 8001594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001598:	9f06      	ldr	r7, [sp, #24]
 800159a:	4604      	mov	r4, r0
 800159c:	4688      	mov	r8, r1
 800159e:	4616      	mov	r6, r2
 80015a0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	6993      	ldr	r3, [r2, #24]
 80015a6:	ea38 0303 	bics.w	r3, r8, r3
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	42b3      	cmp	r3, r6
 80015b2:	d002      	beq.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80015b4:	2000      	movs	r0, #0
}
 80015b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80015ba:	1c6b      	adds	r3, r5, #1
 80015bc:	d0f2      	beq.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015be:	b955      	cbnz	r5, 80015d6 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80015c2:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80015ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80015d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015d6:	f7ff fba9 	bl	8000d2c <HAL_GetTick>
 80015da:	1bc0      	subs	r0, r0, r7
 80015dc:	4285      	cmp	r5, r0
 80015de:	d2e0      	bcs.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0xe>
 80015e0:	e7ee      	b.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0x2c>

080015e2 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e2:	6803      	ldr	r3, [r0, #0]
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e8:	6998      	ldr	r0, [r3, #24]
{
 80015ea:	460d      	mov	r5, r1
 80015ec:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015ee:	f010 0010 	ands.w	r0, r0, #16
 80015f2:	d112      	bne.n	800161a <I2C_IsAcknowledgeFailed+0x38>
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80015f6:	1c69      	adds	r1, r5, #1
 80015f8:	d010      	beq.n	800161c <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015fa:	b94d      	cbnz	r5, 8001610 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80015fe:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 8001600:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800160a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800160e:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001610:	f7ff fb8c 	bl	8000d2c <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	4285      	cmp	r5, r0
 8001618:	d3f0      	bcc.n	80015fc <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	6999      	ldr	r1, [r3, #24]
 800161e:	068a      	lsls	r2, r1, #26
 8001620:	d5e9      	bpl.n	80015f6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001622:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001624:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8001626:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001628:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800162a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800162c:	f7ff ff5b 	bl	80014e6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001630:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8001632:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001634:	6853      	ldr	r3, [r2, #4]
 8001636:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800163a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800163e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001648:	2304      	movs	r3, #4
 800164a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800164e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800165a:	bd70      	pop	{r4, r5, r6, pc}

0800165c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	4604      	mov	r4, r0
 8001660:	460d      	mov	r5, r1
 8001662:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	079b      	lsls	r3, r3, #30
 800166a:	d501      	bpl.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
 800166e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001670:	4632      	mov	r2, r6
 8001672:	4629      	mov	r1, r5
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ffb4 	bl	80015e2 <I2C_IsAcknowledgeFailed>
 800167a:	b9b0      	cbnz	r0, 80016aa <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800167c:	1c6a      	adds	r2, r5, #1
 800167e:	d0f1      	beq.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001680:	b96d      	cbnz	r5, 800169e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001682:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001684:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800168c:	2320      	movs	r3, #32
 800168e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001698:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800169c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800169e:	f7ff fb45 	bl	8000d2c <HAL_GetTick>
 80016a2:	1b80      	subs	r0, r0, r6
 80016a4:	4285      	cmp	r5, r0
 80016a6:	d2dd      	bcs.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 80016a8:	e7eb      	b.n	8001682 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
}
 80016ac:	bd70      	pop	{r4, r5, r6, pc}

080016ae <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80016ae:	b570      	push	{r4, r5, r6, lr}
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	069b      	lsls	r3, r3, #26
 80016bc:	d501      	bpl.n	80016c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c2:	4632      	mov	r2, r6
 80016c4:	4629      	mov	r1, r5
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff ff8b 	bl	80015e2 <I2C_IsAcknowledgeFailed>
 80016cc:	b9a0      	cbnz	r0, 80016f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016ce:	b96d      	cbnz	r5, 80016ec <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80016d2:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016da:	2320      	movs	r3, #32
 80016dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80016e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016ec:	f7ff fb1e 	bl	8000d2c <HAL_GetTick>
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4285      	cmp	r5, r0
 80016f4:	d2df      	bcs.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80016f6:	e7eb      	b.n	80016d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	bd70      	pop	{r4, r5, r6, pc}

080016fc <HAL_I2C_Init>:
{
 80016fc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80016fe:	4604      	mov	r4, r0
 8001700:	2800      	cmp	r0, #0
 8001702:	d04a      	beq.n	800179a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001704:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001708:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800170c:	b91b      	cbnz	r3, 8001716 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001712:	f003 fb83 	bl	8004e1c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001716:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001718:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800171a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171e:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001730:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800173c:	d124      	bne.n	8001788 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800173e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001742:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001744:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001746:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001748:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800174a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800174e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001752:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800175c:	6922      	ldr	r2, [r4, #16]
 800175e:	430a      	orrs	r2, r1
 8001760:	69a1      	ldr	r1, [r4, #24]
 8001762:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001766:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001768:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800176a:	69e2      	ldr	r2, [r4, #28]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001778:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800177c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001780:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001786:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001788:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800178c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001790:	d1d8      	bne.n	8001744 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	e7d4      	b.n	8001744 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	bd10      	pop	{r4, pc}
	...

080017a0 <HAL_I2C_Master_Transmit>:
{
 80017a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80017a4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80017aa:	4604      	mov	r4, r0
 80017ac:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ae:	2b20      	cmp	r3, #32
{
 80017b0:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	f040 8089 	bne.w	80018c8 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 80017b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	f000 8084 	beq.w	80018c8 <HAL_I2C_Master_Transmit+0x128>
 80017c0:	2701      	movs	r7, #1
 80017c2:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017c6:	f7ff fab1 	bl	8000d2c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ca:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80017cc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ce:	9000      	str	r0, [sp, #0]
 80017d0:	463a      	mov	r2, r7
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4620      	mov	r0, r4
 80017d8:	f7ff fedc 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d148      	bne.n	8001872 <HAL_I2C_Master_Transmit+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e0:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80017e2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80017e6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ec:	2310      	movs	r3, #16
 80017ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80017f4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2bff      	cmp	r3, #255	; 0xff
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_I2C_Master_Transmit+0x12c>)
 8001800:	d925      	bls.n	800184e <HAL_I2C_Master_Transmit+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001802:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001804:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001806:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800180c:	4631      	mov	r1, r6
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fe77 	bl	8001502 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	462a      	mov	r2, r5
 8001818:	990a      	ldr	r1, [sp, #40]	; 0x28
 800181a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800181c:	b29b      	uxth	r3, r3
 800181e:	b9f3      	cbnz	r3, 800185e <HAL_I2C_Master_Transmit+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001820:	f7ff ff45 	bl	80016ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001824:	b9f0      	cbnz	r0, 8001864 <HAL_I2C_Master_Transmit+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	2120      	movs	r1, #32
 800182a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001832:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001836:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001840:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001844:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001848:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800184c:	e00e      	b.n	800186c <HAL_I2C_Master_Transmit+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 800184e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001850:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001852:	b292      	uxth	r2, r2
 8001854:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	e7d6      	b.n	800180c <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185e:	f7ff fefd 	bl	800165c <I2C_WaitOnTXISFlagUntilTimeout>
 8001862:	b140      	cbz	r0, 8001876 <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001864:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001866:	2b04      	cmp	r3, #4
 8001868:	d103      	bne.n	8001872 <HAL_I2C_Master_Transmit+0xd2>
          return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
}
 800186c:	b003      	add	sp, #12
 800186e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e7fa      	b.n	800186c <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	6261      	str	r1, [r4, #36]	; 0x24
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8001882:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001886:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001888:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800188a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800188c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800188e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001890:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001892:	2a00      	cmp	r2, #0
 8001894:	d1be      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x74>
 8001896:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001898:	b29b      	uxth	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ba      	beq.n	8001814 <HAL_I2C_Master_Transmit+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800189e:	9500      	str	r5, [sp, #0]
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff fe75 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d1e1      	bne.n	8001872 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d903      	bls.n	80018be <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b6:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018b8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ba:	8522      	strh	r2, [r4, #40]	; 0x28
 80018bc:	e7a4      	b.n	8001808 <HAL_I2C_Master_Transmit+0x68>
          hi2c->XferSize = hi2c->XferCount;
 80018be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018c0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80018c2:	b292      	uxth	r2, r2
 80018c4:	8522      	strh	r2, [r4, #40]	; 0x28
 80018c6:	e7c6      	b.n	8001856 <HAL_I2C_Master_Transmit+0xb6>
    return HAL_BUSY;
 80018c8:	2002      	movs	r0, #2
 80018ca:	e7cf      	b.n	800186c <HAL_I2C_Master_Transmit+0xcc>
 80018cc:	80002000 	.word	0x80002000

080018d0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018d0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80018d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018d4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018d6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80018d8:	b103      	cbz	r3, 80018dc <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80018da:	4718      	bx	r3
 80018dc:	4770      	bx	lr

080018de <HAL_I2C_SlaveTxCpltCallback>:
 80018de:	4770      	bx	lr

080018e0 <HAL_I2C_SlaveRxCpltCallback>:
 80018e0:	4770      	bx	lr

080018e2 <I2C_ITSlaveSequentialCplt>:
{
 80018e2:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	2500      	movs	r5, #0
{
 80018e6:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80018ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018f0:	2b29      	cmp	r3, #41	; 0x29
 80018f2:	d10d      	bne.n	8001910 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018f4:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018f6:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80018fc:	2321      	movs	r3, #33	; 0x21
 80018fe:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001900:	f7ff fe19 	bl	8001536 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001904:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ffe8 	bl	80018de <HAL_I2C_SlaveTxCpltCallback>
 800190e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001910:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001914:	2b2a      	cmp	r3, #42	; 0x2a
 8001916:	d10c      	bne.n	8001932 <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001918:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800191a:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800191c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001920:	2322      	movs	r3, #34	; 0x22
 8001922:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001924:	f7ff fe07 	bl	8001536 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001928:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff ffd7 	bl	80018e0 <HAL_I2C_SlaveRxCpltCallback>
 8001932:	bd38      	pop	{r3, r4, r5, pc}

08001934 <HAL_I2C_AddrCallback>:
{
 8001934:	4770      	bx	lr

08001936 <HAL_I2C_ListenCpltCallback>:
 8001936:	4770      	bx	lr

08001938 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	2220      	movs	r2, #32
{
 800193c:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800193e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001940:	2300      	movs	r3, #0
{
 8001942:	4604      	mov	r4, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8001944:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8001946:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8001948:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001950:	074b      	lsls	r3, r1, #29
 8001952:	d511      	bpl.n	8001978 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	6242      	str	r2, [r0, #36]	; 0x24
 800195a:	6802      	ldr	r2, [r0, #0]
 800195c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800195e:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001960:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001962:	b14b      	cbz	r3, 8001978 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8001964:	3b01      	subs	r3, #1
 8001966:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001968:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800196a:	3b01      	subs	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001970:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001978:	2107      	movs	r1, #7
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff fddb 	bl	8001536 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	2210      	movs	r2, #16
  HAL_I2C_ListenCpltCallback(hi2c);
 8001984:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001986:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800198e:	f7ff ffd2 	bl	8001936 <HAL_I2C_ListenCpltCallback>
 8001992:	bd10      	pop	{r4, pc}
 8001994:	ffff0000 	.word	0xffff0000

08001998 <HAL_I2C_ErrorCallback>:
 8001998:	4770      	bx	lr

0800199a <HAL_I2C_AbortCpltCallback>:
{
 800199a:	4770      	bx	lr

0800199c <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800199c:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <I2C_ITError+0xd4>)
{
 80019a0:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80019a2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
{
 80019a6:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80019aa:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80019ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019ae:	4319      	orrs	r1, r3
 80019b0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80019b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019b6:	2b28      	cmp	r3, #40	; 0x28
 80019b8:	d007      	beq.n	80019ca <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80019ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80019be:	2b29      	cmp	r3, #41	; 0x29
 80019c0:	d003      	beq.n	80019ca <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80019c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80019c6:	2b2a      	cmp	r3, #42	; 0x2a
 80019c8:	d121      	bne.n	8001a0e <I2C_ITError+0x72>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019ca:	2103      	movs	r1, #3
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fdb2 	bl	8001536 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019d2:	2328      	movs	r3, #40	; 0x28
 80019d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <I2C_ITError+0xd8>)
    hi2c->XferISR       = NULL;
 80019de:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019e4:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019e6:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 80019ea:	d01d      	beq.n	8001a28 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019f2:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <I2C_ITError+0xdc>)
 80019f6:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 80019f8:	2300      	movs	r3, #0
 80019fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80019fe:	f7ff fb6e 	bl	80010de <HAL_DMA_Abort_IT>
 8001a02:	b3a0      	cbz	r0, 8001a6e <I2C_ITError+0xd2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001a04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a06:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8001a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a0c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a0e:	2107      	movs	r1, #7
 8001a10:	f7ff fd91 	bl	8001536 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001a14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a18:	2b60      	cmp	r3, #96	; 0x60
 8001a1a:	d002      	beq.n	8001a22 <I2C_ITError+0x86>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	6323      	str	r3, [r4, #48]	; 0x30
 8001a26:	e7da      	b.n	80019de <I2C_ITError+0x42>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a28:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8001a2c:	d00d      	beq.n	8001a4a <I2C_ITError+0xae>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a2e:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a30:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <I2C_ITError+0xdc>)
 8001a3a:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 8001a3c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a40:	f7ff fb4d 	bl	80010de <HAL_DMA_Abort_IT>
 8001a44:	b198      	cbz	r0, 8001a6e <I2C_ITError+0xd2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a48:	e7dd      	b.n	8001a06 <I2C_ITError+0x6a>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a4e:	2b60      	cmp	r3, #96	; 0x60
 8001a50:	d108      	bne.n	8001a64 <I2C_ITError+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001a54:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a58:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a5e:	f7ff ff9c 	bl	800199a <HAL_I2C_AbortCpltCallback>
 8001a62:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8001a64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff ff95 	bl	8001998 <HAL_I2C_ErrorCallback>
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	ffff0000 	.word	0xffff0000
 8001a74:	08001b7d 	.word	0x08001b7d
 8001a78:	08001d8f 	.word	0x08001d8f

08001a7c <I2C_ITSlaveCplt>:
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7e:	2220      	movs	r2, #32
 8001a80:	6803      	ldr	r3, [r0, #0]
{
 8001a82:	4604      	mov	r4, r0
 8001a84:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a86:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a88:	2208      	movs	r2, #8
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001a8a:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a8c:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001a8e:	f7ff fd52 	bl	8001536 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a92:	6823      	ldr	r3, [r4, #0]
  I2C_Flush_TXDR(hi2c);
 8001a94:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001aa4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001aa8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001ab2:	f7ff fd18 	bl	80014e6 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	0458      	lsls	r0, r3, #17
 8001abc:	d402      	bmi.n	8001ac4 <I2C_ITSlaveCplt+0x48>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001abe:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001ac0:	0419      	lsls	r1, r3, #16
 8001ac2:	d509      	bpl.n	8001ad8 <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001ac4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001ac8:	2b21      	cmp	r3, #33	; 0x21
 8001aca:	bf0c      	ite	eq
 8001acc:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8001ace:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b11b      	cbz	r3, 8001ae6 <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ade:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001ae6:	076b      	lsls	r3, r5, #29
 8001ae8:	d510      	bpl.n	8001b0c <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	6261      	str	r1, [r4, #36]	; 0x24
 8001af2:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001af4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001af6:	b14b      	cbz	r3, 8001b0c <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 8001af8:	3b01      	subs	r3, #1
 8001afa:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001afc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8001b10:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b18:	b16b      	cbz	r3, 8001b36 <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff ff3d 	bl	800199c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001b22:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001b26:	2b28      	cmp	r3, #40	; 0x28
 8001b28:	d124      	bne.n	8001b74 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4620      	mov	r0, r4
}
 8001b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8001b32:	f7ff bf01 	b.w	8001938 <I2C_ITListenCplt>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b38:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b3c:	d00a      	beq.n	8001b54 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <I2C_ITSlaveCplt+0xfc>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b40:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001b42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b46:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b4e:	f7ff fef2 	bl	8001936 <HAL_I2C_ListenCpltCallback>
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b54:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b58:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b5e:	2a22      	cmp	r2, #34	; 0x22
 8001b60:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b68:	d102      	bne.n	8001b70 <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b6a:	f7ff feb9 	bl	80018e0 <HAL_I2C_SlaveRxCpltCallback>
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b70:	f7ff feb5 	bl	80018de <HAL_I2C_SlaveTxCpltCallback>
 8001b74:	bd38      	pop	{r3, r4, r5, pc}
 8001b76:	bf00      	nop
 8001b78:	ffff0000 	.word	0xffff0000

08001b7c <I2C_Slave_ISR_IT>:
{
 8001b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8001b80:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
{
 8001b84:	4604      	mov	r4, r0
 8001b86:	460e      	mov	r6, r1
 8001b88:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	f000 80cb 	beq.w	8001d26 <I2C_Slave_ISR_IT+0x1aa>
 8001b90:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001b92:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8001b94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001b98:	d53e      	bpl.n	8001c18 <I2C_Slave_ISR_IT+0x9c>
 8001b9a:	06d0      	lsls	r0, r2, #27
 8001b9c:	d53c      	bpl.n	8001c18 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8001b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	bb8b      	cbnz	r3, 8001c08 <I2C_Slave_ISR_IT+0x8c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001baa:	d003      	beq.n	8001bb4 <I2C_Slave_ISR_IT+0x38>
 8001bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bb2:	d114      	bne.n	8001bde <I2C_Slave_ISR_IT+0x62>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001bb4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001bb8:	2b28      	cmp	r3, #40	; 0x28
 8001bba:	d110      	bne.n	8001bde <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001bbc:	4631      	mov	r1, r6
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff feba 	bl	8001938 <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001bc4:	06b2      	lsls	r2, r6, #26
 8001bc6:	d505      	bpl.n	8001bd4 <I2C_Slave_ISR_IT+0x58>
 8001bc8:	06bb      	lsls	r3, r7, #26
 8001bca:	d503      	bpl.n	8001bd4 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001bcc:	4631      	mov	r1, r6
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff ff54 	bl	8001a7c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8001bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	d00c      	beq.n	8001c02 <I2C_Slave_ISR_IT+0x86>
 8001be8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001bec:	2a29      	cmp	r2, #41	; 0x29
 8001bee:	d108      	bne.n	8001c02 <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf0:	2210      	movs	r2, #16
        I2C_Flush_TXDR(hi2c);
 8001bf2:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf4:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001bf6:	f7ff fc76 	bl	80014e6 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fe71 	bl	80018e2 <I2C_ITSlaveSequentialCplt>
 8001c00:	e7e0      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c02:	2210      	movs	r2, #16
 8001c04:	61da      	str	r2, [r3, #28]
 8001c06:	e7dd      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6463      	str	r3, [r4, #68]	; 0x44
 8001c16:	e7d5      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001c18:	0771      	lsls	r1, r6, #29
 8001c1a:	d51a      	bpl.n	8001c52 <I2C_Slave_ISR_IT+0xd6>
 8001c1c:	077a      	lsls	r2, r7, #29
 8001c1e:	d518      	bpl.n	8001c52 <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8001c20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b163      	cbz	r3, 8001c40 <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	6262      	str	r2, [r4, #36]	; 0x24
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c30:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001c32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001c38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1bd      	bne.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001c4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c4e:	d1d4      	bne.n	8001bfa <I2C_Slave_ISR_IT+0x7e>
 8001c50:	e7b8      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001c52:	0733      	lsls	r3, r6, #28
 8001c54:	d546      	bpl.n	8001ce4 <I2C_Slave_ISR_IT+0x168>
 8001c56:	073d      	lsls	r5, r7, #28
 8001c58:	d544      	bpl.n	8001ce4 <I2C_Slave_ISR_IT+0x168>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8001c5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c62:	2b28      	cmp	r3, #40	; 0x28
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	d137      	bne.n	8001cd8 <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 8001c68:	699a      	ldr	r2, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c6a:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c6c:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8001c6e:	f3c2 4800 	ubfx	r8, r2, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c72:	2902      	cmp	r1, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c74:	689a      	ldr	r2, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c76:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c7a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c7e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c82:	d120      	bne.n	8001cc6 <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c84:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001c88:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001c8c:	f015 0506 	ands.w	r5, r5, #6
 8001c90:	d10f      	bne.n	8001cb2 <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 8001c92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c94:	3101      	adds	r1, #1
 8001c96:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c9a:	2902      	cmp	r1, #2
 8001c9c:	d192      	bne.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c9e:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8001ca0:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ca2:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001ca4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ca8:	4641      	mov	r1, r8
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fe42 	bl	8001934 <HAL_I2C_AddrCallback>
 8001cb0:	e788      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fc3e 	bl	8001536 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001cba:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cbc:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8001cc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001cc4:	e7f0      	b.n	8001ca8 <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fc34 	bl	8001536 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001cce:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cd0:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8001cd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001cd6:	e7e7      	b.n	8001ca8 <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cd8:	2208      	movs	r2, #8
 8001cda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ce2:	e76f      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001ce4:	07b0      	lsls	r0, r6, #30
 8001ce6:	f57f af6d 	bpl.w	8001bc4 <I2C_Slave_ISR_IT+0x48>
 8001cea:	07b9      	lsls	r1, r7, #30
 8001cec:	f57f af6a 	bpl.w	8001bc4 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8001cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b16b      	cbz	r3, 8001d12 <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cf8:	6822      	ldr	r2, [r4, #0]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	6261      	str	r1, [r4, #36]	; 0x24
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001d02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	8523      	strh	r3, [r4, #40]	; 0x28
 8001d10:	e758      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	f43f af6f 	beq.w	8001bfa <I2C_Slave_ISR_IT+0x7e>
 8001d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f43f af6b 	beq.w	8001bfa <I2C_Slave_ISR_IT+0x7e>
 8001d24:	e74e      	b.n	8001bc4 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8001d26:	2002      	movs	r0, #2
}
 8001d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001d2c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d2c:	6803      	ldr	r3, [r0, #0]
 8001d2e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d30:	681a      	ldr	r2, [r3, #0]
{
 8001d32:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d34:	05cc      	lsls	r4, r1, #23
 8001d36:	d508      	bpl.n	8001d4a <HAL_I2C_ER_IRQHandler+0x1e>
 8001d38:	0614      	lsls	r4, r2, #24
 8001d3a:	d506      	bpl.n	8001d4a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d3e:	f044 0401 	orr.w	r4, r4, #1
 8001d42:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d44:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001d48:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d4a:	054c      	lsls	r4, r1, #21
 8001d4c:	d508      	bpl.n	8001d60 <HAL_I2C_ER_IRQHandler+0x34>
 8001d4e:	0614      	lsls	r4, r2, #24
 8001d50:	d506      	bpl.n	8001d60 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d54:	f044 0408 	orr.w	r4, r4, #8
 8001d58:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001d5e:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d60:	0589      	lsls	r1, r1, #22
 8001d62:	d508      	bpl.n	8001d76 <HAL_I2C_ER_IRQHandler+0x4a>
 8001d64:	0612      	lsls	r2, r2, #24
 8001d66:	d506      	bpl.n	8001d76 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d6a:	f042 0202 	orr.w	r2, r2, #2
 8001d6e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d78:	f013 0f0b 	tst.w	r3, #11
 8001d7c:	d004      	beq.n	8001d88 <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d7e:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8001d80:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d84:	f7ff be0a 	b.w	800199c <I2C_ITError>
}
 8001d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d90:	6802      	ldr	r2, [r0, #0]
{
 8001d92:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d94:	6853      	ldr	r3, [r2, #4]
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001da0:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001da2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001da4:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001da6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001daa:	2b60      	cmp	r3, #96	; 0x60
 8001dac:	d105      	bne.n	8001dba <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	2320      	movs	r3, #32
 8001db0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001db4:	f7ff fdf1 	bl	800199a <HAL_I2C_AbortCpltCallback>
 8001db8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001dba:	f7ff fded 	bl	8001998 <HAL_I2C_ErrorCallback>
 8001dbe:	bd08      	pop	{r3, pc}

08001dc0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	2a20      	cmp	r2, #32
{
 8001dc8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dca:	d11d      	bne.n	8001e08 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d019      	beq.n	8001e08 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	2324      	movs	r3, #36	; 0x24
 8001dd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dda:	6803      	ldr	r3, [r0, #0]
 8001ddc:	681c      	ldr	r4, [r3, #0]
 8001dde:	f024 0401 	bic.w	r4, r4, #1
 8001de2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de4:	681c      	ldr	r4, [r3, #0]
 8001de6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001dea:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dec:	681c      	ldr	r4, [r3, #0]
 8001dee:	4321      	orrs	r1, r4
 8001df0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	f041 0101 	orr.w	r1, r1, #1
 8001df8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2002      	movs	r0, #2
  }
}
 8001e0a:	bd10      	pop	{r4, pc}

08001e0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e0c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001e12:	b2e4      	uxtb	r4, r4
 8001e14:	2c20      	cmp	r4, #32
 8001e16:	d11c      	bne.n	8001e52 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d018      	beq.n	8001e52 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	2324      	movs	r3, #36	; 0x24
 8001e22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e26:	6803      	ldr	r3, [r0, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e30:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e32:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e36:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e3a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001e52:	2002      	movs	r0, #2
  }
}
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e56:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001e58:	f04f 0c00 	mov.w	ip, #0
{
 8001e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e60:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001e62:	6804      	ldr	r4, [r0, #0]
 8001e64:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e66:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001e68:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001e6a:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e6e:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001e70:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001e74:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001e78:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e7c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001e80:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e82:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001e84:	68e0      	ldr	r0, [r4, #12]
 8001e86:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8001e8a:	4430      	add	r0, r6
 8001e8c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001e90:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001e92:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001e94:	68e0      	ldr	r0, [r4, #12]
 8001e96:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001e9a:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001e9c:	6898      	ldr	r0, [r3, #8]
 8001e9e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001ea2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001ea4:	6888      	ldr	r0, [r1, #8]
 8001ea6:	68e6      	ldr	r6, [r4, #12]
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001eae:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001eb0:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001eb2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001eb6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001eb8:	6918      	ldr	r0, [r3, #16]
 8001eba:	f020 0007 	bic.w	r0, r0, #7
 8001ebe:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001ec0:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001ec2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8001ec4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8001ec8:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001ecc:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001ed0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001ed4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001ed8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001edc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001ee0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001ee2:	6958      	ldr	r0, [r3, #20]
 8001ee4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001ee8:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001eea:	6948      	ldr	r0, [r1, #20]
 8001eec:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001eee:	69d8      	ldr	r0, [r3, #28]
 8001ef0:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001ef4:	f020 0007 	bic.w	r0, r0, #7
 8001ef8:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001efa:	6a08      	ldr	r0, [r1, #32]
 8001efc:	69cd      	ldr	r5, [r1, #28]
 8001efe:	4305      	orrs	r5, r0
 8001f00:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001f02:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001f04:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001f06:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001f0a:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f0c:	b31e      	cbz	r6, 8001f56 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001f0e:	2e01      	cmp	r6, #1
 8001f10:	d023      	beq.n	8001f5a <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001f12:	1eb0      	subs	r0, r6, #2
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d922      	bls.n	8001f5e <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001f18:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2002      	moveq	r0, #2
 8001f1e:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001f20:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001f22:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001f26:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001f2a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001f2c:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001f2e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001f30:	4345      	muls	r5, r0
 8001f32:	4378      	muls	r0, r7
 8001f34:	3003      	adds	r0, #3
 8001f36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001f3a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001f3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f3e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001f42:	f020 0007 	bic.w	r0, r0, #7
 8001f46:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001f48:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001f4a:	58a3      	ldr	r3, [r4, r2]
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	50a3      	str	r3, [r4, r2]
 8001f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8001f56:	2004      	movs	r0, #4
 8001f58:	e7e2      	b.n	8001f20 <LTDC_SetConfig+0xca>
    tmp = 3;
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	e7e0      	b.n	8001f20 <LTDC_SetConfig+0xca>
    tmp = 2;
 8001f5e:	2002      	movs	r0, #2
 8001f60:	e7de      	b.n	8001f20 <LTDC_SetConfig+0xca>
	...

08001f64 <HAL_LTDC_Init>:
{
 8001f64:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8001f66:	4604      	mov	r4, r0
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d067      	beq.n	800203c <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001f6c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f74:	b91b      	cbnz	r3, 8001f7e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001f76:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001f7a:	f002 ffa7 	bl	8004ecc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f7e:	2302      	movs	r3, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f80:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001f8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f90:	6862      	ldr	r2, [r4, #4]
 8001f92:	6999      	ldr	r1, [r3, #24]
 8001f94:	4302      	orrs	r2, r0
 8001f96:	68e0      	ldr	r0, [r4, #12]
 8001f98:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f9a:	6920      	ldr	r0, [r4, #16]
 8001f9c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8001f9e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001fa0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001fa4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001fb2:	69a0      	ldr	r0, [r4, #24]
 8001fb4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8001fb6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001fb8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001fc6:	6a20      	ldr	r0, [r4, #32]
 8001fc8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8001fca:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001fcc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001fda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fdc:	4302      	orrs	r2, r0
 8001fde:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	4011      	ands	r1, r2
 8001fe4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8001fe6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8001ff6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ffa:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8001ffe:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002002:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800200a:	430a      	orrs	r2, r1
 800200c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002010:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002014:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	f042 0204 	orr.w	r2, r2, #4
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002022:	f042 0202 	orr.w	r2, r2, #2
 8002026:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002030:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002032:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002036:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800203a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
}
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	f000f800 	.word	0xf000f800

08002044 <HAL_LTDC_ErrorCallback>:
 8002044:	4770      	bx	lr

08002046 <HAL_LTDC_LineEventCallback>:
 8002046:	4770      	bx	lr

08002048 <HAL_LTDC_ReloadEventCallback>:
{
 8002048:	4770      	bx	lr

0800204a <HAL_LTDC_IRQHandler>:
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204e:	0751      	lsls	r1, r2, #29
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8002054:	d515      	bpl.n	8002082 <HAL_LTDC_IRQHandler+0x38>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8002056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	d512      	bpl.n	8002082 <HAL_LTDC_IRQHandler+0x38>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002064:	2204      	movs	r2, #4
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002068:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
      __HAL_UNLOCK(hltdc);
 8002074:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002076:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 800207a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 800207e:	f7ff ffe1 	bl	8002044 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002086:	0790      	lsls	r0, r2, #30
 8002088:	d516      	bpl.n	80020b8 <HAL_LTDC_IRQHandler+0x6e>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 800208a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208c:	0791      	lsls	r1, r2, #30
 800208e:	d513      	bpl.n	80020b8 <HAL_LTDC_IRQHandler+0x6e>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ErrorCallback(hltdc);
 8002092:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002094:	f022 0202 	bic.w	r2, r2, #2
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800209a:	2202      	movs	r2, #2
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800209e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80020a8:	2304      	movs	r3, #4
 80020aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 80020ae:	2300      	movs	r3, #0
 80020b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 80020b4:	f7ff ffc6 	bl	8002044 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020bc:	07d2      	lsls	r2, r2, #31
 80020be:	d510      	bpl.n	80020e2 <HAL_LTDC_IRQHandler+0x98>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80020c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c2:	07d0      	lsls	r0, r2, #31
 80020c4:	d50d      	bpl.n	80020e2 <HAL_LTDC_IRQHandler+0x98>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_LineEventCallback(hltdc);
 80020c8:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80020d0:	2201      	movs	r2, #1
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_UNLOCK(hltdc);
 80020d4:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_READY;
 80020d6:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 80020da:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_LineEventCallback(hltdc);
 80020de:	f7ff ffb2 	bl	8002046 <HAL_LTDC_LineEventCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	0711      	lsls	r1, r2, #28
 80020e8:	d511      	bpl.n	800210e <HAL_LTDC_IRQHandler+0xc4>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 80020ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ec:	0712      	lsls	r2, r2, #28
 80020ee:	d50e      	bpl.n	800210e <HAL_LTDC_IRQHandler+0xc4>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ReloadEventCallback(hltdc);
 80020f2:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80020f4:	f022 0208 	bic.w	r2, r2, #8
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80020fa:	2208      	movs	r2, #8
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->State = HAL_LTDC_STATE_READY;
 80020fe:	2301      	movs	r3, #1
 8002100:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002104:	2300      	movs	r3, #0
 8002106:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ReloadEventCallback(hltdc);
 800210a:	f7ff ff9d 	bl	8002048 <HAL_LTDC_ReloadEventCallback>
 800210e:	bd10      	pop	{r4, pc}

08002110 <HAL_LTDC_ConfigLayer>:
{   
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002112:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 8002116:	4606      	mov	r6, r0
 8002118:	468e      	mov	lr, r1
 800211a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800211c:	2b01      	cmp	r3, #1
 800211e:	f04f 0002 	mov.w	r0, #2
 8002122:	d01d      	beq.n	8002160 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002124:	2434      	movs	r4, #52	; 0x34
 8002126:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002128:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800212c:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800212e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8002132:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002136:	3438      	adds	r4, #56	; 0x38
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002144:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002146:	4630      	mov	r0, r6
 8002148:	4662      	mov	r2, ip
 800214a:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800214c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800214e:	f7ff fe82 	bl	8001e56 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002152:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002154:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002156:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002158:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800215c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002164 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002166:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800216a:	4c19      	ldr	r4, [pc, #100]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002182:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002184:	f7fe fdd2 	bl	8000d2c <HAL_GetTick>
 8002188:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800218a:	6863      	ldr	r3, [r4, #4]
 800218c:	03da      	lsls	r2, r3, #15
 800218e:	d50c      	bpl.n	80021aa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002198:	f7fe fdc8 	bl	8000d2c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800219c:	4c0c      	ldr	r4, [pc, #48]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800219e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	039b      	lsls	r3, r3, #14
 80021a4:	d50a      	bpl.n	80021bc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80021a6:	2000      	movs	r0, #0
 80021a8:	e006      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021aa:	f7fe fdbf 	bl	8000d2c <HAL_GetTick>
 80021ae:	1b40      	subs	r0, r0, r5
 80021b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021b4:	d9e9      	bls.n	800218a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
}
 80021b8:	b003      	add	sp, #12
 80021ba:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021bc:	f7fe fdb6 	bl	8000d2c <HAL_GetTick>
 80021c0:	1b40      	subs	r0, r0, r5
 80021c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021c6:	d9eb      	bls.n	80021a0 <HAL_PWREx_EnableOverDrive+0x3c>
 80021c8:	e7f5      	b.n	80021b6 <HAL_PWREx_EnableOverDrive+0x52>
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40007000 	.word	0x40007000

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	4604      	mov	r4, r0
 80021da:	b918      	cbnz	r0, 80021e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80021de:	b002      	add	sp, #8
 80021e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e4:	6803      	ldr	r3, [r0, #0]
 80021e6:	07d8      	lsls	r0, r3, #31
 80021e8:	d410      	bmi.n	800220c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	0799      	lsls	r1, r3, #30
 80021ee:	d45e      	bmi.n	80022ae <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	0719      	lsls	r1, r3, #28
 80021f4:	f100 80a3 	bmi.w	800233e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	075a      	lsls	r2, r3, #29
 80021fc:	f100 80c4 	bmi.w	8002388 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002200:	69a2      	ldr	r2, [r4, #24]
 8002202:	2a00      	cmp	r2, #0
 8002204:	f040 812e 	bne.w	8002464 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e7e8      	b.n	80021de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b93      	ldr	r3, [pc, #588]	; (800245c <HAL_RCC_OscConfig+0x288>)
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	f002 020c 	and.w	r2, r2, #12
 8002214:	2a04      	cmp	r2, #4
 8002216:	d007      	beq.n	8002228 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	f002 020c 	and.w	r2, r2, #12
 800221e:	2a08      	cmp	r2, #8
 8002220:	d10a      	bne.n	8002238 <HAL_RCC_OscConfig+0x64>
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	025a      	lsls	r2, r3, #9
 8002226:	d507      	bpl.n	8002238 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <HAL_RCC_OscConfig+0x288>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	039b      	lsls	r3, r3, #14
 800222e:	d5dc      	bpl.n	80021ea <HAL_RCC_OscConfig+0x16>
 8002230:	6863      	ldr	r3, [r4, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1d9      	bne.n	80021ea <HAL_RCC_OscConfig+0x16>
 8002236:	e7d1      	b.n	80021dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	4d88      	ldr	r5, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x288>)
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d111      	bne.n	8002266 <HAL_RCC_OscConfig+0x92>
 8002242:	682b      	ldr	r3, [r5, #0]
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800224a:	f7fe fd6f 	bl	8000d2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4d83      	ldr	r5, [pc, #524]	; (800245c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002250:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	682b      	ldr	r3, [r5, #0]
 8002254:	039f      	lsls	r7, r3, #14
 8002256:	d4c8      	bmi.n	80021ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fd68 	bl	8000d2c <HAL_GetTick>
 800225c:	1b80      	subs	r0, r0, r6
 800225e:	2864      	cmp	r0, #100	; 0x64
 8002260:	d9f7      	bls.n	8002252 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002262:	2003      	movs	r0, #3
 8002264:	e7bb      	b.n	80021de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	b99b      	cbnz	r3, 8002290 <HAL_RCC_OscConfig+0xbc>
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	602b      	str	r3, [r5, #0]
 8002270:	682b      	ldr	r3, [r5, #0]
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002278:	f7fe fd58 	bl	8000d2c <HAL_GetTick>
 800227c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	0398      	lsls	r0, r3, #14
 8002282:	d5b2      	bpl.n	80021ea <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fd52 	bl	8000d2c <HAL_GetTick>
 8002288:	1b80      	subs	r0, r0, r6
 800228a:	2864      	cmp	r0, #100	; 0x64
 800228c:	d9f7      	bls.n	800227e <HAL_RCC_OscConfig+0xaa>
 800228e:	e7e8      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	d103      	bne.n	80022a0 <HAL_RCC_OscConfig+0xcc>
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	602b      	str	r3, [r5, #0]
 800229e:	e7d0      	b.n	8002242 <HAL_RCC_OscConfig+0x6e>
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	602b      	str	r3, [r5, #0]
 80022a6:	682b      	ldr	r3, [r5, #0]
 80022a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ac:	e7cc      	b.n	8002248 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x288>)
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	f012 0f0c 	tst.w	r2, #12
 80022b6:	d007      	beq.n	80022c8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	f002 020c 	and.w	r2, r2, #12
 80022be:	2a08      	cmp	r2, #8
 80022c0:	d111      	bne.n	80022e6 <HAL_RCC_OscConfig+0x112>
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0259      	lsls	r1, r3, #9
 80022c6:	d40e      	bmi.n	80022e6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c8:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_OscConfig+0x288>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	0792      	lsls	r2, r2, #30
 80022ce:	d502      	bpl.n	80022d6 <HAL_RCC_OscConfig+0x102>
 80022d0:	68e2      	ldr	r2, [r4, #12]
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d182      	bne.n	80021dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	6921      	ldr	r1, [r4, #16]
 80022da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80022de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80022e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e4:	e784      	b.n	80021f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e6:	68e3      	ldr	r3, [r4, #12]
 80022e8:	4d5c      	ldr	r5, [pc, #368]	; (800245c <HAL_RCC_OscConfig+0x288>)
 80022ea:	b1bb      	cbz	r3, 800231c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022f4:	f7fe fd1a 	bl	8000d2c <HAL_GetTick>
 80022f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	682b      	ldr	r3, [r5, #0]
 80022fc:	079f      	lsls	r7, r3, #30
 80022fe:	d507      	bpl.n	8002310 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	6922      	ldr	r2, [r4, #16]
 8002304:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002308:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800230c:	602b      	str	r3, [r5, #0]
 800230e:	e76f      	b.n	80021f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fd0c 	bl	8000d2c <HAL_GetTick>
 8002314:	1b80      	subs	r0, r0, r6
 8002316:	2802      	cmp	r0, #2
 8002318:	d9ef      	bls.n	80022fa <HAL_RCC_OscConfig+0x126>
 800231a:	e7a2      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002324:	f7fe fd02 	bl	8000d2c <HAL_GetTick>
 8002328:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	0798      	lsls	r0, r3, #30
 800232e:	f57f af5f 	bpl.w	80021f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002332:	f7fe fcfb 	bl	8000d2c <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	2802      	cmp	r0, #2
 800233a:	d9f6      	bls.n	800232a <HAL_RCC_OscConfig+0x156>
 800233c:	e791      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233e:	6963      	ldr	r3, [r4, #20]
 8002340:	4d46      	ldr	r5, [pc, #280]	; (800245c <HAL_RCC_OscConfig+0x288>)
 8002342:	b183      	cbz	r3, 8002366 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002344:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800234c:	f7fe fcee 	bl	8000d2c <HAL_GetTick>
 8002350:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002354:	079b      	lsls	r3, r3, #30
 8002356:	f53f af4f 	bmi.w	80021f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe fce7 	bl	8000d2c <HAL_GetTick>
 800235e:	1b80      	subs	r0, r0, r6
 8002360:	2802      	cmp	r0, #2
 8002362:	d9f6      	bls.n	8002352 <HAL_RCC_OscConfig+0x17e>
 8002364:	e77d      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002366:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800236e:	f7fe fcdd 	bl	8000d2c <HAL_GetTick>
 8002372:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002376:	079f      	lsls	r7, r3, #30
 8002378:	f57f af3e 	bpl.w	80021f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe fcd6 	bl	8000d2c <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	2802      	cmp	r0, #2
 8002384:	d9f6      	bls.n	8002374 <HAL_RCC_OscConfig+0x1a0>
 8002386:	e76c      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002388:	4b34      	ldr	r3, [pc, #208]	; (800245c <HAL_RCC_OscConfig+0x288>)
 800238a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238c:	00d0      	lsls	r0, r2, #3
 800238e:	d427      	bmi.n	80023e0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002392:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a4:	4d2e      	ldr	r5, [pc, #184]	; (8002460 <HAL_RCC_OscConfig+0x28c>)
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	05d9      	lsls	r1, r3, #23
 80023aa:	d51b      	bpl.n	80023e4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	68a3      	ldr	r3, [r4, #8]
 80023ae:	4d2b      	ldr	r5, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x288>)
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d127      	bne.n	8002404 <HAL_RCC_OscConfig+0x230>
 80023b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023c0:	f7fe fcb4 	bl	8000d2c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4f25      	ldr	r7, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80023c6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ca:	079b      	lsls	r3, r3, #30
 80023cc:	d53f      	bpl.n	800244e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	f43f af16 	beq.w	8002200 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x288>)
 80023d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	e70f      	b.n	8002200 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80023e0:	2600      	movs	r6, #0
 80023e2:	e7df      	b.n	80023a4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80023ec:	f7fe fc9e 	bl	8000d2c <HAL_GetTick>
 80023f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	05da      	lsls	r2, r3, #23
 80023f6:	d4d9      	bmi.n	80023ac <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023f8:	f7fe fc98 	bl	8000d2c <HAL_GetTick>
 80023fc:	1bc0      	subs	r0, r0, r7
 80023fe:	2864      	cmp	r0, #100	; 0x64
 8002400:	d9f7      	bls.n	80023f2 <HAL_RCC_OscConfig+0x21e>
 8002402:	e72e      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	b9ab      	cbnz	r3, 8002432 <HAL_RCC_OscConfig+0x25e>
 8002406:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	672b      	str	r3, [r5, #112]	; 0x70
 8002412:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800241a:	f7fe fc87 	bl	8000d2c <HAL_GetTick>
 800241e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002422:	0798      	lsls	r0, r3, #30
 8002424:	d5d3      	bpl.n	80023ce <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fc81 	bl	8000d2c <HAL_GetTick>
 800242a:	1bc0      	subs	r0, r0, r7
 800242c:	4540      	cmp	r0, r8
 800242e:	d9f7      	bls.n	8002420 <HAL_RCC_OscConfig+0x24c>
 8002430:	e717      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002432:	2b05      	cmp	r3, #5
 8002434:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002436:	d103      	bne.n	8002440 <HAL_RCC_OscConfig+0x26c>
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	672b      	str	r3, [r5, #112]	; 0x70
 800243e:	e7b9      	b.n	80023b4 <HAL_RCC_OscConfig+0x1e0>
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	672b      	str	r3, [r5, #112]	; 0x70
 8002446:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	e7b5      	b.n	80023ba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fc6d 	bl	8000d2c <HAL_GetTick>
 8002452:	eba0 0008 	sub.w	r0, r0, r8
 8002456:	42a8      	cmp	r0, r5
 8002458:	d9b6      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1f4>
 800245a:	e702      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4d24      	ldr	r5, [pc, #144]	; (80024f8 <HAL_RCC_OscConfig+0x324>)
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	f43f aeb5 	beq.w	80021dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002472:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002474:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	d12e      	bne.n	80024dc <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800247e:	f7fe fc55 	bl	8000d2c <HAL_GetTick>
 8002482:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	0199      	lsls	r1, r3, #6
 8002488:	d422      	bmi.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248a:	6a22      	ldr	r2, [r4, #32]
 800248c:	69e3      	ldr	r3, [r4, #28]
 800248e:	4313      	orrs	r3, r2
 8002490:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002492:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002496:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800249a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800249c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4c15      	ldr	r4, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024b6:	f7fe fc39 	bl	8000d2c <HAL_GetTick>
 80024ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	019a      	lsls	r2, r3, #6
 80024c0:	f53f aea2 	bmi.w	8002208 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fc32 	bl	8000d2c <HAL_GetTick>
 80024c8:	1b40      	subs	r0, r0, r5
 80024ca:	2802      	cmp	r0, #2
 80024cc:	d9f6      	bls.n	80024bc <HAL_RCC_OscConfig+0x2e8>
 80024ce:	e6c8      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fc2c 	bl	8000d2c <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2802      	cmp	r0, #2
 80024d8:	d9d4      	bls.n	8002484 <HAL_RCC_OscConfig+0x2b0>
 80024da:	e6c2      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80024dc:	f7fe fc26 	bl	8000d2c <HAL_GetTick>
 80024e0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	f57f ae8f 	bpl.w	8002208 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fc1f 	bl	8000d2c <HAL_GetTick>
 80024ee:	1b00      	subs	r0, r0, r4
 80024f0:	2802      	cmp	r0, #2
 80024f2:	d9f6      	bls.n	80024e2 <HAL_RCC_OscConfig+0x30e>
 80024f4:	e6b5      	b.n	8002262 <HAL_RCC_OscConfig+0x8e>
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fc:	4913      	ldr	r1, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80024fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002500:	688b      	ldr	r3, [r1, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x16>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002510:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <HAL_RCC_GetSysClockFreq+0x58>)
 8002514:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002516:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002518:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002520:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002528:	bf1a      	itte	ne
 800252a:	480a      	ldrne	r0, [pc, #40]	; (8002554 <HAL_RCC_GetSysClockFreq+0x58>)
 800252c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4808      	ldreq	r0, [pc, #32]	; (8002550 <HAL_RCC_GetSysClockFreq+0x54>)
 8002530:	fba1 0100 	umull	r0, r1, r1, r0
 8002534:	f7fe fa5a 	bl	80009ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_RCC_GetSysClockFreq+0x50>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002540:	3301      	adds	r3, #1
 8002542:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002544:	fbb0 f0f3 	udiv	r0, r0, r3
 8002548:	bd08      	pop	{r3, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	00f42400 	.word	0x00f42400
 8002554:	017d7840 	.word	0x017d7840

08002558 <HAL_RCC_ClockConfig>:
{
 8002558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800255e:	4604      	mov	r4, r0
 8002560:	b910      	cbnz	r0, 8002568 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4a46      	ldr	r2, [pc, #280]	; (8002684 <HAL_RCC_ClockConfig+0x12c>)
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	428b      	cmp	r3, r1
 8002572:	d328      	bcc.n	80025c6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	6821      	ldr	r1, [r4, #0]
 8002576:	078f      	lsls	r7, r1, #30
 8002578:	d430      	bmi.n	80025dc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	07c8      	lsls	r0, r1, #31
 800257c:	d443      	bmi.n	8002606 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257e:	4a41      	ldr	r2, [pc, #260]	; (8002684 <HAL_RCC_ClockConfig+0x12c>)
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	429d      	cmp	r5, r3
 8002588:	d367      	bcc.n	800265a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	0751      	lsls	r1, r2, #29
 800258e:	d470      	bmi.n	8002672 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	0713      	lsls	r3, r2, #28
 8002592:	d507      	bpl.n	80025a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002594:	4a3c      	ldr	r2, [pc, #240]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
 8002596:	6921      	ldr	r1, [r4, #16]
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800259e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a4:	f7ff ffaa 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_ClockConfig+0x134>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	40d8      	lsrs	r0, r3
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x138>)
 80025b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f002 fe6c 	bl	8005298 <HAL_InitTick>
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
 80025c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	f023 030f 	bic.w	r3, r3, #15
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d0:	6813      	ldr	r3, [r2, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4299      	cmp	r1, r3
 80025d8:	d1c3      	bne.n	8002562 <HAL_RCC_ClockConfig+0xa>
 80025da:	e7cb      	b.n	8002574 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	f011 0f04 	tst.w	r1, #4
 80025e0:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
 80025e2:	d003      	beq.n	80025ec <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80025ea:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	070e      	lsls	r6, r1, #28
 80025ee:	d503      	bpl.n	80025f8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80025f6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	68a0      	ldr	r0, [r4, #8]
 80025fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002600:	4302      	orrs	r2, r0
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e7b9      	b.n	800257a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	6861      	ldr	r1, [r4, #4]
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
 800260a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	d11c      	bne.n	800264a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002610:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	d0a5      	beq.n	8002562 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261c:	4e1a      	ldr	r6, [pc, #104]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	f022 0203 	bic.w	r2, r2, #3
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002626:	f7fe fb81 	bl	8000d2c <HAL_GetTick>
 800262a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	68b3      	ldr	r3, [r6, #8]
 800262e:	6862      	ldr	r2, [r4, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002638:	d0a1      	beq.n	800257e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe fb77 	bl	8000d2c <HAL_GetTick>
 800263e:	1bc0      	subs	r0, r0, r7
 8002640:	4540      	cmp	r0, r8
 8002642:	d9f3      	bls.n	800262c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002644:	2003      	movs	r0, #3
}
 8002646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	2902      	cmp	r1, #2
 800264c:	d102      	bne.n	8002654 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002652:	e7df      	b.n	8002614 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	f012 0f02 	tst.w	r2, #2
 8002658:	e7dc      	b.n	8002614 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	f023 030f 	bic.w	r3, r3, #15
 8002660:	432b      	orrs	r3, r5
 8002662:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	429d      	cmp	r5, r3
 800266c:	f47f af79 	bne.w	8002562 <HAL_RCC_ClockConfig+0xa>
 8002670:	e78b      	b.n	800258a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002672:	4905      	ldr	r1, [pc, #20]	; (8002688 <HAL_RCC_ClockConfig+0x130>)
 8002674:	68e0      	ldr	r0, [r4, #12]
 8002676:	688b      	ldr	r3, [r1, #8]
 8002678:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800267c:	4303      	orrs	r3, r0
 800267e:	608b      	str	r3, [r1, #8]
 8002680:	e786      	b.n	8002590 <HAL_RCC_ClockConfig+0x38>
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00
 8002688:	40023800 	.word	0x40023800
 800268c:	0800546e 	.word	0x0800546e
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002694:	4b01      	ldr	r3, [pc, #4]	; (800269c <HAL_RCC_GetHCLKFreq+0x8>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026ae:	6810      	ldr	r0, [r2, #0]
}
 80026b0:	40d8      	lsrs	r0, r3
 80026b2:	4770      	bx	lr
 80026b4:	40023800 	.word	0x40023800
 80026b8:	0800547e 	.word	0x0800547e
 80026bc:	20000004 	.word	0x20000004

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026ce:	6810      	ldr	r0, [r2, #0]
}
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	4770      	bx	lr
 80026d4:	40023800 	.word	0x40023800
 80026d8:	0800547e 	.word	0x0800547e
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026e0:	230f      	movs	r3, #15
 80026e2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_GetClockConfig+0x34>)
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80026f4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80026fc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002706:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetClockConfig+0x38>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	600b      	str	r3, [r1, #0]
 8002712:	4770      	bx	lr
 8002714:	40023800 	.word	0x40023800
 8002718:	40023c00 	.word	0x40023c00

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002720:	6802      	ldr	r2, [r0, #0]
{
 8002722:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002724:	f012 0601 	ands.w	r6, r2, #1
 8002728:	d00b      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800272a:	4bb8      	ldr	r3, [pc, #736]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002732:	6099      	str	r1, [r3, #8]
 8002734:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273a:	fab6 f686 	clz	r6, r6
 800273e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002740:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002742:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002746:	d012      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002748:	49b0      	ldr	r1, [pc, #704]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800274a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800274c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002750:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002754:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002758:	bf08      	it	eq
 800275a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002760:	bf16      	itet	ne
 8002762:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002766:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002768:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800276a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800276e:	02d1      	lsls	r1, r2, #11
 8002770:	d510      	bpl.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002772:	48a6      	ldr	r0, [pc, #664]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002774:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002776:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800277a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800277e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002782:	ea43 0301 	orr.w	r3, r3, r1
 8002786:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278a:	f000 8185 	beq.w	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800278e:	2900      	cmp	r1, #0
 8002790:	bf08      	it	eq
 8002792:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002794:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002798:	bf18      	it	ne
 800279a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800279c:	0692      	lsls	r2, r2, #26
 800279e:	d531      	bpl.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a2:	4f9b      	ldr	r7, [pc, #620]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe fab5 	bl	8000d2c <HAL_GetTick>
 80027c2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	f140 8168 	bpl.w	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027cc:	4f8f      	ldr	r7, [pc, #572]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80027d4:	f040 816d 	bne.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027da:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80027de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80027e2:	4a8a      	ldr	r2, [pc, #552]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e4:	f040 818b 	bne.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80027e8:	6891      	ldr	r1, [r2, #8]
 80027ea:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80027ee:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80027f2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80027f6:	4301      	orrs	r1, r0
 80027f8:	6091      	str	r1, [r2, #8]
 80027fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002800:	430b      	orrs	r3, r1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	06da      	lsls	r2, r3, #27
 8002808:	d50c      	bpl.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280a:	4a80      	ldr	r2, [pc, #512]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800280c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002810:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002814:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002818:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800281c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800281e:	4301      	orrs	r1, r0
 8002820:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002824:	045f      	lsls	r7, r3, #17
 8002826:	d508      	bpl.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002828:	4978      	ldr	r1, [pc, #480]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800282c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002830:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002834:	4302      	orrs	r2, r0
 8002836:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800283a:	0418      	lsls	r0, r3, #16
 800283c:	d508      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800283e:	4973      	ldr	r1, [pc, #460]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002840:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002842:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002846:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800284a:	4302      	orrs	r2, r0
 800284c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002850:	03d9      	lsls	r1, r3, #15
 8002852:	d508      	bpl.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002854:	496d      	ldr	r1, [pc, #436]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002856:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002858:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800285c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002860:	4302      	orrs	r2, r0
 8002862:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002866:	039a      	lsls	r2, r3, #14
 8002868:	d508      	bpl.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800286a:	4968      	ldr	r1, [pc, #416]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800286c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800286e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002872:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002876:	4302      	orrs	r2, r0
 8002878:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287c:	065f      	lsls	r7, r3, #25
 800287e:	d508      	bpl.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002880:	4962      	ldr	r1, [pc, #392]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002882:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002884:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002888:	f022 0203 	bic.w	r2, r2, #3
 800288c:	4302      	orrs	r2, r0
 800288e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002892:	0618      	lsls	r0, r3, #24
 8002894:	d508      	bpl.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002896:	495d      	ldr	r1, [pc, #372]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002898:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800289a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800289e:	f022 020c 	bic.w	r2, r2, #12
 80028a2:	4302      	orrs	r2, r0
 80028a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028a8:	05d9      	lsls	r1, r3, #23
 80028aa:	d508      	bpl.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ac:	4957      	ldr	r1, [pc, #348]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80028b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028b8:	4302      	orrs	r2, r0
 80028ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028be:	059a      	lsls	r2, r3, #22
 80028c0:	d508      	bpl.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c2:	4952      	ldr	r1, [pc, #328]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80028c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028ce:	4302      	orrs	r2, r0
 80028d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d4:	055f      	lsls	r7, r3, #21
 80028d6:	d508      	bpl.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d8:	494c      	ldr	r1, [pc, #304]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e4:	4302      	orrs	r2, r0
 80028e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ea:	0518      	lsls	r0, r3, #20
 80028ec:	d508      	bpl.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028ee:	4947      	ldr	r1, [pc, #284]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028fa:	4302      	orrs	r2, r0
 80028fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002900:	04d9      	lsls	r1, r3, #19
 8002902:	d508      	bpl.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002904:	4941      	ldr	r1, [pc, #260]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002906:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002908:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800290c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002910:	4302      	orrs	r2, r0
 8002912:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002916:	049a      	lsls	r2, r3, #18
 8002918:	d508      	bpl.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800291a:	493c      	ldr	r1, [pc, #240]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800291c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800291e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002922:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002926:	4302      	orrs	r2, r0
 8002928:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800292c:	025f      	lsls	r7, r3, #9
 800292e:	d508      	bpl.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002930:	4936      	ldr	r1, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002932:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002934:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002938:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800293c:	4302      	orrs	r2, r0
 800293e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002942:	0298      	lsls	r0, r3, #10
 8002944:	d50c      	bpl.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002946:	4831      	ldr	r0, [pc, #196]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002948:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800294a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800294e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002952:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002956:	bf08      	it	eq
 8002958:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800295a:	430a      	orrs	r2, r1
 800295c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002960:	f013 0f08 	tst.w	r3, #8
 8002964:	bf18      	it	ne
 8002966:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002968:	0359      	lsls	r1, r3, #13
 800296a:	d508      	bpl.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296c:	4927      	ldr	r1, [pc, #156]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800296e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002970:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002978:	4302      	orrs	r2, r0
 800297a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	d509      	bpl.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002984:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002988:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800298c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002990:	4302      	orrs	r2, r0
 8002992:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002996:	2e01      	cmp	r6, #1
 8002998:	f000 80b5 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800299c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a0:	f000 80b1 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029a4:	2d01      	cmp	r5, #1
 80029a6:	d175      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029a8:	4d18      	ldr	r5, [pc, #96]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe f9bb 	bl	8000d2c <HAL_GetTick>
 80029b6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	009f      	lsls	r7, r3, #2
 80029bc:	f100 8127 	bmi.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	030e      	lsls	r6, r1, #12
 80029c4:	d501      	bpl.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80029c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c8:	b11b      	cbz	r3, 80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80029ca:	02cd      	lsls	r5, r1, #11
 80029cc:	d522      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d0:	bb03      	cbnz	r3, 8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029d8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80029e4:	4303      	orrs	r3, r0
 80029e6:	6960      	ldr	r0, [r4, #20]
 80029e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80029ec:	69a0      	ldr	r0, [r4, #24]
 80029ee:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80029f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80029fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029fc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a00:	3801      	subs	r0, #1
 8002a02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a0a:	e003      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a14:	0288      	lsls	r0, r1, #10
 8002a16:	d515      	bpl.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002a18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a20:	4a82      	ldr	r2, [pc, #520]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a26:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a2a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a2e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a32:	4303      	orrs	r3, r0
 8002a34:	6960      	ldr	r0, [r4, #20]
 8002a36:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a3a:	6a20      	ldr	r0, [r4, #32]
 8002a3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a44:	070a      	lsls	r2, r1, #28
 8002a46:	d519      	bpl.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a48:	4978      	ldr	r1, [pc, #480]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a52:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	6962      	ldr	r2, [r4, #20]
 8002a5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a62:	69e2      	ldr	r2, [r4, #28]
 8002a64:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a6c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002a70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a7c:	4c6b      	ldr	r4, [pc, #428]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a86:	f7fe f951 	bl	8000d2c <HAL_GetTick>
 8002a8a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f140 80c4 	bpl.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8002a98:	2601      	movs	r6, #1
 8002a9a:	e67b      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe f946 	bl	8000d2c <HAL_GetTick>
 8002aa0:	eba0 0008 	sub.w	r0, r0, r8
 8002aa4:	2864      	cmp	r0, #100	; 0x64
 8002aa6:	f67f ae8d 	bls.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
}
 8002aac:	b003      	add	sp, #12
 8002aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ab4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f43f ae8d 	beq.w	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002aca:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002acc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ace:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ad2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad8:	07d8      	lsls	r0, r3, #31
 8002ada:	f57f ae7d 	bpl.w	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002ade:	f7fe f925 	bl	8000d2c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002ae6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aea:	0799      	lsls	r1, r3, #30
 8002aec:	f53f ae74 	bmi.w	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe f91c 	bl	8000d2c <HAL_GetTick>
 8002af4:	eba0 0008 	sub.w	r0, r0, r8
 8002af8:	4548      	cmp	r0, r9
 8002afa:	d9f5      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002afc:	e7d5      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afe:	6891      	ldr	r1, [r2, #8]
 8002b00:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002b04:	e678      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002b06:	4e49      	ldr	r6, [pc, #292]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b0e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b10:	f7fe f90c 	bl	8000d2c <HAL_GetTick>
 8002b14:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b16:	6833      	ldr	r3, [r6, #0]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	d472      	bmi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	07d7      	lsls	r7, r2, #31
 8002b20:	d512      	bpl.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b24:	b983      	cbnz	r3, 8002b48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b26:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b2a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b32:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b36:	430b      	orrs	r3, r1
 8002b38:	6861      	ldr	r1, [r4, #4]
 8002b3a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b3e:	68a1      	ldr	r1, [r4, #8]
 8002b40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b44:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b48:	0316      	lsls	r6, r2, #12
 8002b4a:	d503      	bpl.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b52:	d005      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002b54:	02d0      	lsls	r0, r2, #11
 8002b56:	d51e      	bpl.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5e:	d11a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b60:	4932      	ldr	r1, [pc, #200]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b62:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b66:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b6e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002b72:	4303      	orrs	r3, r0
 8002b74:	6860      	ldr	r0, [r4, #4]
 8002b76:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b7a:	68e0      	ldr	r0, [r4, #12]
 8002b7c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b84:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8a:	f020 001f 	bic.w	r0, r0, #31
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4303      	orrs	r3, r0
 8002b92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b96:	01d1      	lsls	r1, r2, #7
 8002b98:	d511      	bpl.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b9a:	4924      	ldr	r1, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b9c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ba4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002ba8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bac:	4303      	orrs	r3, r0
 8002bae:	6860      	ldr	r0, [r4, #4]
 8002bb0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bb4:	6920      	ldr	r0, [r4, #16]
 8002bb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bbe:	0192      	lsls	r2, r2, #6
 8002bc0:	d50d      	bpl.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc2:	6923      	ldr	r3, [r4, #16]
 8002bc4:	6862      	ldr	r2, [r4, #4]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bcc:	68e2      	ldr	r2, [r4, #12]
 8002bce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bd2:	68a2      	ldr	r2, [r4, #8]
 8002bd4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002bda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002bde:	4e13      	ldr	r6, [pc, #76]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002be8:	f7fe f8a0 	bl	8000d2c <HAL_GetTick>
 8002bec:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bee:	6833      	ldr	r3, [r6, #0]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	f53f aed7 	bmi.w	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bf6:	f7fe f899 	bl	8000d2c <HAL_GetTick>
 8002bfa:	1bc0      	subs	r0, r0, r7
 8002bfc:	2864      	cmp	r0, #100	; 0x64
 8002bfe:	d9f6      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c00:	e753      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c02:	f7fe f893 	bl	8000d2c <HAL_GetTick>
 8002c06:	1bc0      	subs	r0, r0, r7
 8002c08:	2864      	cmp	r0, #100	; 0x64
 8002c0a:	d984      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002c0c:	e74d      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c0e:	f7fe f88d 	bl	8000d2c <HAL_GetTick>
 8002c12:	1b80      	subs	r0, r0, r6
 8002c14:	2864      	cmp	r0, #100	; 0x64
 8002c16:	f67f aecf 	bls.w	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002c1a:	e746      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c1c:	f7fe f886 	bl	8000d2c <HAL_GetTick>
 8002c20:	1b40      	subs	r0, r0, r5
 8002c22:	2864      	cmp	r0, #100	; 0x64
 8002c24:	f67f af32 	bls.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002c28:	e73f      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c30:	6802      	ldr	r2, [r0, #0]
{
 8002c32:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c34:	68d3      	ldr	r3, [r2, #12]
{
 8002c36:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c3c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe f875 	bl	8000d2c <HAL_GetTick>
 8002c42:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	d501      	bpl.n	8002c50 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c50:	f7fe f86c 	bl	8000d2c <HAL_GetTick>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c5a:	d9f3      	bls.n	8002c44 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002c5c:	2003      	movs	r0, #3
}
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}

08002c60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c62:	6803      	ldr	r3, [r0, #0]
{
 8002c64:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	0652      	lsls	r2, r2, #25
 8002c6a:	d501      	bpl.n	8002c70 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295
 8002c74:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002c76:	f7fe f859 	bl	8000d2c <HAL_GetTick>
 8002c7a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	065b      	lsls	r3, r3, #25
 8002c82:	d4f3      	bmi.n	8002c6c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c84:	f7fe f852 	bl	8000d2c <HAL_GetTick>
 8002c88:	1b40      	subs	r0, r0, r5
 8002c8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c8e:	d9f5      	bls.n	8002c7c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002c90:	2003      	movs	r0, #3
}
 8002c92:	bd38      	pop	{r3, r4, r5, pc}

08002c94 <HAL_RTC_Init>:
{
 8002c94:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002c96:	4604      	mov	r4, r0
 8002c98:	b1b0      	cbz	r0, 8002cc8 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c9a:	7f43      	ldrb	r3, [r0, #29]
 8002c9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ca0:	b913      	cbnz	r3, 8002ca8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002ca2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002ca4:	f002 f972 	bl	8004f8c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002ca8:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002caa:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cac:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002cae:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb4:	2253      	movs	r2, #83	; 0x53
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cb8:	f7ff ffd2 	bl	8002c60 <RTC_EnterInitMode>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	b128      	cbz	r0, 8002ccc <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002cc8:	2001      	movs	r0, #1
}
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ccc:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cce:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cd0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cda:	6862      	ldr	r2, [r4, #4]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	432a      	orrs	r2, r5
 8002ce0:	6965      	ldr	r5, [r4, #20]
 8002ce2:	432a      	orrs	r2, r5
 8002ce4:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002ce6:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ce8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cea:	68e2      	ldr	r2, [r4, #12]
 8002cec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002cf4:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002cf6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfe:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d0e:	22ff      	movs	r2, #255	; 0xff
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	2301      	movs	r3, #1
 8002d14:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002d16:	bd38      	pop	{r3, r4, r5, pc}

08002d18 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002d18:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8002d1a:	2809      	cmp	r0, #9
 8002d1c:	d803      	bhi.n	8002d26 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002d1e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002d22:	b2c0      	uxtb	r0, r0
 8002d24:	4770      	bx	lr
    Value -= 10;
 8002d26:	380a      	subs	r0, #10
    bcdhigh++;
 8002d28:	3301      	adds	r3, #1
    Value -= 10;
 8002d2a:	b2c0      	uxtb	r0, r0
 8002d2c:	e7f5      	b.n	8002d1a <RTC_ByteToBcd2+0x2>

08002d2e <HAL_RTC_SetDate>:
{
 8002d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002d30:	7f03      	ldrb	r3, [r0, #28]
{
 8002d32:	4605      	mov	r5, r0
 8002d34:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d030      	beq.n	8002d9c <HAL_RTC_SetDate+0x6e>
 8002d3a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002d3c:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8002d3e:	7703      	strb	r3, [r0, #28]
 8002d40:	784b      	ldrb	r3, [r1, #1]
 8002d42:	78c8      	ldrb	r0, [r1, #3]
 8002d44:	788e      	ldrb	r6, [r1, #2]
 8002d46:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	d148      	bne.n	8002dde <HAL_RTC_SetDate+0xb0>
 8002d4c:	06da      	lsls	r2, r3, #27
 8002d4e:	d503      	bpl.n	8002d58 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	330a      	adds	r3, #10
 8002d56:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002d58:	f7ff ffde 	bl	8002d18 <RTC_ByteToBcd2>
 8002d5c:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002d5e:	7848      	ldrb	r0, [r1, #1]
 8002d60:	f7ff ffda 	bl	8002d18 <RTC_ByteToBcd2>
 8002d64:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff ffd6 	bl	8002d18 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002d6c:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002d70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002d74:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d7c:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d80:	2253      	movs	r2, #83	; 0x53
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d84:	f7ff ff6c 	bl	8002c60 <RTC_EnterInitMode>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	b140      	cbz	r0, 8002da0 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d8e:	22ff      	movs	r2, #255	; 0xff
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d92:	2304      	movs	r3, #4
 8002d94:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002d96:	2300      	movs	r3, #0
 8002d98:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8002d9a:	2601      	movs	r6, #1
}
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002da0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002da4:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002da8:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	069b      	lsls	r3, r3, #26
 8002db6:	d40a      	bmi.n	8002dce <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002db8:	4628      	mov	r0, r5
 8002dba:	f7ff ff39 	bl	8002c30 <HAL_RTC_WaitForSynchro>
 8002dbe:	b130      	cbz	r0, 8002dce <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	22ff      	movs	r2, #255	; 0xff
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc6:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8002dc8:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dca:	776b      	strb	r3, [r5, #29]
 8002dcc:	e7e5      	b.n	8002d9a <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	22ff      	movs	r2, #255	; 0xff
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8002ddc:	e7de      	b.n	8002d9c <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 8002dde:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002de0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002de4:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002de6:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002dea:	e7c5      	b.n	8002d78 <HAL_RTC_SetDate+0x4a>

08002dec <HAL_RTC_SetTime>:
{
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002dee:	7f03      	ldrb	r3, [r0, #28]
{
 8002df0:	4606      	mov	r6, r0
 8002df2:	460f      	mov	r7, r1
 8002df4:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d02f      	beq.n	8002e5a <HAL_RTC_SetTime+0x6e>
 8002dfa:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dfc:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 8002dfe:	7703      	strb	r3, [r0, #28]
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	784d      	ldrb	r5, [r1, #1]
 8002e04:	7808      	ldrb	r0, [r1, #0]
 8002e06:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e08:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002e0a:	bb42      	cbnz	r2, 8002e5e <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e0c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8002e10:	bf08      	it	eq
 8002e12:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002e14:	f7ff ff80 	bl	8002d18 <RTC_ByteToBcd2>
 8002e18:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f7ff ff7c 	bl	8002d18 <RTC_ByteToBcd2>
 8002e20:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff78 	bl	8002d18 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8002e28:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002e2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e2e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002e32:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e36:	6833      	ldr	r3, [r6, #0]
 8002e38:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e3a:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3e:	2253      	movs	r2, #83	; 0x53
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e42:	f7ff ff0d 	bl	8002c60 <RTC_EnterInitMode>
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	4605      	mov	r5, r0
 8002e4a:	b1a0      	cbz	r0, 8002e76 <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e50:	2304      	movs	r3, #4
 8002e52:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002e54:	2300      	movs	r3, #0
 8002e56:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8002e58:	2501      	movs	r5, #1
}
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e5e:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e64:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 8002e68:	bf08      	it	eq
 8002e6a:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e6c:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8002e6e:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e70:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002e74:	e7df      	b.n	8002e36 <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e76:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e7a:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e7c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002e80:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e88:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	4302      	orrs	r2, r0
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	d40a      	bmi.n	8002eb8 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f7ff fec4 	bl	8002c30 <HAL_RTC_WaitForSynchro>
 8002ea8:	b130      	cbz	r0, 8002eb8 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002eaa:	6833      	ldr	r3, [r6, #0]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eb0:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8002eb2:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eb4:	7773      	strb	r3, [r6, #29]
 8002eb6:	e7cf      	b.n	8002e58 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb8:	6833      	ldr	r3, [r6, #0]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8002ec6:	e7c8      	b.n	8002e5a <HAL_RTC_SetTime+0x6e>

08002ec8 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8002ec8:	7f03      	ldrb	r3, [r0, #28]
 8002eca:	2b01      	cmp	r3, #1
{
 8002ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002ed6:	d056      	beq.n	8002f86 <HAL_RTC_SetAlarm+0xbe>
 8002ed8:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eda:	7760      	strb	r0, [r4, #29]
 8002edc:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 8002ede:	7723      	strb	r3, [r4, #28]
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	7808      	ldrb	r0, [r1, #0]
 8002ee4:	f891 9001 	ldrb.w	r9, [r1, #1]
 8002ee8:	788d      	ldrb	r5, [r1, #2]
 8002eea:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 8002eee:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ef0:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d149      	bne.n	8002f8a <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ef6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002efa:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002efe:	bf08      	it	eq
 8002f00:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002f02:	f7ff ff09 	bl	8002d18 <RTC_ByteToBcd2>
 8002f06:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8002f08:	4648      	mov	r0, r9
 8002f0a:	f7ff ff05 	bl	8002d18 <RTC_ByteToBcd2>
 8002f0e:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002f10:	4628      	mov	r0, r5
 8002f12:	f7ff ff01 	bl	8002d18 <RTC_ByteToBcd2>
 8002f16:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8002f18:	4640      	mov	r0, r8
 8002f1a:	f7ff fefd 	bl	8002d18 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002f1e:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002f20:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8002f24:	ea45 0509 	orr.w	r5, r5, r9
 8002f28:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8002f2c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8002f30:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002f34:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f36:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002f38:	684e      	ldr	r6, [r1, #4]
 8002f3a:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f40:	2253      	movs	r2, #83	; 0x53
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002f44:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002f46:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002f4a:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002f4c:	d13d      	bne.n	8002fca <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f52:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f5a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002f5c:	f7fd fee6 	bl	8000d2c <HAL_GetTick>
 8002f60:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	68df      	ldr	r7, [r3, #12]
 8002f66:	f017 0701 	ands.w	r7, r7, #1
 8002f6a:	d01f      	beq.n	8002fac <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f6c:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f6e:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8002f76:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 8002f7c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8002f80:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002f82:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY; 
 8002f84:	7763      	strb	r3, [r4, #29]
}
 8002f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f8a:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f8c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f90:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002f94:	bf08      	it	eq
 8002f96:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f98:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002f9c:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f9e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8002fa2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002fa6:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 8002faa:	e7c3      	b.n	8002f34 <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fac:	f7fd febe 	bl	8000d2c <HAL_GetTick>
 8002fb0:	eba0 0008 	sub.w	r0, r0, r8
 8002fb4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fb8:	d9d3      	bls.n	8002f62 <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002fbe:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002fc2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002fc4:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 8002fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002fca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fce:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002fd8:	f7fd fea8 	bl	8000d2c <HAL_GetTick>
 8002fdc:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	68df      	ldr	r7, [r3, #12]
 8002fe2:	f017 0702 	ands.w	r7, r7, #2
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002fe8:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002fea:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	e7c0      	b.n	8002f76 <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ff4:	f7fd fe9a 	bl	8000d2c <HAL_GetTick>
 8002ff8:	eba0 0008 	sub.w	r0, r0, r8
 8002ffc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003000:	d9ed      	bls.n	8002fde <HAL_RTC_SetAlarm+0x116>
 8003002:	e7da      	b.n	8002fba <HAL_RTC_SetAlarm+0xf2>

08003004 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003004:	7f03      	ldrb	r3, [r0, #28]
 8003006:	2b01      	cmp	r3, #1
 8003008:	f04f 0302 	mov.w	r3, #2
{
 800300c:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 800300e:	d01d      	beq.n	800304c <HAL_RTCEx_SetTimeStamp+0x48>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003010:	7743      	strb	r3, [r0, #29]
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	689c      	ldr	r4, [r3, #8]
 8003016:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800301a:	f024 0408 	bic.w	r4, r4, #8
    
  tmpreg|= TimeStampEdge;
 800301e:	430c      	orrs	r4, r1
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003020:	21ca      	movs	r1, #202	; 0xca
 8003022:	6259      	str	r1, [r3, #36]	; 0x24
 8003024:	2153      	movs	r1, #83	; 0x53
 8003026:	6259      	str	r1, [r3, #36]	; 0x24
  
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8003028:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800302a:	f021 0106 	bic.w	r1, r1, #6
 800302e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8003030:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003032:	430a      	orrs	r2, r1
 8003034:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003036:	609c      	str	r4, [r3, #8]
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8003044:	2301      	movs	r3, #1
 8003046:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8003048:	2300      	movs	r3, #0
 800304a:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 800304c:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 800304e:	bd10      	pop	{r4, pc}

08003050 <HAL_RTCEx_SetWakeUpTimer>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003050:	7f03      	ldrb	r3, [r0, #28]
 8003052:	2b01      	cmp	r3, #1
{
 8003054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003058:	4604      	mov	r4, r0
 800305a:	460e      	mov	r6, r1
 800305c:	4617      	mov	r7, r2
 800305e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003062:	d03b      	beq.n	80030dc <HAL_RTCEx_SetWakeUpTimer+0x8c>
 8003064:	2301      	movs	r3, #1
    
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003066:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003068:	7760      	strb	r0, [r4, #29]
  __HAL_LOCK(hrtc);
 800306a:	7723      	strb	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
 8003070:	2253      	movs	r2, #83	; 0x53
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
  
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800307c:	f7fd fe56 	bl	8000d2c <HAL_GetTick>

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003080:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003082:	4680      	mov	r8, r0
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	055b      	lsls	r3, r3, #21
 8003088:	d414      	bmi.n	80030b4 <HAL_RTCEx_SetWakeUpTimer+0x64>
      }  
    }
  }
  
  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800308a:	6823      	ldr	r3, [r4, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  
  hrtc->State = HAL_RTC_STATE_READY;   
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 800308c:	2000      	movs	r0, #0
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	f022 0207 	bic.w	r2, r2, #7
 8003094:	609a      	str	r2, [r3, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	433a      	orrs	r2, r7
 800309a:	609a      	str	r2, [r3, #8]
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800309c:	615e      	str	r6, [r3, #20]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);   
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;   
 80030aa:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80030ac:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;   
 80030ae:	7763      	strb	r3, [r4, #29]
  
  return HAL_OK;
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	68dd      	ldr	r5, [r3, #12]
 80030b8:	f015 0504 	ands.w	r5, r5, #4
 80030bc:	d1e5      	bne.n	800308a <HAL_RTCEx_SetWakeUpTimer+0x3a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030be:	f7fd fe35 	bl	8000d2c <HAL_GetTick>
 80030c2:	eba0 0008 	sub.w	r0, r0, r8
 80030c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030ca:	d9f3      	bls.n	80030b4 <HAL_RTCEx_SetWakeUpTimer+0x64>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80030d0:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80030d4:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80030d6:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 80030d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
 80030dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80030e4:	4604      	mov	r4, r0
 80030e6:	b1c8      	cbz	r0, 800311c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80030e8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80030ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030f0:	b91b      	cbnz	r3, 80030fa <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80030f2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80030f6:	f002 f867 	bl	80051c8 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80030fa:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80030fc:	1d21      	adds	r1, r4, #4
 80030fe:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003100:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003104:	f000 fe41 	bl	8003d8a <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	4629      	mov	r1, r5
 800310c:	6820      	ldr	r0, [r4, #0]
 800310e:	f000 fe7b 	bl	8003e08 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003112:	2301      	movs	r3, #1
  
  return HAL_OK;
 8003114:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003116:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800311a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
}
 800311e:	bd38      	pop	{r3, r4, r5, pc}

08003120 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003120:	6a03      	ldr	r3, [r0, #32]
{
 8003122:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003124:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003126:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800312e:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003130:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003132:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003138:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800313e:	6203      	str	r3, [r0, #32]
 8003140:	bd10      	pop	{r4, pc}

08003142 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	6a03      	ldr	r3, [r0, #32]
 8003144:	f023 0310 	bic.w	r3, r3, #16
{
 8003148:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800314e:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003150:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003158:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 800315c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003160:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003162:	6203      	str	r3, [r0, #32]
 8003164:	bd10      	pop	{r4, pc}

08003166 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003166:	6803      	ldr	r3, [r0, #0]
}
 8003168:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_OC_DelayElapsedCallback>:
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_IC_CaptureCallback>:
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_TriggerCallback>:
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003184:	6803      	ldr	r3, [r0, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	0791      	lsls	r1, r2, #30
{
 800318a:	b510      	push	{r4, lr}
 800318c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800318e:	d50f      	bpl.n	80031b0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	0792      	lsls	r2, r2, #30
 8003194:	d50c      	bpl.n	80031b0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003196:	f06f 0202 	mvn.w	r2, #2
 800319a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800319e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80031a2:	0799      	lsls	r1, r3, #30
 80031a4:	f000 8085 	beq.w	80032b2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80031a8:	f7ff ffe9 	bl	800317e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	2300      	movs	r3, #0
 80031ae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	0752      	lsls	r2, r2, #29
 80031b6:	d510      	bpl.n	80031da <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	0750      	lsls	r0, r2, #29
 80031bc:	d50d      	bpl.n	80031da <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031be:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031c6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80031c8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ca:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80031cc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031d0:	d075      	beq.n	80032be <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	f7ff ffd4 	bl	800317e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	2300      	movs	r3, #0
 80031d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	0711      	lsls	r1, r2, #28
 80031e0:	d50f      	bpl.n	8003202 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	0712      	lsls	r2, r2, #28
 80031e6:	d50c      	bpl.n	8003202 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e8:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80031ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80031f2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80031f6:	079b      	lsls	r3, r3, #30
 80031f8:	d067      	beq.n	80032ca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	f7ff ffc0 	bl	800317e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	2300      	movs	r3, #0
 8003200:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	06d0      	lsls	r0, r2, #27
 8003208:	d510      	bpl.n	800322c <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	06d1      	lsls	r1, r2, #27
 800320e:	d50d      	bpl.n	800322c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003210:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8003214:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003218:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800321a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800321e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003222:	d058      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003224:	f7ff ffab 	bl	800317e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003228:	2300      	movs	r3, #0
 800322a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	07d2      	lsls	r2, r2, #31
 8003232:	d508      	bpl.n	8003246 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	07d0      	lsls	r0, r2, #31
 8003238:	d505      	bpl.n	8003246 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800323a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003240:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003242:	f001 fc53 	bl	8004aec <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	0611      	lsls	r1, r2, #24
 800324c:	d508      	bpl.n	8003260 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	0612      	lsls	r2, r2, #24
 8003252:	d505      	bpl.n	8003260 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003254:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003258:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800325c:	f000 faeb 	bl	8003836 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	05d0      	lsls	r0, r2, #23
 8003266:	d508      	bpl.n	800327a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	0611      	lsls	r1, r2, #24
 800326c:	d505      	bpl.n	800327a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800326e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003272:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003274:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003276:	f000 fade 	bl	8003836 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	0652      	lsls	r2, r2, #25
 8003280:	d508      	bpl.n	8003294 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	0650      	lsls	r0, r2, #25
 8003286:	d505      	bpl.n	8003294 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003288:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800328c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800328e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003290:	f7ff ff77 	bl	8003182 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	0691      	lsls	r1, r2, #26
 800329a:	d522      	bpl.n	80032e2 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	0692      	lsls	r2, r2, #26
 80032a0:	d51f      	bpl.n	80032e2 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80032a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80032ae:	f000 bac1 	b.w	8003834 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	f7ff ff63 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff62 	bl	8003180 <HAL_TIM_PWM_PulseFinishedCallback>
 80032bc:	e776      	b.n	80031ac <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	f7ff ff5d 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff ff5c 	bl	8003180 <HAL_TIM_PWM_PulseFinishedCallback>
 80032c8:	e785      	b.n	80031d6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	f7ff ff57 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff ff56 	bl	8003180 <HAL_TIM_PWM_PulseFinishedCallback>
 80032d4:	e793      	b.n	80031fe <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	f7ff ff51 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff ff50 	bl	8003180 <HAL_TIM_PWM_PulseFinishedCallback>
 80032e0:	e7a2      	b.n	8003228 <HAL_TIM_IRQHandler+0xa4>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80032e6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032e8:	4290      	cmp	r0, r2
 80032ea:	d012      	beq.n	8003312 <TIM_Base_SetConfig+0x2e>
 80032ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0x2e>
 80032f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80032f6:	4290      	cmp	r0, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0x2e>
 80032fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fe:	4290      	cmp	r0, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x2e>
 8003302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003306:	4290      	cmp	r0, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x2e>
 800330a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800330e:	4290      	cmp	r0, r2
 8003310:	d11d      	bne.n	800334e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003312:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003318:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800331a:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <TIM_Base_SetConfig+0xc4>)
 800331c:	4290      	cmp	r0, r2
 800331e:	d104      	bne.n	800332a <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003324:	68ca      	ldr	r2, [r1, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	e028      	b.n	800337c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800332a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800332e:	d0f7      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <TIM_Base_SetConfig+0xc8>)
 8003332:	4290      	cmp	r0, r2
 8003334:	d0f4      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800333a:	4290      	cmp	r0, r2
 800333c:	d0f0      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 800333e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003342:	4290      	cmp	r0, r2
 8003344:	d0ec      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003346:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800334a:	4290      	cmp	r0, r2
 800334c:	d0e8      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <TIM_Base_SetConfig+0xcc>)
 8003350:	4290      	cmp	r0, r2
 8003352:	d0e5      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003358:	4290      	cmp	r0, r2
 800335a:	d0e1      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 800335c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003360:	4290      	cmp	r0, r2
 8003362:	d0dd      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003364:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003368:	4290      	cmp	r0, r2
 800336a:	d0d9      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 800336c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003370:	4290      	cmp	r0, r2
 8003372:	d0d5      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
 8003374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003378:	4290      	cmp	r0, r2
 800337a:	d0d1      	beq.n	8003320 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	694a      	ldr	r2, [r1, #20]
 800337e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003382:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003384:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003386:	688b      	ldr	r3, [r1, #8]
 8003388:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800338a:	680b      	ldr	r3, [r1, #0]
 800338c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <TIM_Base_SetConfig+0xc4>)
 8003390:	4298      	cmp	r0, r3
 8003392:	d006      	beq.n	80033a2 <TIM_Base_SetConfig+0xbe>
 8003394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003398:	4298      	cmp	r0, r3
 800339a:	d002      	beq.n	80033a2 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 800339c:	2301      	movs	r3, #1
 800339e:	6143      	str	r3, [r0, #20]
}
 80033a0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80033a2:	690b      	ldr	r3, [r1, #16]
 80033a4:	6303      	str	r3, [r0, #48]	; 0x30
 80033a6:	e7f9      	b.n	800339c <TIM_Base_SetConfig+0xb8>
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40014000 	.word	0x40014000

080033b4 <HAL_TIM_Base_Init>:
{ 
 80033b4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033b6:	4604      	mov	r4, r0
 80033b8:	b1a0      	cbz	r0, 80033e4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033c2:	b91b      	cbnz	r3, 80033cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033c8:	f001 fdee 	bl	8004fa8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80033d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033d6:	f7ff ff85 	bl	80032e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033da:	2301      	movs	r3, #1
  return HAL_OK;
 80033dc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80033de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033e4:	2001      	movs	r0, #1
}
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <HAL_TIM_PWM_Init>:
{
 80033e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033ea:	4604      	mov	r4, r0
 80033ec:	b1a0      	cbz	r0, 8003418 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f6:	b91b      	cbnz	r3, 8003400 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80033fc:	f001 fe28 	bl	8005050 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003400:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8003406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800340a:	f7ff ff6b 	bl	80032e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800340e:	2301      	movs	r3, #1
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003416:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}  
 800341a:	bd10      	pop	{r4, pc}

0800341c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341c:	6a03      	ldr	r3, [r0, #32]
 800341e:	f023 0301 	bic.w	r3, r3, #1
{
 8003422:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003424:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003426:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003428:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800342a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800342c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003430:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003432:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003436:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800343a:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 800343c:	688d      	ldr	r5, [r1, #8]
 800343e:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003440:	4d0c      	ldr	r5, [pc, #48]	; (8003474 <TIM_OC1_SetConfig+0x58>)
 8003442:	42a8      	cmp	r0, r5
 8003444:	d009      	beq.n	800345a <TIM_OC1_SetConfig+0x3e>
 8003446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800344a:	42a8      	cmp	r0, r5
 800344c:	d005      	beq.n	800345a <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800344e:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003450:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003452:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003454:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8003456:	6203      	str	r3, [r0, #32]
} 
 8003458:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800345a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800345c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003460:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003462:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003466:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003468:	694d      	ldr	r5, [r1, #20]
 800346a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800346c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003470:	432a      	orrs	r2, r5
 8003472:	e7ec      	b.n	800344e <TIM_OC1_SetConfig+0x32>
 8003474:	40010000 	.word	0x40010000

08003478 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003478:	6a03      	ldr	r3, [r0, #32]
 800347a:	f023 0310 	bic.w	r3, r3, #16
{
 800347e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003480:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003482:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003484:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003486:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003488:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 800348c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800348e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003492:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003496:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800349a:	688d      	ldr	r5, [r1, #8]
 800349c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80034a0:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <TIM_OC2_SetConfig+0x60>)
 80034a2:	42a8      	cmp	r0, r5
 80034a4:	d009      	beq.n	80034ba <TIM_OC2_SetConfig+0x42>
 80034a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034aa:	42a8      	cmp	r0, r5
 80034ac:	d005      	beq.n	80034ba <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80034ae:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034b2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034b6:	6203      	str	r3, [r0, #32]
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80034ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80034bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80034c0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80034c6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80034ca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80034cc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80034d2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80034d6:	e7ea      	b.n	80034ae <TIM_OC2_SetConfig+0x36>
 80034d8:	40010000 	.word	0x40010000

080034dc <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034dc:	6a03      	ldr	r3, [r0, #32]
 80034de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80034e2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80034e6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80034e8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80034ea:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80034ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80034f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80034f2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80034f6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80034fa:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 80034fc:	688d      	ldr	r5, [r1, #8]
 80034fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003502:	4d0e      	ldr	r5, [pc, #56]	; (800353c <TIM_OC3_SetConfig+0x60>)
 8003504:	42a8      	cmp	r0, r5
 8003506:	d009      	beq.n	800351c <TIM_OC3_SetConfig+0x40>
 8003508:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800350c:	42a8      	cmp	r0, r5
 800350e:	d005      	beq.n	800351c <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003510:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003512:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003514:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003516:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003518:	6203      	str	r3, [r0, #32]
}
 800351a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800351c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800351e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003522:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003524:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003528:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800352c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800352e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003534:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003538:	e7ea      	b.n	8003510 <TIM_OC3_SetConfig+0x34>
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000

08003540 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003540:	6a03      	ldr	r3, [r0, #32]
 8003542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8003546:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003548:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800354a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800354c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800354e:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003550:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003554:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800355e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003562:	688d      	ldr	r5, [r1, #8]
 8003564:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003568:	4d09      	ldr	r5, [pc, #36]	; (8003590 <TIM_OC4_SetConfig+0x50>)
 800356a:	42a8      	cmp	r0, r5
 800356c:	d009      	beq.n	8003582 <TIM_OC4_SetConfig+0x42>
 800356e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003572:	42a8      	cmp	r0, r5
 8003574:	d005      	beq.n	8003582 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003576:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003578:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800357a:	684b      	ldr	r3, [r1, #4]
 800357c:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800357e:	6204      	str	r4, [r0, #32]
}
 8003580:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003586:	694d      	ldr	r5, [r1, #20]
 8003588:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800358c:	e7f3      	b.n	8003576 <TIM_OC4_SetConfig+0x36>
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000

08003594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003594:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003596:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003598:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800359a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80035a2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a4:	6083      	str	r3, [r0, #8]
 80035a6:	bd10      	pop	{r4, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80035a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
{
 80035ae:	b510      	push	{r4, lr}
 80035b0:	4604      	mov	r4, r0
 80035b2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80035b6:	d018      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80035bc:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80035be:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80035c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_TIM_ConfigClockSource+0x118>)
 80035c8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80035ca:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80035cc:	680b      	ldr	r3, [r1, #0]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d059      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xde>
 80035d2:	d815      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x58>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d067      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x100>
 80035d8:	d808      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x44>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d05e      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 80035de:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80035e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80035e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80035ea:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d061      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0x10c>
 80035f0:	2b30      	cmp	r3, #48	; 0x30
 80035f2:	d1f4      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 80035f4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80035fa:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80035fe:	e026      	b.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d026      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0xaa>
 8003604:	d80e      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x7c>
 8003606:	2b50      	cmp	r3, #80	; 0x50
 8003608:	d032      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xc8>
 800360a:	2b60      	cmp	r3, #96	; 0x60
 800360c:	d1e7      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800360e:	68ca      	ldr	r2, [r1, #12]
 8003610:	6849      	ldr	r1, [r1, #4]
 8003612:	f7ff fd96 	bl	8003142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003616:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003618:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800361e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003622:	e023      	b.n	800366c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003628:	d00c      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0x9c>
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	d1d6      	bne.n	80035de <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003630:	68cb      	ldr	r3, [r1, #12]
 8003632:	684a      	ldr	r2, [r1, #4]
 8003634:	6889      	ldr	r1, [r1, #8]
 8003636:	f7ff ffad 	bl	8003594 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	6893      	ldr	r3, [r2, #8]
 800363e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003642:	e013      	b.n	800366c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003644:	6883      	ldr	r3, [r0, #8]
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800364e:	6083      	str	r3, [r0, #8]
 8003650:	e7c5      	b.n	80035de <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003652:	68cb      	ldr	r3, [r1, #12]
 8003654:	684a      	ldr	r2, [r1, #4]
 8003656:	6889      	ldr	r1, [r1, #8]
 8003658:	f7ff ff9c 	bl	8003594 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003664:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800366c:	6093      	str	r3, [r2, #8]
    break;
 800366e:	e7b6      	b.n	80035de <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003670:	68ca      	ldr	r2, [r1, #12]
 8003672:	6849      	ldr	r1, [r1, #4]
 8003674:	f7ff fd54 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003678:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800367a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003680:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003684:	e7f2      	b.n	800366c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003686:	68ca      	ldr	r2, [r1, #12]
 8003688:	6849      	ldr	r1, [r1, #4]
 800368a:	f7ff fd49 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003690:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003696:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800369a:	e7e7      	b.n	800366c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 800369c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80036a2:	f043 0307 	orr.w	r3, r3, #7
 80036a6:	e7d2      	b.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80036a8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80036ae:	f043 0317 	orr.w	r3, r3, #23
 80036b2:	e7cc      	b.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80036b4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80036ba:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80036be:	e7c6      	b.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
 80036c0:	fffe0088 	.word	0xfffe0088

080036c4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036c4:	6a03      	ldr	r3, [r0, #32]
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80036ca:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036cc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80036d0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80036e2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80036e4:	688d      	ldr	r5, [r1, #8]
 80036e6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80036ea:	4d09      	ldr	r5, [pc, #36]	; (8003710 <TIM_OC5_SetConfig+0x4c>)
 80036ec:	42a8      	cmp	r0, r5
 80036ee:	d003      	beq.n	80036f8 <TIM_OC5_SetConfig+0x34>
 80036f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036f4:	42a8      	cmp	r0, r5
 80036f6:	d104      	bne.n	8003702 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036f8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80036fc:	694d      	ldr	r5, [r1, #20]
 80036fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003702:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003704:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003706:	684b      	ldr	r3, [r1, #4]
 8003708:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800370a:	6202      	str	r2, [r0, #32]
 800370c:	bd30      	pop	{r4, r5, pc}
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000

08003714 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003714:	6a03      	ldr	r3, [r0, #32]
 8003716:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800371a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800371c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003720:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003722:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003724:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003728:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003732:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003736:	688d      	ldr	r5, [r1, #8]
 8003738:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800373c:	4d08      	ldr	r5, [pc, #32]	; (8003760 <TIM_OC6_SetConfig+0x4c>)
 800373e:	42a8      	cmp	r0, r5
 8003740:	d003      	beq.n	800374a <TIM_OC6_SetConfig+0x36>
 8003742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003746:	42a8      	cmp	r0, r5
 8003748:	d104      	bne.n	8003754 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800374a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800374e:	694d      	ldr	r5, [r1, #20]
 8003750:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003754:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003756:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003758:	684b      	ldr	r3, [r1, #4]
 800375a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800375c:	6202      	str	r2, [r0, #32]
 800375e:	bd30      	pop	{r4, r5, pc}
 8003760:	40010000 	.word	0x40010000

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003764:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
{
 800376a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800376c:	d01c      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800376e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003770:	4d0e      	ldr	r5, [pc, #56]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003772:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003774:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003776:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003778:	d003      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800377a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800377e:	42aa      	cmp	r2, r5
 8003780:	d103      	bne.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003786:	684d      	ldr	r5, [r1, #4]
 8003788:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003790:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003796:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003798:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 800379a:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 800379c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800379e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80037a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80037a8:	2002      	movs	r0, #2
} 
 80037aa:	bd30      	pop	{r4, r5, pc}
 80037ac:	40010000 	.word	0x40010000

080037b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80037b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
{
 80037b6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80037b8:	d038      	beq.n	800382c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ba:	68cb      	ldr	r3, [r1, #12]
 80037bc:	688a      	ldr	r2, [r1, #8]
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037c2:	4c1b      	ldr	r4, [pc, #108]	; (8003830 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037c6:	684a      	ldr	r2, [r1, #4]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037d6:	690a      	ldr	r2, [r1, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037de:	694a      	ldr	r2, [r1, #20]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80037ee:	698a      	ldr	r2, [r1, #24]
 80037f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80037f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037f8:	6802      	ldr	r2, [r0, #0]
 80037fa:	42a2      	cmp	r2, r4
 80037fc:	d003      	beq.n	8003806 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80037fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003802:	42a2      	cmp	r2, r4
 8003804:	d10c      	bne.n	8003820 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003806:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800380c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003810:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003812:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003818:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800381a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800381e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003822:	2300      	movs	r3, #0
 8003824:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003828:	4618      	mov	r0, r3
 800382a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800382c:	2002      	movs	r0, #2
}
 800382e:	bd10      	pop	{r4, pc}
 8003830:	40010000 	.word	0x40010000

08003834 <HAL_TIMEx_CommutationCallback>:
 8003834:	4770      	bx	lr

08003836 <HAL_TIMEx_BreakCallback>:
{
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_ConfigChannel>:
{
 8003838:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800383a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800383e:	4604      	mov	r4, r0
 8003840:	460d      	mov	r5, r1
 8003842:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003844:	2b01      	cmp	r3, #1
 8003846:	d010      	beq.n	800386a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003848:	2301      	movs	r3, #1
  switch (Channel)
 800384a:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003850:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003854:	d043      	beq.n	80038de <HAL_TIM_PWM_ConfigChannel+0xa6>
 8003856:	d809      	bhi.n	800386c <HAL_TIM_PWM_ConfigChannel+0x34>
 8003858:	b1fa      	cbz	r2, 800389a <HAL_TIM_PWM_ConfigChannel+0x62>
 800385a:	2a04      	cmp	r2, #4
 800385c:	d02e      	beq.n	80038bc <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800385e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003860:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003866:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800386a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800386c:	2a10      	cmp	r2, #16
 800386e:	d047      	beq.n	8003900 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003870:	2a14      	cmp	r2, #20
 8003872:	d056      	beq.n	8003922 <HAL_TIM_PWM_ConfigChannel+0xea>
 8003874:	2a0c      	cmp	r2, #12
 8003876:	d1f2      	bne.n	800385e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	f7ff fe61 	bl	8003540 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003880:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003898:	e030      	b.n	80038fc <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	f7ff fdbe 	bl	800341c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038b8:	619a      	str	r2, [r3, #24]
    break;
 80038ba:	e7d0      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	f7ff fddb 	bl	8003478 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038c4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038dc:	e7ec      	b.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	f7ff fdfc 	bl	80034dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80038e6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	f042 0208 	orr.w	r2, r2, #8
 80038ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80038fc:	61da      	str	r2, [r3, #28]
    break;
 80038fe:	e7ae      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	f7ff fedf 	bl	80036c4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003906:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003908:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800390a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390c:	f042 0208 	orr.w	r2, r2, #8
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003912:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003914:	f022 0204 	bic.w	r2, r2, #4
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800391a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391c:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003920:	e79d      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	f7ff fef6 	bl	8003714 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003928:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800392a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800392c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800393c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003942:	e7ec      	b.n	800391e <HAL_TIM_PWM_ConfigChannel+0xe6>

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003948:	9d06      	ldr	r5, [sp, #24]
 800394a:	4604      	mov	r4, r0
 800394c:	460f      	mov	r7, r1
 800394e:	4616      	mov	r6, r2
 8003950:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003952:	6821      	ldr	r1, [r4, #0]
 8003954:	69ca      	ldr	r2, [r1, #28]
 8003956:	ea37 0302 	bics.w	r3, r7, r2
 800395a:	bf0c      	ite	eq
 800395c:	2201      	moveq	r2, #1
 800395e:	2200      	movne	r2, #0
 8003960:	42b2      	cmp	r2, r6
 8003962:	d002      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003964:	2000      	movs	r0, #0
}
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800396a:	1c6b      	adds	r3, r5, #1
 800396c:	d0f2      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800396e:	b99d      	cbnz	r5, 8003998 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003970:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003972:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800397a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003984:	2320      	movs	r3, #32
 8003986:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800398a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800398e:	2300      	movs	r3, #0
 8003990:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003998:	f7fd f9c8 	bl	8000d2c <HAL_GetTick>
 800399c:	eba0 0008 	sub.w	r0, r0, r8
 80039a0:	4285      	cmp	r5, r0
 80039a2:	d8d6      	bhi.n	8003952 <UART_WaitOnFlagUntilTimeout+0xe>
 80039a4:	e7e4      	b.n	8003970 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

080039a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039ac:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ae:	69c3      	ldr	r3, [r0, #28]
 80039b0:	6921      	ldr	r1, [r4, #16]
 80039b2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039b4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b6:	430a      	orrs	r2, r1
 80039b8:	6961      	ldr	r1, [r4, #20]
 80039ba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039bc:	4993      	ldr	r1, [pc, #588]	; (8003c0c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039be:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039c0:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80039c2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039c4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039c8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ca:	686a      	ldr	r2, [r5, #4]
 80039cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80039d0:	430a      	orrs	r2, r1
 80039d2:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80039d4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80039d6:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80039d8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80039da:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80039de:	430a      	orrs	r2, r1
 80039e0:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e2:	4a8b      	ldr	r2, [pc, #556]	; (8003c10 <UART_SetConfig+0x268>)
 80039e4:	4295      	cmp	r5, r2
 80039e6:	d119      	bne.n	8003a1c <UART_SetConfig+0x74>
 80039e8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80039ec:	4989      	ldr	r1, [pc, #548]	; (8003c14 <UART_SetConfig+0x26c>)
 80039ee:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80039f2:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fa:	5c8a      	ldrb	r2, [r1, r2]
 80039fc:	f040 80b3 	bne.w	8003b66 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003a00:	2a08      	cmp	r2, #8
 8003a02:	f200 80ad 	bhi.w	8003b60 <UART_SetConfig+0x1b8>
 8003a06:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a0a:	0026      	.short	0x0026
 8003a0c:	00e9007b 	.word	0x00e9007b
 8003a10:	00f500ab 	.word	0x00f500ab
 8003a14:	00ab00ab 	.word	0x00ab00ab
 8003a18:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1c:	4a7e      	ldr	r2, [pc, #504]	; (8003c18 <UART_SetConfig+0x270>)
 8003a1e:	4295      	cmp	r5, r2
 8003a20:	d107      	bne.n	8003a32 <UART_SetConfig+0x8a>
 8003a22:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003a26:	497d      	ldr	r1, [pc, #500]	; (8003c1c <UART_SetConfig+0x274>)
 8003a28:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003a2c:	f002 020c 	and.w	r2, r2, #12
 8003a30:	e7e1      	b.n	80039f6 <UART_SetConfig+0x4e>
 8003a32:	4a7b      	ldr	r2, [pc, #492]	; (8003c20 <UART_SetConfig+0x278>)
 8003a34:	4295      	cmp	r5, r2
 8003a36:	d12b      	bne.n	8003a90 <UART_SetConfig+0xe8>
 8003a38:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003a3c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003a40:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003a44:	2a10      	cmp	r2, #16
 8003a46:	f000 80d2 	beq.w	8003bee <UART_SetConfig+0x246>
 8003a4a:	d816      	bhi.n	8003a7a <UART_SetConfig+0xd2>
 8003a4c:	b9da      	cbnz	r2, 8003a86 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a52:	f040 809f 	bne.w	8003b94 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a56:	f7fe fe23 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a5a:	6861      	ldr	r1, [r4, #4]
 8003a5c:	084a      	lsrs	r2, r1, #1
 8003a5e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a66:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a68:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003a72:	6821      	ldr	r1, [r4, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
 8003a78:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a7a:	2a20      	cmp	r2, #32
 8003a7c:	f000 80ab 	beq.w	8003bd6 <UART_SetConfig+0x22e>
 8003a80:	2a30      	cmp	r2, #48	; 0x30
 8003a82:	f000 80ba 	beq.w	8003bfa <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8a:	d069      	beq.n	8003b60 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a90:	4a64      	ldr	r2, [pc, #400]	; (8003c24 <UART_SetConfig+0x27c>)
 8003a92:	4295      	cmp	r5, r2
 8003a94:	d10e      	bne.n	8003ab4 <UART_SetConfig+0x10c>
 8003a96:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003a9a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003a9e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003aa2:	2a40      	cmp	r2, #64	; 0x40
 8003aa4:	f000 80a3 	beq.w	8003bee <UART_SetConfig+0x246>
 8003aa8:	d9d0      	bls.n	8003a4c <UART_SetConfig+0xa4>
 8003aaa:	2a80      	cmp	r2, #128	; 0x80
 8003aac:	f000 8093 	beq.w	8003bd6 <UART_SetConfig+0x22e>
 8003ab0:	2ac0      	cmp	r2, #192	; 0xc0
 8003ab2:	e7e6      	b.n	8003a82 <UART_SetConfig+0xda>
 8003ab4:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <UART_SetConfig+0x280>)
 8003ab6:	4295      	cmp	r5, r2
 8003ab8:	d110      	bne.n	8003adc <UART_SetConfig+0x134>
 8003aba:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003abe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ac2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003ac6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003aca:	f000 8090 	beq.w	8003bee <UART_SetConfig+0x246>
 8003ace:	d9bd      	bls.n	8003a4c <UART_SetConfig+0xa4>
 8003ad0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003ad4:	d07f      	beq.n	8003bd6 <UART_SetConfig+0x22e>
 8003ad6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ada:	e7d2      	b.n	8003a82 <UART_SetConfig+0xda>
 8003adc:	4a53      	ldr	r2, [pc, #332]	; (8003c2c <UART_SetConfig+0x284>)
 8003ade:	4295      	cmp	r5, r2
 8003ae0:	d117      	bne.n	8003b12 <UART_SetConfig+0x16a>
 8003ae2:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003ae6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003aea:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003aee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003af2:	d07c      	beq.n	8003bee <UART_SetConfig+0x246>
 8003af4:	d807      	bhi.n	8003b06 <UART_SetConfig+0x15e>
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d1c5      	bne.n	8003a86 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d154      	bne.n	8003baa <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b00:	f7fe fdde 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003b04:	e7a9      	b.n	8003a5a <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b06:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003b0a:	d064      	beq.n	8003bd6 <UART_SetConfig+0x22e>
 8003b0c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003b10:	e7b7      	b.n	8003a82 <UART_SetConfig+0xda>
 8003b12:	4a47      	ldr	r2, [pc, #284]	; (8003c30 <UART_SetConfig+0x288>)
 8003b14:	4295      	cmp	r5, r2
 8003b16:	d10f      	bne.n	8003b38 <UART_SetConfig+0x190>
 8003b18:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003b1c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b20:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003b24:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b28:	d061      	beq.n	8003bee <UART_SetConfig+0x246>
 8003b2a:	d98f      	bls.n	8003a4c <UART_SetConfig+0xa4>
 8003b2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b30:	d051      	beq.n	8003bd6 <UART_SetConfig+0x22e>
 8003b32:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003b36:	e7a4      	b.n	8003a82 <UART_SetConfig+0xda>
 8003b38:	4a3e      	ldr	r2, [pc, #248]	; (8003c34 <UART_SetConfig+0x28c>)
 8003b3a:	4295      	cmp	r5, r2
 8003b3c:	d1a3      	bne.n	8003a86 <UART_SetConfig+0xde>
 8003b3e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003b42:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b46:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003b4a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b4e:	d04e      	beq.n	8003bee <UART_SetConfig+0x246>
 8003b50:	f67f af7c 	bls.w	8003a4c <UART_SetConfig+0xa4>
 8003b54:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003b58:	d03d      	beq.n	8003bd6 <UART_SetConfig+0x22e>
 8003b5a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003b5e:	e790      	b.n	8003a82 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e781      	b.n	8003a6a <UART_SetConfig+0xc2>
    switch (clocksource)
 8003b66:	2a08      	cmp	r2, #8
 8003b68:	d890      	bhi.n	8003a8c <UART_SetConfig+0xe4>
 8003b6a:	a301      	add	r3, pc, #4	; (adr r3, 8003b70 <UART_SetConfig+0x1c8>)
 8003b6c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003bab 	.word	0x08003bab
 8003b78:	08003bb1 	.word	0x08003bb1
 8003b7c:	08003a8d 	.word	0x08003a8d
 8003b80:	08003bc7 	.word	0x08003bc7
 8003b84:	08003a8d 	.word	0x08003a8d
 8003b88:	08003a8d 	.word	0x08003a8d
 8003b8c:	08003a8d 	.word	0x08003a8d
 8003b90:	08003bcd 	.word	0x08003bcd
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b94:	f7fe fd84 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b98:	6863      	ldr	r3, [r4, #4]
 8003b9a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003b9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ba2:	b280      	uxth	r0, r0
 8003ba4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba6:	2000      	movs	r0, #0
      break;
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003baa:	f7fe fd89 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003bae:	e7f3      	b.n	8003b98 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003bb0:	6862      	ldr	r2, [r4, #4]
 8003bb2:	0853      	lsrs	r3, r2, #1
 8003bb4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003bb8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	60eb      	str	r3, [r5, #12]
 8003bc4:	e7ef      	b.n	8003ba6 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bc6:	f7fe fc99 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8003bca:	e7e5      	b.n	8003b98 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bcc:	6862      	ldr	r2, [r4, #4]
 8003bce:	0853      	lsrs	r3, r2, #1
 8003bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003bd4:	e7f2      	b.n	8003bbc <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d1e9      	bne.n	8003bb0 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bdc:	6860      	ldr	r0, [r4, #4]
 8003bde:	0843      	lsrs	r3, r0, #1
 8003be0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003be4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003be8:	fbb3 f3f0 	udiv	r3, r3, r0
 8003bec:	e73b      	b.n	8003a66 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf2:	d1e8      	bne.n	8003bc6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bf4:	f7fe fc82 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8003bf8:	e72f      	b.n	8003a5a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfe:	d1e5      	bne.n	8003bcc <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c00:	6860      	ldr	r0, [r4, #4]
 8003c02:	0843      	lsrs	r3, r0, #1
 8003c04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003c08:	e7ee      	b.n	8003be8 <UART_SetConfig+0x240>
 8003c0a:	bf00      	nop
 8003c0c:	efff69f3 	.word	0xefff69f3
 8003c10:	40011000 	.word	0x40011000
 8003c14:	08005454 	.word	0x08005454
 8003c18:	40004400 	.word	0x40004400
 8003c1c:	08005458 	.word	0x08005458
 8003c20:	40004800 	.word	0x40004800
 8003c24:	40004c00 	.word	0x40004c00
 8003c28:	40005000 	.word	0x40005000
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	40007800 	.word	0x40007800
 8003c34:	40007c00 	.word	0x40007c00

08003c38 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c3a:	07da      	lsls	r2, r3, #31
{
 8003c3c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3e:	d506      	bpl.n	8003c4e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c40:	6801      	ldr	r1, [r0, #0]
 8003c42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003c44:	684a      	ldr	r2, [r1, #4]
 8003c46:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003c4a:	4322      	orrs	r2, r4
 8003c4c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4e:	079c      	lsls	r4, r3, #30
 8003c50:	d506      	bpl.n	8003c60 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c52:	6801      	ldr	r1, [r0, #0]
 8003c54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003c56:	684a      	ldr	r2, [r1, #4]
 8003c58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c5c:	4322      	orrs	r2, r4
 8003c5e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c60:	0759      	lsls	r1, r3, #29
 8003c62:	d506      	bpl.n	8003c72 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c64:	6801      	ldr	r1, [r0, #0]
 8003c66:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003c68:	684a      	ldr	r2, [r1, #4]
 8003c6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c6e:	4322      	orrs	r2, r4
 8003c70:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c72:	071a      	lsls	r2, r3, #28
 8003c74:	d506      	bpl.n	8003c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c76:	6801      	ldr	r1, [r0, #0]
 8003c78:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003c7a:	684a      	ldr	r2, [r1, #4]
 8003c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c80:	4322      	orrs	r2, r4
 8003c82:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c84:	06dc      	lsls	r4, r3, #27
 8003c86:	d506      	bpl.n	8003c96 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c88:	6801      	ldr	r1, [r0, #0]
 8003c8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c92:	4322      	orrs	r2, r4
 8003c94:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c96:	0699      	lsls	r1, r3, #26
 8003c98:	d506      	bpl.n	8003ca8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c9a:	6801      	ldr	r1, [r0, #0]
 8003c9c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003c9e:	688a      	ldr	r2, [r1, #8]
 8003ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca4:	4322      	orrs	r2, r4
 8003ca6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca8:	065a      	lsls	r2, r3, #25
 8003caa:	d510      	bpl.n	8003cce <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cac:	6801      	ldr	r1, [r0, #0]
 8003cae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003cb0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003cba:	ea42 0204 	orr.w	r2, r2, r4
 8003cbe:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc0:	d105      	bne.n	8003cce <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc2:	684a      	ldr	r2, [r1, #4]
 8003cc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003cc6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003cca:	4322      	orrs	r2, r4
 8003ccc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	d506      	bpl.n	8003ce0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd2:	6802      	ldr	r2, [r0, #0]
 8003cd4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003cd6:	6853      	ldr	r3, [r2, #4]
 8003cd8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	bd10      	pop	{r4, pc}

08003ce2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	2500      	movs	r5, #0
{
 8003ce6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cea:	f7fd f81f 	bl	8000d2c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cee:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003cf0:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	0712      	lsls	r2, r2, #28
 8003cf6:	d409      	bmi.n	8003d0c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003cf8:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cfa:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003cfc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003d00:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003d04:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003d08:	b003      	add	sp, #12
 8003d0a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003d10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d14:	4620      	mov	r0, r4
 8003d16:	9200      	str	r2, [sp, #0]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	f7ff fe13 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0ea      	beq.n	8003cf8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003d22:	2003      	movs	r0, #3
 8003d24:	e7f0      	b.n	8003d08 <UART_CheckIdleState+0x26>

08003d26 <HAL_UART_Init>:
{
 8003d26:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003d28:	4604      	mov	r4, r0
 8003d2a:	b360      	cbz	r0, 8003d86 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d2c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003d30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d34:	b91b      	cbnz	r3, 8003d3e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003d36:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003d3a:	f001 f9f5 	bl	8005128 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003d3e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d42:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d50:	f7ff fe2a 	bl	80039a8 <UART_SetConfig>
 8003d54:	2801      	cmp	r0, #1
 8003d56:	d016      	beq.n	8003d86 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d5a:	b113      	cbz	r3, 8003d62 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff ff6b 	bl	8003c38 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d62:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003d64:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
}
 8003d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003d80:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003d82:	f7ff bfae 	b.w	8003ce2 <UART_CheckIdleState>
}
 8003d86:	2001      	movs	r0, #1
 8003d88:	bd10      	pop	{r4, pc}

08003d8a <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003d8a:	680b      	ldr	r3, [r1, #0]
 8003d8c:	684a      	ldr	r2, [r1, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003d94:	6803      	ldr	r3, [r0, #0]
{
 8003d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d9a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8003d9e:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003da2:	694d      	ldr	r5, [r1, #20]
 8003da4:	698c      	ldr	r4, [r1, #24]
 8003da6:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8003daa:	6a0f      	ldr	r7, [r1, #32]
 8003dac:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003dae:	d014      	beq.n	8003dda <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003db0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003db4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003db8:	431a      	orrs	r2, r3
 8003dba:	ea42 0209 	orr.w	r2, r2, r9
 8003dbe:	ea42 0208 	orr.w	r2, r2, r8
 8003dc2:	ea42 030c 	orr.w	r3, r2, ip
 8003dc6:	432b      	orrs	r3, r5
 8003dc8:	4323      	orrs	r3, r4
 8003dca:	ea43 030e 	orr.w	r3, r3, lr
 8003dce:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003dd0:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003dd2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003dda:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003de0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003de4:	ea43 030e 	orr.w	r3, r3, lr
 8003de8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003dec:	433b      	orrs	r3, r7
 8003dee:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003df0:	431e      	orrs	r6, r3
 8003df2:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003df6:	6006      	str	r6, [r0, #0]
 8003df8:	ea42 0208 	orr.w	r2, r2, r8
 8003dfc:	ea42 030c 	orr.w	r3, r2, ip
 8003e00:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e02:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003e04:	6043      	str	r3, [r0, #4]
 8003e06:	e7e5      	b.n	8003dd4 <FMC_SDRAM_Init+0x4a>

08003e08 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003e08:	2a01      	cmp	r2, #1
 8003e0a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8003e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e10:	e891 4008 	ldmia.w	r1, {r3, lr}
 8003e14:	688f      	ldr	r7, [r1, #8]
 8003e16:	690d      	ldr	r5, [r1, #16]
 8003e18:	694e      	ldr	r6, [r1, #20]
 8003e1a:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8003e1c:	d01b      	beq.n	8003e56 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003e1e:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003e20:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e24:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003e26:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003e2a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003e2e:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 8003e30:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 8003e32:	3901      	subs	r1, #1
 8003e34:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8003e38:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003e3a:	1e7b      	subs	r3, r7, #1
 8003e3c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003e40:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8003e44:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003e48:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003e50:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003e52:	2000      	movs	r0, #0
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003e56:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003e58:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003e5c:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e5e:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003e60:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003e64:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003e68:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8003e6c:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003e6e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 8003e72:	3901      	subs	r1, #1
 8003e74:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8003e78:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8003e7c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003e7e:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003e80:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8003e84:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003e88:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003e8a:	6086      	str	r6, [r0, #8]
 8003e8c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003e94:	60c3      	str	r3, [r0, #12]
 8003e96:	e7dc      	b.n	8003e52 <FMC_SDRAM_Timing_Init+0x4a>

08003e98 <led_on>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

static void led_on(void) {
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4801      	ldr	r0, [pc, #4]	; (8003ea4 <led_on+0xc>)
 8003e9e:	f7fd bb1d 	b.w	80014dc <HAL_GPIO_WritePin>
 8003ea2:	bf00      	nop
 8003ea4:	40022000 	.word	0x40022000

08003ea8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <SystemClock_Config+0xe0>)
 8003eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8003eb0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
{
 8003eb4:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eb8:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003eba:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ebc:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <SystemClock_Config+0xe4>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003ece:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ed6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ed8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003edc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ee0:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ee2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003ee4:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003eea:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003eec:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003eee:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003ef2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ef4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003ef6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ef8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003efa:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efc:	f7fe f96a 	bl	80021d4 <HAL_RCC_OscConfig>
 8003f00:	b100      	cbz	r0, 8003f04 <SystemClock_Config+0x5c>
 8003f02:	e7fe      	b.n	8003f02 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f04:	f7fe f92e 	bl	8002164 <HAL_PWREx_EnableOverDrive>
 8003f08:	b100      	cbz	r0, 8003f0c <SystemClock_Config+0x64>
 8003f0a:	e7fe      	b.n	8003f0a <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f0c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f0e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003f10:	2106      	movs	r1, #6
 8003f12:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f14:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f1a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f1c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f22:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003f24:	f7fe fb18 	bl	8002558 <HAL_RCC_ClockConfig>
 8003f28:	b100      	cbz	r0, 8003f2c <SystemClock_Config+0x84>
 8003f2a:	e7fe      	b.n	8003f2a <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <SystemClock_Config+0xe8>)
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f2e:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8003f30:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003f32:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003f36:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003f38:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003f3a:	2305      	movs	r3, #5
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f3c:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003f3e:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003f40:	2303      	movs	r3, #3
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003f42:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f44:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003f46:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003f4c:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f4e:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f50:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003f54:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f56:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f58:	f7fe fbe0 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	b100      	cbz	r0, 8003f62 <SystemClock_Config+0xba>
 8003f60:	e7fe      	b.n	8003f60 <SystemClock_Config+0xb8>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003f62:	f7fe fb97 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 8003f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f6e:	f7fd f88f 	bl	8001090 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003f72:	2004      	movs	r0, #4
 8003f74:	f7fd f8a2 	bl	80010bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	f7fd f842 	bl	8001008 <HAL_NVIC_SetPriority>
}
 8003f84:	b035      	add	sp, #212	; 0xd4
 8003f86:	bd30      	pop	{r4, r5, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	00014868 	.word	0x00014868

08003f94 <main>:
{
 8003f94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003f98:	b0a9      	sub	sp, #164	; 0xa4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f9e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003fa2:	4bb1      	ldr	r3, [pc, #708]	; (8004268 <main+0x2d4>)
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fb0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fb6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8003fba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003fbe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003fc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003fc6:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003fca:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003fce:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8003fd2:	07a5      	lsls	r5, r4, #30
 8003fd4:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003fd6:	ea02 0e06 	and.w	lr, r2, r6
 8003fda:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003fdc:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003fde:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways--);
 8003fe2:	3901      	subs	r1, #1
 8003fe4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003fe8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8003fec:	1c4f      	adds	r7, r1, #1
 8003fee:	d1f6      	bne.n	8003fde <main+0x4a>
 8003ff0:	3a20      	subs	r2, #32
    } while(sets--);
 8003ff2:	f112 0f20 	cmn.w	r2, #32
 8003ff6:	d1ee      	bne.n	8003fd6 <main+0x42>
 8003ff8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004002:	615a      	str	r2, [r3, #20]
 8004004:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004008:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800400c:	f7fc fe76 	bl	8000cfc <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004010:	2400      	movs	r4, #0
  SystemClock_Config();
 8004012:	f7ff ff49 	bl	8003ea8 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004016:	4b95      	ldr	r3, [pc, #596]	; (800426c <main+0x2d8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004018:	2120      	movs	r1, #32
 800401a:	4895      	ldr	r0, [pc, #596]	; (8004270 <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800401e:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004026:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800402a:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800402e:	f04f 080a 	mov.w	r8, #10
  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004032:	f04f 0a0d 	mov.w	sl, #13
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004038:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	f002 0210 	and.w	r2, r2, #16
 8004040:	9202      	str	r2, [sp, #8]
 8004042:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
 800404c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004052:	9203      	str	r2, [sp, #12]
 8004054:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	f042 0202 	orr.w	r2, r2, #2
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
 800405e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004060:	f002 0202 	and.w	r2, r2, #2
 8004064:	9204      	str	r2, [sp, #16]
 8004066:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
 8004070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004072:	f002 0208 	and.w	r2, r2, #8
 8004076:	9205      	str	r2, [sp, #20]
 8004078:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407c:	f042 0204 	orr.w	r2, r2, #4
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
 8004082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004084:	f002 0204 	and.w	r2, r2, #4
 8004088:	9206      	str	r2, [sp, #24]
 800408a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800408c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	f002 0201 	and.w	r2, r2, #1
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800409e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
 80040a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80040ac:	9208      	str	r2, [sp, #32]
 80040ae:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80040b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80040be:	9209      	str	r2, [sp, #36]	; 0x24
 80040c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
 80040ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040cc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80040d0:	920a      	str	r2, [sp, #40]	; 0x28
 80040d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d6:	f042 0220 	orr.w	r2, r2, #32
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	f002 0220 	and.w	r2, r2, #32
 80040e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80040e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80040ee:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	930c      	str	r3, [sp, #48]	; 0x30
 80040f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80040fa:	f7fd f9ef 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	210c      	movs	r1, #12
 8004102:	485c      	ldr	r0, [pc, #368]	; (8004274 <main+0x2e0>)
 8004104:	f7fd f9ea 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8004108:	2201      	movs	r2, #1
 800410a:	2108      	movs	r1, #8
 800410c:	485a      	ldr	r0, [pc, #360]	; (8004278 <main+0x2e4>)
 800410e:	f7fd f9e5 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8004112:	2201      	movs	r2, #1
 8004114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004118:	4856      	ldr	r0, [pc, #344]	; (8004274 <main+0x2e0>)
 800411a:	f7fd f9df 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004124:	4855      	ldr	r0, [pc, #340]	; (800427c <main+0x2e8>)
 8004126:	f7fd f9d9 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800412a:	2200      	movs	r2, #0
 800412c:	21c8      	movs	r1, #200	; 0xc8
 800412e:	4854      	ldr	r0, [pc, #336]	; (8004280 <main+0x2ec>)
 8004130:	f7fd f9d4 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004134:	a91b      	add	r1, sp, #108	; 0x6c
 8004136:	4853      	ldr	r0, [pc, #332]	; (8004284 <main+0x2f0>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004138:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800413c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004140:	f7fd f8e2 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004144:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004146:	a91b      	add	r1, sp, #108	; 0x6c
 8004148:	484e      	ldr	r0, [pc, #312]	; (8004284 <main+0x2f0>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800414a:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800414c:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004156:	f7fd f8d7 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800415a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800415e:	a91b      	add	r1, sp, #108	; 0x6c
 8004160:	4847      	ldr	r0, [pc, #284]	; (8004280 <main+0x2ec>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004162:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004164:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004168:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416c:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800416e:	f7fd f8cb 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8004172:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	a91b      	add	r1, sp, #108	; 0x6c
 8004178:	4843      	ldr	r0, [pc, #268]	; (8004288 <main+0x2f4>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800417a:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800417c:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004184:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004186:	f7fd f8bf 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800418a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800418c:	a91b      	add	r1, sp, #108	; 0x6c
 800418e:	4838      	ldr	r0, [pc, #224]	; (8004270 <main+0x2dc>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004190:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004192:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800419c:	f7fd f8b4 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80041a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a4:	a91b      	add	r1, sp, #108	; 0x6c
 80041a6:	4839      	ldr	r0, [pc, #228]	; (800428c <main+0x2f8>)
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80041a8:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80041aa:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ac:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80041ae:	931f      	str	r3, [sp, #124]	; 0x7c
 80041b0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b6:	f7fd f8a7 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80041ba:	2260      	movs	r2, #96	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041bc:	a91b      	add	r1, sp, #108	; 0x6c
 80041be:	4831      	ldr	r0, [pc, #196]	; (8004284 <main+0x2f0>)
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80041c0:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c6:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80041c8:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041cc:	f7fd f89c 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80041d0:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80041d2:	a91b      	add	r1, sp, #108	; 0x6c
 80041d4:	482c      	ldr	r0, [pc, #176]	; (8004288 <main+0x2f4>)
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80041d6:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80041d8:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80041e2:	f7fd f891 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80041e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80041ea:	a91b      	add	r1, sp, #108	; 0x6c
 80041ec:	4828      	ldr	r0, [pc, #160]	; (8004290 <main+0x2fc>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80041ee:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80041f4:	f7fd f888 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80041f8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80041fa:	a91b      	add	r1, sp, #108	; 0x6c
 80041fc:	481c      	ldr	r0, [pc, #112]	; (8004270 <main+0x2dc>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80041fe:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004204:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004206:	f7fd f87f 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800420a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420e:	a91b      	add	r1, sp, #108	; 0x6c
 8004210:	4821      	ldr	r0, [pc, #132]	; (8004298 <main+0x304>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004212:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004214:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421e:	f7fd f873 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004222:	22f0      	movs	r2, #240	; 0xf0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004224:	a91b      	add	r1, sp, #108	; 0x6c
 8004226:	4813      	ldr	r0, [pc, #76]	; (8004274 <main+0x2e0>)
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004228:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800422a:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004234:	f7fd f868 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004238:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800423c:	a91b      	add	r1, sp, #108	; 0x6c
 800423e:	4810      	ldr	r0, [pc, #64]	; (8004280 <main+0x2ec>)
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004240:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004242:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424a:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800424c:	f7fd f85c 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004250:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004252:	a91b      	add	r1, sp, #108	; 0x6c
 8004254:	4806      	ldr	r0, [pc, #24]	; (8004270 <main+0x2dc>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004256:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004258:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425c:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800425e:	f7fd f853 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004262:	a91b      	add	r1, sp, #108	; 0x6c
 8004264:	e01a      	b.n	800429c <main+0x308>
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00
 800426c:	40023800 	.word	0x40023800
 8004270:	40020c00 	.word	0x40020c00
 8004274:	40022000 	.word	0x40022000
 8004278:	40022800 	.word	0x40022800
 800427c:	40021c00 	.word	0x40021c00
 8004280:	40021800 	.word	0x40021800
 8004284:	40021000 	.word	0x40021000
 8004288:	40020400 	.word	0x40020400
 800428c:	40020800 	.word	0x40020800
 8004290:	40022400 	.word	0x40022400
 8004294:	10120000 	.word	0x10120000
 8004298:	40020000 	.word	0x40020000
 800429c:	4898      	ldr	r0, [pc, #608]	; (8004500 <main+0x56c>)
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800429e:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a6:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80042a8:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80042ac:	f7fd f82c 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80042b0:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042b4:	a91b      	add	r1, sp, #108	; 0x6c
 80042b6:	4893      	ldr	r0, [pc, #588]	; (8004504 <main+0x570>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80042b8:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ba:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042c0:	f7fd f822 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80042c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80042c8:	a91b      	add	r1, sp, #108	; 0x6c
 80042ca:	488f      	ldr	r0, [pc, #572]	; (8004508 <main+0x574>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80042cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80042ce:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042d0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80042d4:	f7fd f818 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80042d8:	a91b      	add	r1, sp, #108	; 0x6c
 80042da:	488c      	ldr	r0, [pc, #560]	; (800450c <main+0x578>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80042dc:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80042e0:	f04f 0b10 	mov.w	fp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e4:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80042ea:	f7fd f80d 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80042ee:	f44f 7100 	mov.w	r1, #512	; 0x200
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80042f2:	4887      	ldr	r0, [pc, #540]	; (8004510 <main+0x57c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80042f6:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80042f8:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80042fe:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004302:	f7fd f801 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004306:	a91b      	add	r1, sp, #108	; 0x6c
 8004308:	487d      	ldr	r0, [pc, #500]	; (8004500 <main+0x56c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800430a:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800430e:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004312:	f7fc fff9 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004316:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004318:	a91b      	add	r1, sp, #108	; 0x6c
 800431a:	4879      	ldr	r0, [pc, #484]	; (8004500 <main+0x56c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800431c:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800431e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004322:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004326:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004328:	f7fc ffee 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800432c:	f248 0304 	movw	r3, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004330:	a91b      	add	r1, sp, #108	; 0x6c
 8004332:	4878      	ldr	r0, [pc, #480]	; (8004514 <main+0x580>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8004334:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004336:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800433a:	f7fc ffe5 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800433e:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004340:	a91b      	add	r1, sp, #108	; 0x6c
 8004342:	4870      	ldr	r0, [pc, #448]	; (8004504 <main+0x570>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004344:	931f      	str	r3, [sp, #124]	; 0x7c
 8004346:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004348:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004350:	f7fc ffda 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8004354:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8004356:	a91b      	add	r1, sp, #108	; 0x6c
 8004358:	486e      	ldr	r0, [pc, #440]	; (8004514 <main+0x580>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800435a:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800435c:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8004362:	f7fc ffd1 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8004366:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800436a:	486a      	ldr	r0, [pc, #424]	; (8004514 <main+0x580>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800436e:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004370:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004376:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800437a:	f7fc ffc5 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800437e:	4b66      	ldr	r3, [pc, #408]	; (8004518 <main+0x584>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004380:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004382:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004384:	485f      	ldr	r0, [pc, #380]	; (8004504 <main+0x570>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004386:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004388:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800438c:	f7fc ffbc 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8004390:	a91b      	add	r1, sp, #108	; 0x6c
 8004392:	4860      	ldr	r0, [pc, #384]	; (8004514 <main+0x580>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004394:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8004398:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439c:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80043a2:	f7fc ffb1 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80043a6:	22c8      	movs	r2, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a8:	a91b      	add	r1, sp, #108	; 0x6c
 80043aa:	4859      	ldr	r0, [pc, #356]	; (8004510 <main+0x57c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80043ac:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ae:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043b4:	f7fc ffa8 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80043b8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ba:	a91b      	add	r1, sp, #108	; 0x6c
 80043bc:	4852      	ldr	r0, [pc, #328]	; (8004508 <main+0x574>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80043be:	931b      	str	r3, [sp, #108]	; 0x6c
 80043c0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80043c2:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ca:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043cc:	f7fc ff9c 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80043d0:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043d2:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d4:	a91b      	add	r1, sp, #108	; 0x6c
 80043d6:	484c      	ldr	r0, [pc, #304]	; (8004508 <main+0x574>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80043d8:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043da:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043dc:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e2:	f7fc ff91 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80043e6:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e8:	a91b      	add	r1, sp, #108	; 0x6c
 80043ea:	484c      	ldr	r0, [pc, #304]	; (800451c <main+0x588>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80043ec:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043ee:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f6:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	f7fc ff86 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80043fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004400:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004402:	a91b      	add	r1, sp, #108	; 0x6c
 8004404:	483e      	ldr	r0, [pc, #248]	; (8004500 <main+0x56c>)
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004406:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004408:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440e:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004410:	f7fc ff7a 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8004414:	a91b      	add	r1, sp, #108	; 0x6c
 8004416:	483e      	ldr	r0, [pc, #248]	; (8004510 <main+0x57c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8004418:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800441c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8004420:	f7fc ff72 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004424:	230b      	movs	r3, #11
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004426:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004428:	a91b      	add	r1, sp, #108	; 0x6c
 800442a:	483d      	ldr	r0, [pc, #244]	; (8004520 <main+0x58c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800442c:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800442e:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f7fc ff67 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800443a:	2250      	movs	r2, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443c:	a91b      	add	r1, sp, #108	; 0x6c
 800443e:	4838      	ldr	r0, [pc, #224]	; (8004520 <main+0x58c>)
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004440:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004446:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004448:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f7fc ff5c 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8004450:	2228      	movs	r2, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004452:	a91b      	add	r1, sp, #108	; 0x6c
 8004454:	4832      	ldr	r0, [pc, #200]	; (8004520 <main+0x58c>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8004456:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004458:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004460:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004462:	f7fc ff51 	bl	8001308 <HAL_GPIO_Init>
  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004466:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004468:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446c:	482b      	ldr	r0, [pc, #172]	; (800451c <main+0x588>)
 800446e:	a91b      	add	r1, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 8004470:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004534 <main+0x5a0>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004474:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004476:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447e:	f7fc ff43 	bl	8001308 <HAL_GPIO_Init>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004482:	4b28      	ldr	r3, [pc, #160]	; (8004524 <main+0x590>)
 8004484:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004488:	4640      	mov	r0, r8
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800448a:	f8c8 4008 	str.w	r4, [r8, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800448e:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004492:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004496:	f8c8 4020 	str.w	r4, [r8, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800449a:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800449e:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc3.Init.NbrOfConversion = 1;
 80044a2:	f8c8 701c 	str.w	r7, [r8, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80044a6:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044aa:	f8c8 7014 	str.w	r7, [r8, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044ae:	e888 1008 	stmia.w	r8, {r3, ip}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <main+0x594>)
 80044b4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80044b8:	f7fc fc50 	bl	8000d5c <HAL_ADC_Init>
 80044bc:	b100      	cbz	r0, 80044c0 <main+0x52c>
 80044be:	e7fe      	b.n	80044be <main+0x52a>
  sConfig.Channel = ADC_CHANNEL_6;
 80044c0:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80044c2:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80044c4:	a91b      	add	r1, sp, #108	; 0x6c
 80044c6:	4640      	mov	r0, r8
  sConfig.Channel = ADC_CHANNEL_6;
 80044c8:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044ca:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80044cc:	f7fc fcea 	bl	8000ea4 <HAL_ADC_ConfigChannel>
 80044d0:	b100      	cbz	r0, 80044d4 <main+0x540>
 80044d2:	e7fe      	b.n	80044d2 <main+0x53e>
  hdma2d.Instance = DMA2D;
 80044d4:	4c15      	ldr	r4, [pc, #84]	; (800452c <main+0x598>)
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <main+0x59c>)
  hdma2d.Init.Mode = DMA2D_M2M;
 80044d8:	6060      	str	r0, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80044da:	60a0      	str	r0, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80044dc:	60e0      	str	r0, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80044de:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80044e0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80044e2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80044e4:	6360      	str	r0, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80044e6:	4620      	mov	r0, r4
  hdma2d.Instance = DMA2D;
 80044e8:	6023      	str	r3, [r4, #0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80044ea:	f7fc fe0a 	bl	8001102 <HAL_DMA2D_Init>
 80044ee:	b100      	cbz	r0, 80044f2 <main+0x55e>
 80044f0:	e7fe      	b.n	80044f0 <main+0x55c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80044f2:	4639      	mov	r1, r7
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7fc febd 	bl	8001274 <HAL_DMA2D_ConfigLayer>
 80044fa:	b1e8      	cbz	r0, 8004538 <main+0x5a4>
 80044fc:	e7fe      	b.n	80044fc <main+0x568>
 80044fe:	bf00      	nop
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40022000 	.word	0x40022000
 8004508:	40020800 	.word	0x40020800
 800450c:	40022800 	.word	0x40022800
 8004510:	40021800 	.word	0x40021800
 8004514:	40021c00 	.word	0x40021c00
 8004518:	10120000 	.word	0x10120000
 800451c:	40020400 	.word	0x40020400
 8004520:	40020000 	.word	0x40020000
 8004524:	40012200 	.word	0x40012200
 8004528:	0f000001 	.word	0x0f000001
 800452c:	200003b4 	.word	0x200003b4
 8004530:	4002b000 	.word	0x4002b000
 8004534:	2000022c 	.word	0x2000022c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004538:	4b97      	ldr	r3, [pc, #604]	; (8004798 <main+0x804>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800453a:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800453c:	4a97      	ldr	r2, [pc, #604]	; (800479c <main+0x808>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800453e:	6058      	str	r0, [r3, #4]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004540:	601a      	str	r2, [r3, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004542:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004544:	6098      	str	r0, [r3, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004546:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8004548:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800454c:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800454e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004550:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004554:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004556:	4618      	mov	r0, r3
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004558:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800455a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800455e:	f8c3 900c 	str.w	r9, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004564:	2207      	movs	r2, #7
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004566:	f8c3 b010 	str.w	fp, [r3, #16]
  SdramTiming.LoadToActiveDelay = 2;
 800456a:	951b      	str	r5, [sp, #108]	; 0x6c
  SdramTiming.ExitSelfRefreshDelay = 7;
 800456c:	921c      	str	r2, [sp, #112]	; 0x70
  SdramTiming.SelfRefreshTime = 4;
 800456e:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
  SdramTiming.RowCycleDelay = 7;
 8004572:	921e      	str	r2, [sp, #120]	; 0x78
  SdramTiming.WriteRecoveryTime = 3;
 8004574:	961f      	str	r6, [sp, #124]	; 0x7c
  SdramTiming.RPDelay = 2;
 8004576:	9520      	str	r5, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 8004578:	9521      	str	r5, [sp, #132]	; 0x84
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800457a:	f7fe fdb1 	bl	80030e0 <HAL_SDRAM_Init>
 800457e:	b100      	cbz	r0, 8004582 <main+0x5ee>
 8004580:	e7fe      	b.n	8004580 <main+0x5ec>
  hi2c1.Instance = I2C1;
 8004582:	4c87      	ldr	r4, [pc, #540]	; (80047a0 <main+0x80c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004584:	4b87      	ldr	r3, [pc, #540]	; (80047a4 <main+0x810>)
 8004586:	f8df e244 	ldr.w	lr, [pc, #580]	; 80047cc <main+0x838>
  hi2c1.Init.OwnAddress1 = 0;
 800458a:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800458c:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800458e:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004590:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004592:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004594:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004596:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004598:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800459a:	e884 4008 	stmia.w	r4, {r3, lr}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800459e:	f7fd f8ad 	bl	80016fc <HAL_I2C_Init>
 80045a2:	4601      	mov	r1, r0
 80045a4:	b100      	cbz	r0, 80045a8 <main+0x614>
 80045a6:	e7fe      	b.n	80045a6 <main+0x612>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7fd fc09 	bl	8001dc0 <HAL_I2CEx_ConfigAnalogFilter>
 80045ae:	4601      	mov	r1, r0
 80045b0:	b100      	cbz	r0, 80045b4 <main+0x620>
 80045b2:	e7fe      	b.n	80045b2 <main+0x61e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7fd fc29 	bl	8001e0c <HAL_I2CEx_ConfigDigitalFilter>
 80045ba:	b100      	cbz	r0, 80045be <main+0x62a>
 80045bc:	e7fe      	b.n	80045bc <main+0x628>
  hi2c3.Instance = I2C3;
 80045be:	4c7a      	ldr	r4, [pc, #488]	; (80047a8 <main+0x814>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045c0:	2501      	movs	r5, #1
  hi2c3.Init.Timing = 0x00303D5B;
 80045c2:	4b7a      	ldr	r3, [pc, #488]	; (80047ac <main+0x818>)
 80045c4:	4e7a      	ldr	r6, [pc, #488]	; (80047b0 <main+0x81c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80045c6:	4620      	mov	r0, r4
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045c8:	60e5      	str	r5, [r4, #12]
  hi2c3.Init.Timing = 0x00303D5B;
 80045ca:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c3.Init.OwnAddress1 = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60a3      	str	r3, [r4, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045d2:	6123      	str	r3, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80045d4:	6163      	str	r3, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045d6:	61a3      	str	r3, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045d8:	61e3      	str	r3, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045da:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80045dc:	f7fd f88e 	bl	80016fc <HAL_I2C_Init>
 80045e0:	4601      	mov	r1, r0
 80045e2:	b100      	cbz	r0, 80045e6 <main+0x652>
 80045e4:	e7fe      	b.n	80045e4 <main+0x650>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7fd fbea 	bl	8001dc0 <HAL_I2CEx_ConfigAnalogFilter>
 80045ec:	4601      	mov	r1, r0
 80045ee:	b100      	cbz	r0, 80045f2 <main+0x65e>
 80045f0:	e7fe      	b.n	80045f0 <main+0x65c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7fd fc0a 	bl	8001e0c <HAL_I2CEx_ConfigDigitalFilter>
 80045f8:	b100      	cbz	r0, 80045fc <main+0x668>
 80045fa:	e7fe      	b.n	80045fa <main+0x666>
  hltdc.Instance = LTDC;
 80045fc:	4c6d      	ldr	r4, [pc, #436]	; (80047b4 <main+0x820>)
 80045fe:	4b6e      	ldr	r3, [pc, #440]	; (80047b8 <main+0x824>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004600:	6060      	str	r0, [r4, #4]
  hltdc.Instance = LTDC;
 8004602:	6023      	str	r3, [r4, #0]
  hltdc.Init.HorizontalSync = 40;
 8004604:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004606:	60a0      	str	r0, [r4, #8]
  hltdc.Init.HorizontalSync = 40;
 8004608:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800460a:	2309      	movs	r3, #9
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800460c:	60e0      	str	r0, [r4, #12]
  hltdc.Init.VerticalSync = 9;
 800460e:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8004610:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004612:	6120      	str	r0, [r4, #16]
  hltdc.Init.AccumulatedHBP = 53;
 8004614:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8004616:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
 8004618:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 11;
 800461c:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800461e:	f240 2315 	movw	r3, #533	; 0x215
  hltdc.Init.Backcolor.Green = 0;
 8004622:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hltdc.Init.AccumulatedActiveW = 533;
 8004626:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8004628:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.Backcolor.Red = 0;
 800462c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004630:	4620      	mov	r0, r4
  hltdc.Init.AccumulatedActiveH = 283;
 8004632:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8004634:	f240 2335 	movw	r3, #565	; 0x235
 8004638:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800463a:	f240 131d 	movw	r3, #285	; 0x11d
 800463e:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004640:	f7fd fc90 	bl	8001f64 <HAL_LTDC_Init>
 8004644:	4602      	mov	r2, r0
 8004646:	b100      	cbz	r0, 800464a <main+0x6b6>
 8004648:	e7fe      	b.n	8004648 <main+0x6b4>
  pLayerCfg.WindowX0 = 0;
 800464a:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.WindowX1 = 480;
 800464c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8004650:	901d      	str	r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY1 = 272;
 8004652:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004656:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg.Alpha = 255;
 8004658:	26ff      	movs	r6, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 800465a:	9021      	str	r0, [sp, #132]	; 0x84
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800465c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 8004660:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004662:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004664:	2007      	movs	r0, #7
  pLayerCfg.ImageWidth = 480;
 8004666:	9125      	str	r1, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004668:	a91b      	add	r1, sp, #108	; 0x6c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800466a:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 800466c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  pLayerCfg.WindowY1 = 272;
 8004670:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004672:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004674:	4620      	mov	r0, r4
  pLayerCfg.Alpha = 255;
 8004676:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.ImageHeight = 272;
 8004678:	9326      	str	r3, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Blue = 0;
 800467a:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 800467e:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 8004682:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004686:	f7fd fd43 	bl	8002110 <HAL_LTDC_ConfigLayer>
 800468a:	b100      	cbz	r0, 800468e <main+0x6fa>
 800468c:	e7fe      	b.n	800468c <main+0x6f8>
  hrtc.Instance = RTC;
 800468e:	4c4b      	ldr	r4, [pc, #300]	; (80047bc <main+0x828>)
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <main+0x82c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004692:	6060      	str	r0, [r4, #4]
  hrtc.Instance = RTC;
 8004694:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8004696:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004698:	6120      	str	r0, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800469a:	6160      	str	r0, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800469c:	61a0      	str	r0, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800469e:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 80046a0:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 80046a2:	60e6      	str	r6, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046a4:	f7fe faf6 	bl	8002c94 <HAL_RTC_Init>
 80046a8:	b100      	cbz	r0, 80046ac <main+0x718>
 80046aa:	e7fe      	b.n	80046aa <main+0x716>
  sTime.Hours = 0x0;
 80046ac:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046b0:	462a      	mov	r2, r5
  sTime.Minutes = 0x0;
 80046b2:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046b6:	a914      	add	r1, sp, #80	; 0x50
  sTime.Seconds = 0x0;
 80046b8:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046bc:	9018      	str	r0, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80046be:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7fe fb93 	bl	8002dec <HAL_RTC_SetTime>
 80046c6:	b100      	cbz	r0, 80046ca <main+0x736>
 80046c8:	e7fe      	b.n	80046c8 <main+0x734>
  sDate.Year = 0x0;
 80046ca:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80046ce:	462a      	mov	r2, r5
 80046d0:	a910      	add	r1, sp, #64	; 0x40
 80046d2:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80046d4:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 80046d8:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 80046dc:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80046e0:	f7fe fb25 	bl	8002d2e <HAL_RTC_SetDate>
 80046e4:	b100      	cbz	r0, 80046e8 <main+0x754>
 80046e6:	e7fe      	b.n	80046e6 <main+0x752>
  sAlarm.Alarm = RTC_ALARM_A;
 80046e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 80046ec:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 80046f0:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80046f4:	462a      	mov	r2, r5
  sAlarm.AlarmTime.Seconds = 0x0;
 80046f6:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80046fa:	a91b      	add	r1, sp, #108	; 0x6c
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80046fc:	901c      	str	r0, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046fe:	901f      	str	r0, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004700:	9020      	str	r0, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004702:	9021      	str	r0, [sp, #132]	; 0x84
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004704:	9022      	str	r0, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004706:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004708:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 800470a:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 800470e:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004710:	f7fe fbda 	bl	8002ec8 <HAL_RTC_SetAlarm>
 8004714:	b100      	cbz	r0, 8004718 <main+0x784>
 8004716:	e7fe      	b.n	8004716 <main+0x782>
  sAlarm.Alarm = RTC_ALARM_B;
 8004718:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800471c:	462a      	mov	r2, r5
 800471e:	a91b      	add	r1, sp, #108	; 0x6c
 8004720:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8004722:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_B;
 8004726:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004728:	f7fe fbce 	bl	8002ec8 <HAL_RTC_SetAlarm>
 800472c:	b100      	cbz	r0, 8004730 <main+0x79c>
 800472e:	e7fe      	b.n	800472e <main+0x79a>
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004730:	2200      	movs	r2, #0
 8004732:	4822      	ldr	r0, [pc, #136]	; (80047bc <main+0x828>)
 8004734:	4611      	mov	r1, r2
 8004736:	f7fe fc8b 	bl	8003050 <HAL_RTCEx_SetWakeUpTimer>
 800473a:	4601      	mov	r1, r0
 800473c:	b100      	cbz	r0, 8004740 <main+0x7ac>
 800473e:	e7fe      	b.n	800473e <main+0x7aa>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8004740:	2202      	movs	r2, #2
 8004742:	481e      	ldr	r0, [pc, #120]	; (80047bc <main+0x828>)
 8004744:	f7fe fc5e 	bl	8003004 <HAL_RTCEx_SetTimeStamp>
 8004748:	b100      	cbz	r0, 800474c <main+0x7b8>
 800474a:	e7fe      	b.n	800474a <main+0x7b6>
  htim1.Instance = TIM1;
 800474c:	4c1d      	ldr	r4, [pc, #116]	; (80047c4 <main+0x830>)
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <main+0x834>)
  htim1.Init.Prescaler = 0;
 8004750:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004752:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8004754:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004756:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004758:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800475a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800475c:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800475e:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004760:	f7fe fe28 	bl	80033b4 <HAL_TIM_Base_Init>
 8004764:	b100      	cbz	r0, 8004768 <main+0x7d4>
 8004766:	e7fe      	b.n	8004766 <main+0x7d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004768:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800476c:	a910      	add	r1, sp, #64	; 0x40
 800476e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004770:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004772:	f7fe ff19 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8004776:	b100      	cbz	r0, 800477a <main+0x7e6>
 8004778:	e7fe      	b.n	8004778 <main+0x7e4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800477a:	4620      	mov	r0, r4
 800477c:	f7fe fe34 	bl	80033e8 <HAL_TIM_PWM_Init>
 8004780:	b100      	cbz	r0, 8004784 <main+0x7f0>
 8004782:	e7fe      	b.n	8004782 <main+0x7ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004784:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004786:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004788:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478a:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800478c:	4620      	mov	r0, r4
 800478e:	f7fe ffe9 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8004792:	4602      	mov	r2, r0
 8004794:	b1e0      	cbz	r0, 80047d0 <main+0x83c>
 8004796:	e7fe      	b.n	8004796 <main+0x802>
 8004798:	20000474 	.word	0x20000474
 800479c:	a0000140 	.word	0xa0000140
 80047a0:	200000b8 	.word	0x200000b8
 80047a4:	40005400 	.word	0x40005400
 80047a8:	2000002c 	.word	0x2000002c
 80047ac:	40005c00 	.word	0x40005c00
 80047b0:	00303d5b 	.word	0x00303d5b
 80047b4:	20000184 	.word	0x20000184
 80047b8:	40016800 	.word	0x40016800
 80047bc:	200002e4 	.word	0x200002e4
 80047c0:	40002800 	.word	0x40002800
 80047c4:	20000304 	.word	0x20000304
 80047c8:	40010000 	.word	0x40010000
 80047cc:	00c0eaff 	.word	0x00c0eaff
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80047d2:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047d4:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047d6:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047d8:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047da:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047dc:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047de:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047e0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047e4:	f7ff f828 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 80047e8:	b100      	cbz	r0, 80047ec <main+0x858>
 80047ea:	e7fe      	b.n	80047ea <main+0x856>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047f0:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047f2:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047f4:	a91b      	add	r1, sp, #108	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047f6:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80047f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047fc:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 80047fe:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004800:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004802:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004804:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004806:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004808:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800480a:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800480c:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800480e:	f7fe ffcf 	bl	80037b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004812:	4605      	mov	r5, r0
 8004814:	b100      	cbz	r0, 8004818 <main+0x884>
 8004816:	e7fe      	b.n	8004816 <main+0x882>
  HAL_TIM_MspPostInit(&htim1);
 8004818:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800481a:	4c7b      	ldr	r4, [pc, #492]	; (8004a08 <main+0xa74>)
  HAL_TIM_MspPostInit(&htim1);
 800481c:	f000 fc2c 	bl	8005078 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8004820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004824:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004826:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0;
 8004828:	60e5      	str	r5, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800482c:	61a5      	str	r5, [r4, #24]
  htim2.Init.Prescaler = 0;
 800482e:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004832:	f7fe fdbf 	bl	80033b4 <HAL_TIM_Base_Init>
 8004836:	b100      	cbz	r0, 800483a <main+0x8a6>
 8004838:	e7fe      	b.n	8004838 <main+0x8a4>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800483a:	a914      	add	r1, sp, #80	; 0x50
 800483c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800483e:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004840:	f7fe feb2 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8004844:	b100      	cbz	r0, 8004848 <main+0x8b4>
 8004846:	e7fe      	b.n	8004846 <main+0x8b2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004848:	486f      	ldr	r0, [pc, #444]	; (8004a08 <main+0xa74>)
 800484a:	f7fe fdcd 	bl	80033e8 <HAL_TIM_PWM_Init>
 800484e:	b100      	cbz	r0, 8004852 <main+0x8be>
 8004850:	e7fe      	b.n	8004850 <main+0x8bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004852:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004854:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004856:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004858:	486b      	ldr	r0, [pc, #428]	; (8004a08 <main+0xa74>)
 800485a:	f7fe ff83 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 800485e:	4602      	mov	r2, r0
 8004860:	b100      	cbz	r0, 8004864 <main+0x8d0>
 8004862:	e7fe      	b.n	8004862 <main+0x8ce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004864:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004866:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004868:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800486a:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800486c:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800486e:	4866      	ldr	r0, [pc, #408]	; (8004a08 <main+0xa74>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004870:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004872:	f7fe ffe1 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8004876:	4605      	mov	r5, r0
 8004878:	b100      	cbz	r0, 800487c <main+0x8e8>
 800487a:	e7fe      	b.n	800487a <main+0x8e6>
  htim3.Instance = TIM3;
 800487c:	4c63      	ldr	r4, [pc, #396]	; (8004a0c <main+0xa78>)
  HAL_TIM_MspPostInit(&htim2);
 800487e:	4862      	ldr	r0, [pc, #392]	; (8004a08 <main+0xa74>)
 8004880:	f000 fbfa 	bl	8005078 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8004884:	4b62      	ldr	r3, [pc, #392]	; (8004a10 <main+0xa7c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004886:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004888:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800488a:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488c:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488e:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 0;
 8004890:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004894:	f7fe fd8e 	bl	80033b4 <HAL_TIM_Base_Init>
 8004898:	b100      	cbz	r0, 800489c <main+0x908>
 800489a:	e7fe      	b.n	800489a <main+0x906>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800489c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048a0:	a914      	add	r1, sp, #80	; 0x50
 80048a2:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a4:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048a6:	f7fe fe7f 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 80048aa:	b100      	cbz	r0, 80048ae <main+0x91a>
 80048ac:	e7fe      	b.n	80048ac <main+0x918>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7fe fd9a 	bl	80033e8 <HAL_TIM_PWM_Init>
 80048b4:	b100      	cbz	r0, 80048b8 <main+0x924>
 80048b6:	e7fe      	b.n	80048b6 <main+0x922>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048ba:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048bc:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048be:	4620      	mov	r0, r4
 80048c0:	f7fe ff50 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 80048c4:	4602      	mov	r2, r0
 80048c6:	b100      	cbz	r0, 80048ca <main+0x936>
 80048c8:	e7fe      	b.n	80048c8 <main+0x934>
  sConfigOC.Pulse = 0;
 80048ca:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048cc:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048ce:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048d0:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048d2:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048d4:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048d6:	f7fe ffaf 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 80048da:	4605      	mov	r5, r0
 80048dc:	b100      	cbz	r0, 80048e0 <main+0x94c>
 80048de:	e7fe      	b.n	80048de <main+0x94a>
  HAL_TIM_MspPostInit(&htim3);
 80048e0:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 80048e2:	4c4c      	ldr	r4, [pc, #304]	; (8004a14 <main+0xa80>)
  HAL_TIM_MspPostInit(&htim3);
 80048e4:	f000 fbc8 	bl	8005078 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 80048e8:	4b4b      	ldr	r3, [pc, #300]	; (8004a18 <main+0xa84>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80048ea:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ec:	60a5      	str	r5, [r4, #8]
  htim5.Init.Period = 0;
 80048ee:	60e5      	str	r5, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f0:	6125      	str	r5, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048f2:	61a5      	str	r5, [r4, #24]
  htim5.Init.Prescaler = 0;
 80048f4:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80048f8:	f7fe fd5c 	bl	80033b4 <HAL_TIM_Base_Init>
 80048fc:	b100      	cbz	r0, 8004900 <main+0x96c>
 80048fe:	e7fe      	b.n	80048fe <main+0x96a>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004900:	a914      	add	r1, sp, #80	; 0x50
 8004902:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004904:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004906:	f7fe fe4f 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 800490a:	b100      	cbz	r0, 800490e <main+0x97a>
 800490c:	e7fe      	b.n	800490c <main+0x978>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800490e:	4841      	ldr	r0, [pc, #260]	; (8004a14 <main+0xa80>)
 8004910:	f7fe fd6a 	bl	80033e8 <HAL_TIM_PWM_Init>
 8004914:	b100      	cbz	r0, 8004918 <main+0x984>
 8004916:	e7fe      	b.n	8004916 <main+0x982>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004918:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800491a:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800491c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800491e:	483d      	ldr	r0, [pc, #244]	; (8004a14 <main+0xa80>)
 8004920:	f7fe ff20 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8004924:	b100      	cbz	r0, 8004928 <main+0x994>
 8004926:	e7fe      	b.n	8004926 <main+0x992>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004928:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 800492a:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800492c:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800492e:	220c      	movs	r2, #12
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004930:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004932:	a91b      	add	r1, sp, #108	; 0x6c
 8004934:	4837      	ldr	r0, [pc, #220]	; (8004a14 <main+0xa80>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004936:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004938:	f7fe ff7e 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 800493c:	4605      	mov	r5, r0
 800493e:	b100      	cbz	r0, 8004942 <main+0x9ae>
 8004940:	e7fe      	b.n	8004940 <main+0x9ac>
  htim8.Instance = TIM8;
 8004942:	4c36      	ldr	r4, [pc, #216]	; (8004a1c <main+0xa88>)
  HAL_TIM_MspPostInit(&htim5);
 8004944:	4833      	ldr	r0, [pc, #204]	; (8004a14 <main+0xa80>)
 8004946:	f000 fb97 	bl	8005078 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 800494a:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <main+0xa8c>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800494c:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800494e:	60a5      	str	r5, [r4, #8]
  htim8.Init.Period = 0;
 8004950:	60e5      	str	r5, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004952:	6125      	str	r5, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8004954:	6165      	str	r5, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004956:	61a5      	str	r5, [r4, #24]
  htim8.Init.Prescaler = 0;
 8004958:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800495c:	f7fe fd2a 	bl	80033b4 <HAL_TIM_Base_Init>
 8004960:	b100      	cbz	r0, 8004964 <main+0x9d0>
 8004962:	e7fe      	b.n	8004962 <main+0x9ce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004968:	a91b      	add	r1, sp, #108	; 0x6c
 800496a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800496c:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800496e:	f7fe fe1b 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8004972:	b100      	cbz	r0, 8004976 <main+0x9e2>
 8004974:	e7fe      	b.n	8004974 <main+0x9e0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004976:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004978:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800497a:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800497c:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800497e:	4620      	mov	r0, r4
 8004980:	f7fe fef0 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8004984:	b100      	cbz	r0, 8004988 <main+0x9f4>
 8004986:	e7fe      	b.n	8004986 <main+0x9f2>
  htim12.Instance = TIM12;
 8004988:	4c26      	ldr	r4, [pc, #152]	; (8004a24 <main+0xa90>)
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <main+0xa94>)
  htim12.Init.Prescaler = 0;
 800498c:	6060      	str	r0, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800498e:	60a0      	str	r0, [r4, #8]
  htim12.Init.Period = 0;
 8004990:	60e0      	str	r0, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004992:	6120      	str	r0, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004994:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004996:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 8004998:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800499a:	f7fe fd25 	bl	80033e8 <HAL_TIM_PWM_Init>
 800499e:	4602      	mov	r2, r0
 80049a0:	b100      	cbz	r0, 80049a4 <main+0xa10>
 80049a2:	e7fe      	b.n	80049a2 <main+0xa0e>
  sConfigOC.Pulse = 0;
 80049a4:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049a6:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049a8:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049aa:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049ac:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ae:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049b0:	f7fe ff42 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 80049b4:	4605      	mov	r5, r0
 80049b6:	b100      	cbz	r0, 80049ba <main+0xa26>
 80049b8:	e7fe      	b.n	80049b8 <main+0xa24>
  HAL_TIM_MspPostInit(&htim12);
 80049ba:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80049bc:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 80049c0:	f000 fb5a 	bl	8005078 <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c4:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 80049c6:	4819      	ldr	r0, [pc, #100]	; (8004a2c <main+0xa98>)
  huart1.Init.BaudRate = 115200;
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <main+0xa9c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049ca:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049cc:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049ce:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049d0:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049d2:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d4:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049d6:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d8:	6245      	str	r5, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 80049da:	e880 0048 	stmia.w	r0, {r3, r6}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049de:	f7ff f9a2 	bl	8003d26 <HAL_UART_Init>
 80049e2:	b100      	cbz	r0, 80049e6 <main+0xa52>
 80049e4:	e7fe      	b.n	80049e4 <main+0xa50>
  huart6.Instance = USART6;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <main+0xaa0>)
 80049e8:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <main+0xaa4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80049ea:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80049ec:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80049ee:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f0:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80049f2:	61d8      	str	r0, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049f4:	6218      	str	r0, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049f6:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80049f8:	4618      	mov	r0, r3
  huart6.Init.Mode = UART_MODE_TX_RX;
 80049fa:	615c      	str	r4, [r3, #20]
  huart6.Init.BaudRate = 115200;
 80049fc:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a00:	f7ff f991 	bl	8003d26 <HAL_UART_Init>
 8004a04:	b1d0      	cbz	r0, 8004a3c <main+0xaa8>
 8004a06:	e7fe      	b.n	8004a06 <main+0xa72>
 8004a08:	200003f4 	.word	0x200003f4
 8004a0c:	20000144 	.word	0x20000144
 8004a10:	40000400 	.word	0x40000400
 8004a14:	20000104 	.word	0x20000104
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	20000078 	.word	0x20000078
 8004a20:	40010400 	.word	0x40010400
 8004a24:	20000434 	.word	0x20000434
 8004a28:	40001800 	.word	0x40001800
 8004a2c:	20000274 	.word	0x20000274
 8004a30:	40011000 	.word	0x40011000
 8004a34:	20000344 	.word	0x20000344
 8004a38:	40011400 	.word	0x40011400
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2108      	movs	r1, #8
 8004a40:	4827      	ldr	r0, [pc, #156]	; (8004ae0 <main+0xb4c>)
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004a42:	2401      	movs	r4, #1
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004a44:	f7fc fd4a 	bl	80014dc <HAL_GPIO_WritePin>
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8004a48:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <main+0xb50>)
	gpioInitStructure.Pin = GPIO_PIN_1;
 8004a4a:	2502      	movs	r5, #2
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 8004a4c:	a91b      	add	r1, sp, #108	; 0x6c
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 8004a50:	4825      	ldr	r0, [pc, #148]	; (8004ae8 <main+0xb54>)
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8004a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpioInitStructure.Pin = GPIO_PIN_1;
 8004a5a:	951b      	str	r5, [sp, #108]	; 0x6c
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004a60:	941c      	str	r4, [sp, #112]	; 0x70
	gpioInitStructure.Pull = GPIO_PULLUP;
 8004a62:	941d      	str	r4, [sp, #116]	; 0x74
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8004a64:	9314      	str	r3, [sp, #80]	; 0x50
 8004a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
	gpioInitStructure.Speed = GPIO_SPEED_HIGH;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	931e      	str	r3, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 8004a6c:	f7fc fc4c 	bl	8001308 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8004a70:	2200      	movs	r2, #0
 8004a72:	4629      	mov	r1, r5
 8004a74:	481c      	ldr	r0, [pc, #112]	; (8004ae8 <main+0xb54>)
 8004a76:	f7fc fd31 	bl	80014dc <HAL_GPIO_WritePin>
	led_on();
 8004a7a:	f7ff fa0d 	bl	8003e98 <led_on>
	Master_Write(0x00, 0x01);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	4621      	mov	r1, r4
 8004a82:	f000 f83d 	bl	8004b00 <Master_Write>
	HAL_Delay(500);
 8004a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a8a:	f7fc f955 	bl	8000d38 <HAL_Delay>
		led_on();
 8004a8e:	f7ff fa03 	bl	8003e98 <led_on>
		move(1, 30);
 8004a92:	211e      	movs	r1, #30
 8004a94:	2001      	movs	r0, #1
 8004a96:	f000 f8ed 	bl	8004c74 <move>
		HAL_Delay(3000);
 8004a9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004a9e:	f7fc f94b 	bl	8000d38 <HAL_Delay>
		led_on();
 8004aa2:	f7ff f9f9 	bl	8003e98 <led_on>
		turn(1, 30);
 8004aa6:	211e      	movs	r1, #30
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f000 f8fc 	bl	8004ca6 <turn>
		HAL_Delay(3000);
 8004aae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ab2:	f7fc f941 	bl	8000d38 <HAL_Delay>
		move(0, 30);
 8004ab6:	211e      	movs	r1, #30
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f000 f8db 	bl	8004c74 <move>
		HAL_Delay(3000);
 8004abe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ac2:	f7fc f939 	bl	8000d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <main+0xb54>)
 8004acc:	f7fc fd06 	bl	80014dc <HAL_GPIO_WritePin>
		move(1, 0);
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f000 f8ce 	bl	8004c74 <move>
		HAL_Delay(3000);
 8004ad8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004adc:	e7d5      	b.n	8004a8a <main+0xaf6>
 8004ade:	bf00      	nop
 8004ae0:	40022800 	.word	0x40022800
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40022000 	.word	0x40022000

08004aec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004aec:	6802      	ldr	r2, [r0, #0]
 8004aee:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004af4:	f7fc b90e 	b.w	8000d14 <HAL_IncTick>
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40001000 	.word	0x40001000

08004b00 <Master_Write>:

#include "stdbool.h"

#include "motor_control.h"

void Master_Write(uint8_t sadd, uint8_t byte) {
 8004b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t addr_PCA9685 = 0x60;
	uint8_t buffer[5];

	buffer[0] = 0;
	buffer[1] = 0;
	buffer[2] = 0;
 8004b02:	2300      	movs	r3, #0
	buffer[3] = 0;
	buffer[4] = 0;

	buffer[0] = sadd;
	buffer[1] = byte;
 8004b04:	f88d 1009 	strb.w	r1, [sp, #9]

	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 8004b08:	aa02      	add	r2, sp, #8
 8004b0a:	21c0      	movs	r1, #192	; 0xc0
	buffer[2] = 0;
 8004b0c:	f88d 300a 	strb.w	r3, [sp, #10]
	buffer[3] = 0;
 8004b10:	f88d 300b 	strb.w	r3, [sp, #11]
	buffer[4] = 0;
 8004b14:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 8004b18:	2364      	movs	r3, #100	; 0x64
	buffer[0] = sadd;
 8004b1a:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2302      	movs	r3, #2
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <Master_Write+0x30>)
 8004b24:	f7fc fe3c 	bl	80017a0 <HAL_I2C_Master_Transmit>
}
 8004b28:	b005      	add	sp, #20
 8004b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b2e:	bf00      	nop
 8004b30:	200000b8 	.word	0x200000b8

08004b34 <motor_write>:

void motor_write(uint8_t motor, bool direction, uint16_t speed) {
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	4605      	mov	r5, r0
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	460c      	mov	r4, r1

	uint16_t scaled_speed;
	uint8_t subadd_in1, subadd_in2, subadd_pwm;
	uint8_t scaled_lsb, scaled_msb;

	if (speed == 0) {
 8004b3e:	b19a      	cbz	r2, 8004b68 <motor_write+0x34>
		// This is stop
		scaled_speed = 0;
	} else {
		// Scale and zero 4 MSB
		scaled_speed = ((int) ((((float) speed) / 100.0) * 4096)) & 0x0FFF;
 8004b40:	ee07 2a90 	vmov	s15, r2
 8004b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b48:	ee17 0a90 	vmov	r0, s15
 8004b4c:	f7fb fcc0 	bl	80004d0 <__aeabi_f2d>
 8004b50:	2200      	movs	r2, #0
 8004b52:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <motor_write+0x12c>)
 8004b54:	f7fb fe3a 	bl	80007cc <__aeabi_ddiv>
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <motor_write+0x130>)
 8004b5c:	f7fb fd0c 	bl	8000578 <__aeabi_dmul>
 8004b60:	f7fb ff1c 	bl	800099c <__aeabi_d2iz>
 8004b64:	f3c0 020b 	ubfx	r2, r0, #0, #12
	}

	scaled_lsb = scaled_speed & 0x00FF;
 8004b68:	b2d3      	uxtb	r3, r2
 8004b6a:	9300      	str	r3, [sp, #0]
	scaled_msb = scaled_speed >> 8;
 8004b6c:	0a13      	lsrs	r3, r2, #8
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	1eab      	subs	r3, r5, #2
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d84e      	bhi.n	8004c16 <motor_write+0xe2>
 8004b78:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <motor_write+0x134>)
 8004b7a:	493c      	ldr	r1, [pc, #240]	; (8004c6c <motor_write+0x138>)
 8004b7c:	5cd0      	ldrb	r0, [r2, r3]
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <motor_write+0x13c>)
 8004b80:	5ccd      	ldrb	r5, [r1, r3]
 8004b82:	5cd6      	ldrb	r6, [r2, r3]
 8004b84:	1cf3      	adds	r3, r6, #3
 8004b86:	f100 0b01 	add.w	fp, r0, #1
 8004b8a:	f100 0a02 	add.w	sl, r0, #2
 8004b8e:	f100 0903 	add.w	r9, r0, #3
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	1c6b      	adds	r3, r5, #1
 8004b96:	f106 0801 	add.w	r8, r6, #1
 8004b9a:	1cb7      	adds	r7, r6, #2
 8004b9c:	9303      	str	r3, [sp, #12]
		subadd_in1 = 0x2E;
		subadd_in2 = 0x2A;
		subadd_pwm = 0x26;
	}

	if (direction) {
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	d03d      	beq.n	8004c1e <motor_write+0xea>

		// Forward
		// IN1 = H
		Master_Write(subadd_in1 + 0, 0x00);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f7ff ffac 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 1, 0x10);
 8004ba8:	2110      	movs	r1, #16
 8004baa:	fa5f f08b 	uxtb.w	r0, fp
 8004bae:	f7ff ffa7 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 2, 0x00);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	fa5f f08a 	uxtb.w	r0, sl
 8004bb8:	f7ff ffa2 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 3, 0x00);
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	fa5f f089 	uxtb.w	r0, r9
 8004bc2:	f7ff ff9d 	bl	8004b00 <Master_Write>

		// IN2 = L
		Master_Write(subadd_in2 + 0, 0x00);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f7ff ff99 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 1, 0x00);
 8004bce:	2100      	movs	r1, #0
 8004bd0:	fa5f f088 	uxtb.w	r0, r8
 8004bd4:	f7ff ff94 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 2, 0x00);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	b2f8      	uxtb	r0, r7
 8004bdc:	f7ff ff90 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 3, 0x10);
 8004be0:	2110      	movs	r1, #16
 8004be2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004be6:	f7ff ff8b 	bl	8004b00 <Master_Write>

		// PWM = scaled_speed
		Master_Write(subadd_pwm + 0, 0x00);
 8004bea:	4628      	mov	r0, r5
 8004bec:	2100      	movs	r1, #0
 8004bee:	f7ff ff87 	bl	8004b00 <Master_Write>
		Master_Write(subadd_pwm + 1, 0x00);
 8004bf2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	f7ff ff82 	bl	8004b00 <Master_Write>
		Master_Write(subadd_pwm + 2, scaled_lsb);
 8004bfc:	1ca8      	adds	r0, r5, #2
 8004bfe:	9900      	ldr	r1, [sp, #0]
 8004c00:	b2c0      	uxtb	r0, r0
 8004c02:	f7ff ff7d 	bl	8004b00 <Master_Write>
		Master_Write(subadd_pwm + 3, scaled_msb);
 8004c06:	1ce8      	adds	r0, r5, #3
 8004c08:	9901      	ldr	r1, [sp, #4]
 8004c0a:	b2c0      	uxtb	r0, r0
		Master_Write(subadd_pwm + 1, 0x00);
		Master_Write(subadd_pwm + 2, scaled_lsb);
		Master_Write(subadd_pwm + 3, scaled_msb);
	}

}
 8004c0c:	b005      	add	sp, #20
 8004c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Master_Write(subadd_pwm + 3, scaled_msb);
 8004c12:	f7ff bf75 	b.w	8004b00 <Master_Write>
	scaled_msb = scaled_speed >> 8;
 8004c16:	2526      	movs	r5, #38	; 0x26
 8004c18:	262a      	movs	r6, #42	; 0x2a
 8004c1a:	202e      	movs	r0, #46	; 0x2e
 8004c1c:	e7b2      	b.n	8004b84 <motor_write+0x50>
		Master_Write(subadd_in1 + 0, 0x00);
 8004c1e:	4621      	mov	r1, r4
 8004c20:	f7ff ff6e 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 1, 0x00);
 8004c24:	4621      	mov	r1, r4
 8004c26:	fa5f f08b 	uxtb.w	r0, fp
 8004c2a:	f7ff ff69 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 2, 0x00);
 8004c2e:	4621      	mov	r1, r4
 8004c30:	fa5f f08a 	uxtb.w	r0, sl
 8004c34:	f7ff ff64 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in1 + 3, 0x10);
 8004c38:	2110      	movs	r1, #16
 8004c3a:	fa5f f089 	uxtb.w	r0, r9
 8004c3e:	f7ff ff5f 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 0, 0x00);
 8004c42:	4621      	mov	r1, r4
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7ff ff5b 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 1, 0x10);
 8004c4a:	2110      	movs	r1, #16
 8004c4c:	fa5f f088 	uxtb.w	r0, r8
 8004c50:	f7ff ff56 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 2, 0x00);
 8004c54:	4621      	mov	r1, r4
 8004c56:	b2f8      	uxtb	r0, r7
 8004c58:	f7ff ff52 	bl	8004b00 <Master_Write>
		Master_Write(subadd_in2 + 3, 0x00);
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	e7c0      	b.n	8004be2 <motor_write+0xae>
 8004c60:	40590000 	.word	0x40590000
 8004c64:	40b00000 	.word	0x40b00000
 8004c68:	08005465 	.word	0x08005465
 8004c6c:	0800546b 	.word	0x0800546b
 8004c70:	08005468 	.word	0x08005468

08004c74 <move>:

void move(bool direction, uint16_t speed) {
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1

	motor_write(1, direction, speed);
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	4601      	mov	r1, r0
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f7ff ff58 	bl	8004b34 <motor_write>
	motor_write(2, direction, speed);
 8004c84:	462a      	mov	r2, r5
 8004c86:	4621      	mov	r1, r4
 8004c88:	2002      	movs	r0, #2
 8004c8a:	f7ff ff53 	bl	8004b34 <motor_write>
	motor_write(3, direction, speed);
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4621      	mov	r1, r4
 8004c92:	2003      	movs	r0, #3
 8004c94:	f7ff ff4e 	bl	8004b34 <motor_write>
	motor_write(4, direction, speed);
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	2004      	movs	r0, #4

}
 8004c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	motor_write(4, direction, speed);
 8004ca2:	f7ff bf47 	b.w	8004b34 <motor_write>

08004ca6 <turn>:

void turn(bool direction, uint16_t speed) {
 8004ca6:	b538      	push	{r3, r4, r5, lr}

	if (direction) {
		motor_write(1, true, speed);
 8004ca8:	460a      	mov	r2, r1
void turn(bool direction, uint16_t speed) {
 8004caa:	460c      	mov	r4, r1
	if (direction) {
 8004cac:	4605      	mov	r5, r0
 8004cae:	b1a0      	cbz	r0, 8004cda <turn+0x34>
		motor_write(1, true, speed);
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4608      	mov	r0, r1
 8004cb4:	f7ff ff3e 	bl	8004b34 <motor_write>
		motor_write(2, false, speed);
 8004cb8:	4622      	mov	r2, r4
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7ff ff39 	bl	8004b34 <motor_write>
		motor_write(4, true, speed);
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	2004      	movs	r0, #4
 8004cc8:	f7ff ff34 	bl	8004b34 <motor_write>
		motor_write(3, false, speed);
 8004ccc:	4622      	mov	r2, r4
 8004cce:	2100      	movs	r1, #0
	} else {
		motor_write(1, false, speed);
		motor_write(2, true, speed);
		motor_write(4, false, speed);
		motor_write(3, true, speed);
 8004cd0:	2003      	movs	r0, #3
	}

}
 8004cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		motor_write(3, true, speed);
 8004cd6:	f7ff bf2d 	b.w	8004b34 <motor_write>
		motor_write(1, false, speed);
 8004cda:	4601      	mov	r1, r0
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7ff ff29 	bl	8004b34 <motor_write>
		motor_write(2, true, speed);
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	f7ff ff24 	bl	8004b34 <motor_write>
		motor_write(4, false, speed);
 8004cec:	4622      	mov	r2, r4
 8004cee:	4629      	mov	r1, r5
 8004cf0:	2004      	movs	r0, #4
 8004cf2:	f7ff ff1f 	bl	8004b34 <motor_write>
		motor_write(3, true, speed);
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	e7e9      	b.n	8004cd0 <turn+0x2a>

08004cfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <HAL_MspInit+0x88>)
{
 8004cfe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d02:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d26:	f7fc f95d 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f06f 000b 	mvn.w	r0, #11
 8004d30:	4611      	mov	r1, r2
 8004d32:	f7fc f969 	bl	8001008 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	f06f 000a 	mvn.w	r0, #10
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f7fc f963 	bl	8001008 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	f06f 0009 	mvn.w	r0, #9
 8004d48:	4611      	mov	r1, r2
 8004d4a:	f7fc f95d 	bl	8001008 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f06f 0004 	mvn.w	r0, #4
 8004d54:	4611      	mov	r1, r2
 8004d56:	f7fc f957 	bl	8001008 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f06f 0003 	mvn.w	r0, #3
 8004d60:	4611      	mov	r1, r2
 8004d62:	f7fc f951 	bl	8001008 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	f06f 0001 	mvn.w	r0, #1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	f7fc f94b 	bl	8001008 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004d72:	2200      	movs	r2, #0
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	4611      	mov	r1, r2
 8004d7a:	f7fc f945 	bl	8001008 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d7e:	b003      	add	sp, #12
 8004d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8004d88:	6802      	ldr	r2, [r0, #0]
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_ADC_MspInit+0x4c>)
 8004d8c:	429a      	cmp	r2, r3
{
 8004d8e:	b530      	push	{r4, r5, lr}
 8004d90:	b087      	sub	sp, #28
  if(hadc->Instance==ADC3)
 8004d92:	d11d      	bne.n	8004dd0 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004d94:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d98:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d9c:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da6:	645a      	str	r2, [r3, #68]	; 0x44
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004daa:	9502      	str	r5, [sp, #8]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8004db6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8004dba:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004dbc:	f7fc faa4 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8004dc0:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8004dc2:	a901      	add	r1, sp, #4
 8004dc4:	4805      	ldr	r0, [pc, #20]	; (8004ddc <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8004dc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dc8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dca:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8004dcc:	f7fc fa9c 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004dd0:	b007      	add	sp, #28
 8004dd2:	bd30      	pop	{r4, r5, pc}
 8004dd4:	40012200 	.word	0x40012200
 8004dd8:	40021400 	.word	0x40021400
 8004ddc:	40020000 	.word	0x40020000

08004de0 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004de0:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_DMA2D_MspInit+0x38>)
 8004de4:	6802      	ldr	r2, [r0, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d112      	bne.n	8004e10 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004dea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004dee:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004df8:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004dfc:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004e06:	f7fc f8ff 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004e0a:	205a      	movs	r0, #90	; 0x5a
 8004e0c:	f7fc f934 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004e10:	b003      	add	sp, #12
 8004e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e16:	bf00      	nop
 8004e18:	4002b000 	.word	0x4002b000

08004e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004e1c:	6803      	ldr	r3, [r0, #0]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <HAL_I2C_MspInit+0x9c>)
 8004e20:	4293      	cmp	r3, r2
{
 8004e22:	b510      	push	{r4, lr}
 8004e24:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8004e26:	d12a      	bne.n	8004e7e <HAL_I2C_MspInit+0x62>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004e28:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2c:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2e:	a903      	add	r1, sp, #12
 8004e30:	4822      	ldr	r0, [pc, #136]	; (8004ebc <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004e32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e34:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e36:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e42:	f7fc fa61 	bl	8001308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_I2C_MspInit+0xa4>)
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004e48:	4621      	mov	r1, r4
 8004e4a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004e54:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004e60:	f7fc f8d2 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004e64:	201f      	movs	r0, #31
 8004e66:	f7fc f907 	bl	8001078 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004e6a:	2020      	movs	r0, #32
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4621      	mov	r1, r4
 8004e70:	f7fc f8ca 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004e74:	2020      	movs	r0, #32
 8004e76:	f7fc f8ff 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004e7a:	b008      	add	sp, #32
 8004e7c:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 8004e7e:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <HAL_I2C_MspInit+0xa8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d1fa      	bne.n	8004e7a <HAL_I2C_MspInit+0x5e>
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004e84:	f44f 73c0 	mov.w	r3, #384	; 0x180
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e88:	a903      	add	r1, sp, #12
 8004e8a:	480f      	ldr	r0, [pc, #60]	; (8004ec8 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e8e:	2312      	movs	r3, #18
 8004e90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e92:	2301      	movs	r3, #1
 8004e94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e96:	2303      	movs	r3, #3
 8004e98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e9e:	f7fc fa33 	bl	8001308 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_I2C_MspInit+0xa4>)
 8004ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb2:	9302      	str	r3, [sp, #8]
 8004eb4:	9b02      	ldr	r3, [sp, #8]
}
 8004eb6:	e7e0      	b.n	8004e7a <HAL_I2C_MspInit+0x5e>
 8004eb8:	40005400 	.word	0x40005400
 8004ebc:	40020400 	.word	0x40020400
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40005c00 	.word	0x40005c00
 8004ec8:	40021c00 	.word	0x40021c00

08004ecc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8004ecc:	6802      	ldr	r2, [r0, #0]
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_LTDC_MspInit+0xa8>)
 8004ed0:	429a      	cmp	r2, r3
{
 8004ed2:	b570      	push	{r4, r5, r6, lr}
 8004ed4:	b086      	sub	sp, #24
  if(hltdc->Instance==LTDC)
 8004ed6:	d14b      	bne.n	8004f70 <HAL_LTDC_MspInit+0xa4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ed8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ede:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ee0:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004ee4:	a901      	add	r1, sp, #4
 8004ee6:	4824      	ldr	r0, [pc, #144]	; (8004f78 <HAL_LTDC_MspInit+0xac>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ee8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	9502      	str	r5, [sp, #8]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004efe:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f00:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004f02:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004f04:	f7fc fa00 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8004f08:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004f0c:	a901      	add	r1, sp, #4
 8004f0e:	481b      	ldr	r0, [pc, #108]	; (8004f7c <HAL_LTDC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8004f10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f12:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f18:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004f1a:	f7fc f9f5 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8004f1e:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004f20:	a901      	add	r1, sp, #4
 8004f22:	4817      	ldr	r0, [pc, #92]	; (8004f80 <HAL_LTDC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8004f24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f28:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f2c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004f2e:	f7fc f9eb 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004f36:	a901      	add	r1, sp, #4
 8004f38:	4812      	ldr	r0, [pc, #72]	; (8004f84 <HAL_LTDC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004f3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f3c:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f44:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004f46:	f7fc f9df 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004f4a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f4e:	a901      	add	r1, sp, #4
 8004f50:	480d      	ldr	r0, [pc, #52]	; (8004f88 <HAL_LTDC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004f52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f58:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f5a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f5c:	f7fc f9d4 	bl	8001308 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8004f60:	2058      	movs	r0, #88	; 0x58
 8004f62:	4622      	mov	r2, r4
 8004f64:	4621      	mov	r1, r4
 8004f66:	f7fc f84f 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004f6a:	2058      	movs	r0, #88	; 0x58
 8004f6c:	f7fc f884 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004f70:	b006      	add	sp, #24
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	40016800 	.word	0x40016800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40022400 	.word	0x40022400
 8004f80:	40022800 	.word	0x40022800
 8004f84:	40021800 	.word	0x40021800
 8004f88:	40022000 	.word	0x40022000

08004f8c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8004f8c:	6802      	ldr	r2, [r0, #0]
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <HAL_RTC_MspInit+0x14>)
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d104      	bne.n	8004f9e <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f94:	4a03      	ldr	r2, [pc, #12]	; (8004fa4 <HAL_RTC_MspInit+0x18>)
 8004f96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9e:	4770      	bx	lr
 8004fa0:	40002800 	.word	0x40002800
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8004fa8:	6803      	ldr	r3, [r0, #0]
{
 8004faa:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8004fac:	4a23      	ldr	r2, [pc, #140]	; (800503c <HAL_TIM_Base_MspInit+0x94>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10b      	bne.n	8004fca <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_TIM_Base_MspInit+0x98>)
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004fc6:	b006      	add	sp, #24
 8004fc8:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fd0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	9302      	str	r3, [sp, #8]
 8004fe4:	9b02      	ldr	r3, [sp, #8]
 8004fe6:	e7ee      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8004fe8:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_TIM_Base_MspInit+0x9c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10a      	bne.n	8005004 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_TIM_Base_MspInit+0x98>)
 8004ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff2:	f042 0202 	orr.w	r2, r2, #2
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	e7e0      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 8005004:	4a10      	ldr	r2, [pc, #64]	; (8005048 <HAL_TIM_Base_MspInit+0xa0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10a      	bne.n	8005020 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <HAL_TIM_Base_MspInit+0x98>)
 800500c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	9b04      	ldr	r3, [sp, #16]
 800501e:	e7d2      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_TIM_Base_MspInit+0xa4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d1cf      	bne.n	8004fc6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_TIM_Base_MspInit+0x98>)
 8005028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502a:	f042 0202 	orr.w	r2, r2, #2
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	9305      	str	r3, [sp, #20]
 8005038:	9b05      	ldr	r3, [sp, #20]
}
 800503a:	e7c4      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1e>
 800503c:	40010000 	.word	0x40010000
 8005040:	40023800 	.word	0x40023800
 8005044:	40000400 	.word	0x40000400
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40010400 	.word	0x40010400

08005050 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 8005050:	6802      	ldr	r2, [r0, #0]
{
 8005052:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_TIM_PWM_MspInit+0x24>)
 8005056:	429a      	cmp	r2, r3
 8005058:	d10a      	bne.n	8005070 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800505a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800505e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005070:	b002      	add	sp, #8
 8005072:	4770      	bx	lr
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800507a:	6803      	ldr	r3, [r0, #0]
 800507c:	4a22      	ldr	r2, [pc, #136]	; (8005108 <HAL_TIM_MspPostInit+0x90>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d110      	bne.n	80050a4 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8005082:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8005086:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800508a:	a901      	add	r1, sp, #4
 800508c:	481f      	ldr	r0, [pc, #124]	; (800510c <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005096:	2301      	movs	r3, #1
 8005098:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800509a:	f7fc f935 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800509e:	b007      	add	sp, #28
 80050a0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d102      	bne.n	80050b0 <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	e7ea      	b.n	8005086 <HAL_TIM_MspPostInit+0xe>
  else if(htim->Instance==TIM3)
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_TIM_MspPostInit+0x98>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10a      	bne.n	80050cc <HAL_TIM_MspPostInit+0x54>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80050b6:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80050ba:	a901      	add	r1, sp, #4
 80050bc:	4815      	ldr	r0, [pc, #84]	; (8005114 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80050be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	e7e6      	b.n	800509a <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM5)
 80050cc:	4a12      	ldr	r2, [pc, #72]	; (8005118 <HAL_TIM_MspPostInit+0xa0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10a      	bne.n	80050e8 <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80050d2:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 80050d6:	a901      	add	r1, sp, #4
 80050d8:	4810      	ldr	r0, [pc, #64]	; (800511c <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80050da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050dc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050de:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	e7d8      	b.n	800509a <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM12)
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <HAL_TIM_MspPostInit+0xa8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d1d7      	bne.n	800509e <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80050ee:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80050f0:	a901      	add	r1, sp, #4
 80050f2:	480c      	ldr	r0, [pc, #48]	; (8005124 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80050f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f6:	2302      	movs	r3, #2
 80050f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005100:	2309      	movs	r3, #9
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	e7c9      	b.n	800509a <HAL_TIM_MspPostInit+0x22>
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40020000 	.word	0x40020000
 8005110:	40000400 	.word	0x40000400
 8005114:	40020400 	.word	0x40020400
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40022000 	.word	0x40022000
 8005120:	40001800 	.word	0x40001800
 8005124:	40021c00 	.word	0x40021c00

08005128 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005128:	6803      	ldr	r3, [r0, #0]
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_UART_MspInit+0x88>)
 800512c:	4293      	cmp	r3, r2
{
 800512e:	b570      	push	{r4, r5, r6, lr}
 8005130:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8005132:	d123      	bne.n	800517c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <HAL_UART_MspInit+0x8c>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005138:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800513a:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800513c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800513e:	a903      	add	r1, sp, #12
 8005140:	481d      	ldr	r0, [pc, #116]	; (80051b8 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005142:	f042 0210 	orr.w	r2, r2, #16
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 800514c:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005152:	9406      	str	r4, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005158:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800515a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800515c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800515e:	f7fc f8d3 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005162:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005166:	a903      	add	r1, sp, #12
 8005168:	4814      	ldr	r0, [pc, #80]	; (80051bc <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800516a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005170:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005172:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005174:	f7fc f8c8 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005178:	b008      	add	sp, #32
 800517a:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 800517c:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <HAL_UART_MspInit+0x98>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d1fa      	bne.n	8005178 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_UART_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005184:	a903      	add	r1, sp, #12
 8005186:	480f      	ldr	r0, [pc, #60]	; (80051c4 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8005188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518a:	f042 0220 	orr.w	r2, r2, #32
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	9302      	str	r3, [sp, #8]
 8005198:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800519a:	23c0      	movs	r3, #192	; 0xc0
 800519c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80051aa:	2308      	movs	r3, #8
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	e7e1      	b.n	8005174 <HAL_UART_MspInit+0x4c>
 80051b0:	40011000 	.word	0x40011000
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40020400 	.word	0x40020400
 80051bc:	40020000 	.word	0x40020000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	40020800 	.word	0x40020800

080051c8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80051ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 80051cc:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80051ce:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	d14e      	bne.n	8005272 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 80051d4:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d8:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051da:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 80051dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051de:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80051e0:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051e2:	4827      	ldr	r0, [pc, #156]	; (8005280 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ee:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80051f0:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f6:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80051fc:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005200:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8005202:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005204:	f7fc f880 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8005208:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800520c:	a901      	add	r1, sp, #4
 800520e:	481d      	ldr	r0, [pc, #116]	; (8005284 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8005210:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005216:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005218:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800521a:	f7fc f875 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800521e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005222:	a901      	add	r1, sp, #4
 8005224:	4818      	ldr	r0, [pc, #96]	; (8005288 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8005226:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800522e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005230:	f7fc f86a 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8005234:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005238:	a901      	add	r1, sp, #4
 800523a:	4814      	ldr	r0, [pc, #80]	; (800528c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800523c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005242:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005244:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005246:	f7fc f85f 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800524a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800524c:	a901      	add	r1, sp, #4
 800524e:	4810      	ldr	r0, [pc, #64]	; (8005290 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005250:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005252:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005254:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005256:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005258:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800525a:	f7fc f855 	bl	8001308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800525e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005260:	a901      	add	r1, sp, #4
 8005262:	480c      	ldr	r0, [pc, #48]	; (8005294 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005264:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005266:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800526a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800526c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800526e:	f7fc f84b 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005272:	b007      	add	sp, #28
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005276:	bf00      	nop
 8005278:	20000024 	.word	0x20000024
 800527c:	40023800 	.word	0x40023800
 8005280:	40021000 	.word	0x40021000
 8005284:	40021800 	.word	0x40021800
 8005288:	40020c00 	.word	0x40020c00
 800528c:	40021400 	.word	0x40021400
 8005290:	40021c00 	.word	0x40021c00
 8005294:	40020800 	.word	0x40020800

08005298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005298:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800529a:	4601      	mov	r1, r0
{
 800529c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800529e:	2200      	movs	r2, #0
 80052a0:	2036      	movs	r0, #54	; 0x36
 80052a2:	f7fb feb1 	bl	8001008 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80052a6:	2036      	movs	r0, #54	; 0x36
 80052a8:	f7fb fee6 	bl	8001078 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052ae:	a901      	add	r1, sp, #4
 80052b0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80052b4:	4c13      	ldr	r4, [pc, #76]	; (8005304 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052b6:	f042 0210 	orr.w	r2, r2, #16
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052c6:	f7fd fa0b 	bl	80026e0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fd f9e9 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80052d0:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 80052d2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80052d4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80052d8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <HAL_InitTick+0x74>)
 80052dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80052e0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80052e2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80052e4:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80052e6:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80052e8:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ea:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80052ec:	f7fe f862 	bl	80033b4 <HAL_TIM_Base_Init>
 80052f0:	b920      	cbnz	r0, 80052fc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fd ff37 	bl	8003166 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80052f8:	b008      	add	sp, #32
 80052fa:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80052fc:	2001      	movs	r0, #1
 80052fe:	e7fb      	b.n	80052f8 <HAL_InitTick+0x60>
 8005300:	40023800 	.word	0x40023800
 8005304:	200004a8 	.word	0x200004a8
 8005308:	40001000 	.word	0x40001000
 800530c:	000f4240 	.word	0x000f4240

08005310 <SVC_Handler>:
 8005310:	4770      	bx	lr

08005312 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005312:	4770      	bx	lr

08005314 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8005314:	f7fb bedf 	b.w	80010d6 <HAL_SYSTICK_IRQHandler>

08005318 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <I2C1_EV_IRQHandler+0x8>)
 800531a:	f7fc bad9 	b.w	80018d0 <HAL_I2C_EV_IRQHandler>
 800531e:	bf00      	nop
 8005320:	200000b8 	.word	0x200000b8

08005324 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <I2C1_ER_IRQHandler+0x8>)
 8005326:	f7fc bd01 	b.w	8001d2c <HAL_I2C_ER_IRQHandler>
 800532a:	bf00      	nop
 800532c:	200000b8 	.word	0x200000b8

08005330 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005330:	4801      	ldr	r0, [pc, #4]	; (8005338 <TIM6_DAC_IRQHandler+0x8>)
 8005332:	f7fd bf27 	b.w	8003184 <HAL_TIM_IRQHandler>
 8005336:	bf00      	nop
 8005338:	200004a8 	.word	0x200004a8

0800533c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <LTDC_IRQHandler+0x8>)
 800533e:	f7fc be84 	b.w	800204a <HAL_LTDC_IRQHandler>
 8005342:	bf00      	nop
 8005344:	20000184 	.word	0x20000184

08005348 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <DMA2D_IRQHandler+0x8>)
 800534a:	f7fb bf08 	b.w	800115e <HAL_DMA2D_IRQHandler>
 800534e:	bf00      	nop
 8005350:	200003b4 	.word	0x200003b4

08005354 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005354:	490f      	ldr	r1, [pc, #60]	; (8005394 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005356:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005358:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800535c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <SystemInit+0x44>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800536e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005376:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800537a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800537c:	4a07      	ldr	r2, [pc, #28]	; (800539c <SystemInit+0x48>)
 800537e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005386:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005388:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800538a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800538e:	608b      	str	r3, [r1, #8]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	40023800 	.word	0x40023800
 800539c:	24003010 	.word	0x24003010

080053a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80053a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053a6:	e003      	b.n	80053b0 <LoopCopyDataInit>

080053a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053ae:	3104      	adds	r1, #4

080053b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053b0:	480b      	ldr	r0, [pc, #44]	; (80053e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053b8:	d3f6      	bcc.n	80053a8 <CopyDataInit>
  ldr  r2, =_sbss
 80053ba:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053bc:	e002      	b.n	80053c4 <LoopFillZerobss>

080053be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053c0:	f842 3b04 	str.w	r3, [r2], #4

080053c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053c8:	d3f9      	bcc.n	80053be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053ca:	f7ff ffc3 	bl	8005354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053ce:	f000 f811 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053d2:	f7fe fddf 	bl	8003f94 <main>
  bx  lr    
 80053d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053d8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80053dc:	08005498 	.word	0x08005498
  ldr  r0, =_sdata
 80053e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053e4:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80053e8:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80053ec:	200004e8 	.word	0x200004e8

080053f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053f0:	e7fe      	b.n	80053f0 <ADC_IRQHandler>
	...

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4e0d      	ldr	r6, [pc, #52]	; (800542c <__libc_init_array+0x38>)
 80053f8:	4c0d      	ldr	r4, [pc, #52]	; (8005430 <__libc_init_array+0x3c>)
 80053fa:	1ba4      	subs	r4, r4, r6
 80053fc:	10a4      	asrs	r4, r4, #2
 80053fe:	2500      	movs	r5, #0
 8005400:	42a5      	cmp	r5, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	4e0b      	ldr	r6, [pc, #44]	; (8005434 <__libc_init_array+0x40>)
 8005406:	4c0c      	ldr	r4, [pc, #48]	; (8005438 <__libc_init_array+0x44>)
 8005408:	f000 f818 	bl	800543c <_init>
 800540c:	1ba4      	subs	r4, r4, r6
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	2500      	movs	r5, #0
 8005412:	42a5      	cmp	r5, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800541c:	4798      	blx	r3
 800541e:	3501      	adds	r5, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005426:	4798      	blx	r3
 8005428:	3501      	adds	r5, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	08005490 	.word	0x08005490
 8005430:	08005490 	.word	0x08005490
 8005434:	08005490 	.word	0x08005490
 8005438:	08005494 	.word	0x08005494

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
