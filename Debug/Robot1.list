
Robot1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b80  08006c0c  08006c0c  00016c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000073c  20000074  08008810  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007b0  08008810  000207b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032aed  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005175  00000000  00000000  00052b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011e06  00000000  00000000  00057d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001530  00000000  00000000  00069b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c80  00000000  00000000  0006b040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d2fe  00000000  00000000  0006ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007dc9  00000000  00000000  00079fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00081d87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004510  00000000  00000000  00081e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bf4 	.word	0x08006bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006bf4 	.word	0x08006bf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b97a 	b.w	8000da0 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	468c      	mov	ip, r1
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	9e08      	ldr	r6, [sp, #32]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d151      	bne.n	8000b78 <__udivmoddi4+0xb4>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d96d      	bls.n	8000bb6 <__udivmoddi4+0xf2>
 8000ada:	fab2 fe82 	clz	lr, r2
 8000ade:	f1be 0f00 	cmp.w	lr, #0
 8000ae2:	d00b      	beq.n	8000afc <__udivmoddi4+0x38>
 8000ae4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ae8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000aec:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000af0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000af4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000af8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000afc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b00:	0c25      	lsrs	r5, r4, #16
 8000b02:	fbbc f8fa 	udiv	r8, ip, sl
 8000b06:	fa1f f987 	uxth.w	r9, r7
 8000b0a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b0e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b12:	fb08 f309 	mul.w	r3, r8, r9
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x6c>
 8000b1a:	19ed      	adds	r5, r5, r7
 8000b1c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b20:	f080 8123 	bcs.w	8000d6a <__udivmoddi4+0x2a6>
 8000b24:	42ab      	cmp	r3, r5
 8000b26:	f240 8120 	bls.w	8000d6a <__udivmoddi4+0x2a6>
 8000b2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2e:	443d      	add	r5, r7
 8000b30:	1aed      	subs	r5, r5, r3
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b38:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b40:	fb00 f909 	mul.w	r9, r0, r9
 8000b44:	45a1      	cmp	r9, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x98>
 8000b48:	19e4      	adds	r4, r4, r7
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4e:	f080 810a 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000b52:	45a1      	cmp	r9, r4
 8000b54:	f240 8107 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	eba4 0409 	sub.w	r4, r4, r9
 8000b60:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b64:	2100      	movs	r1, #0
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d061      	beq.n	8000c2e <__udivmoddi4+0x16a>
 8000b6a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b6e:	2300      	movs	r3, #0
 8000b70:	6034      	str	r4, [r6, #0]
 8000b72:	6073      	str	r3, [r6, #4]
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	d907      	bls.n	8000b8c <__udivmoddi4+0xc8>
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d054      	beq.n	8000c2a <__udivmoddi4+0x166>
 8000b80:	2100      	movs	r1, #0
 8000b82:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b86:	4608      	mov	r0, r1
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	fab3 f183 	clz	r1, r3
 8000b90:	2900      	cmp	r1, #0
 8000b92:	f040 808e 	bne.w	8000cb2 <__udivmoddi4+0x1ee>
 8000b96:	42ab      	cmp	r3, r5
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xdc>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80fa 	bhi.w	8000d94 <__udivmoddi4+0x2d0>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	46ac      	mov	ip, r5
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d03f      	beq.n	8000c2e <__udivmoddi4+0x16a>
 8000bae:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b912      	cbnz	r2, 8000bbe <__udivmoddi4+0xfa>
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bbe:	fab7 fe87 	clz	lr, r7
 8000bc2:	f1be 0f00 	cmp.w	lr, #0
 8000bc6:	d134      	bne.n	8000c32 <__udivmoddi4+0x16e>
 8000bc8:	1beb      	subs	r3, r5, r7
 8000bca:	0c3a      	lsrs	r2, r7, #16
 8000bcc:	fa1f fc87 	uxth.w	ip, r7
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bd6:	0c25      	lsrs	r5, r4, #16
 8000bd8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bdc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000be0:	fb0c f308 	mul.w	r3, ip, r8
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x134>
 8000be8:	19ed      	adds	r5, r5, r7
 8000bea:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x132>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	f200 80d1 	bhi.w	8000d98 <__udivmoddi4+0x2d4>
 8000bf6:	4680      	mov	r8, r0
 8000bf8:	1aed      	subs	r5, r5, r3
 8000bfa:	b2a3      	uxth	r3, r4
 8000bfc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c00:	fb02 5510 	mls	r5, r2, r0, r5
 8000c04:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c08:	fb0c fc00 	mul.w	ip, ip, r0
 8000c0c:	45a4      	cmp	ip, r4
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x15c>
 8000c10:	19e4      	adds	r4, r4, r7
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x15a>
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	f200 80b8 	bhi.w	8000d8e <__udivmoddi4+0x2ca>
 8000c1e:	4618      	mov	r0, r3
 8000c20:	eba4 040c 	sub.w	r4, r4, ip
 8000c24:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c28:	e79d      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000c2a:	4631      	mov	r1, r6
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	f1ce 0420 	rsb	r4, lr, #32
 8000c36:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c3a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c3e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c42:	0c3a      	lsrs	r2, r7, #16
 8000c44:	fa25 f404 	lsr.w	r4, r5, r4
 8000c48:	ea48 0803 	orr.w	r8, r8, r3
 8000c4c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c50:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c54:	fb02 4411 	mls	r4, r2, r1, r4
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c60:	fb01 f30c 	mul.w	r3, r1, ip
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c6a:	d909      	bls.n	8000c80 <__udivmoddi4+0x1bc>
 8000c6c:	19ed      	adds	r5, r5, r7
 8000c6e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c72:	f080 808a 	bcs.w	8000d8a <__udivmoddi4+0x2c6>
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	f240 8087 	bls.w	8000d8a <__udivmoddi4+0x2c6>
 8000c7c:	3902      	subs	r1, #2
 8000c7e:	443d      	add	r5, r7
 8000c80:	1aeb      	subs	r3, r5, r3
 8000c82:	fa1f f588 	uxth.w	r5, r8
 8000c86:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c8a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c8e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c92:	fb00 f30c 	mul.w	r3, r0, ip
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x1e6>
 8000c9a:	19ed      	adds	r5, r5, r7
 8000c9c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca0:	d26f      	bcs.n	8000d82 <__udivmoddi4+0x2be>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d96d      	bls.n	8000d82 <__udivmoddi4+0x2be>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	443d      	add	r5, r7
 8000caa:	1aeb      	subs	r3, r5, r3
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	e78f      	b.n	8000bd2 <__udivmoddi4+0x10e>
 8000cb2:	f1c1 0720 	rsb	r7, r1, #32
 8000cb6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cba:	408b      	lsls	r3, r1
 8000cbc:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc0:	ea48 0303 	orr.w	r3, r8, r3
 8000cc4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000cc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cd2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cd6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cda:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cde:	fa1f f883 	uxth.w	r8, r3
 8000ce2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ce6:	fb09 f408 	mul.w	r4, r9, r8
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x244>
 8000cf6:	18ed      	adds	r5, r5, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	d243      	bcs.n	8000d86 <__udivmoddi4+0x2c2>
 8000cfe:	42ac      	cmp	r4, r5
 8000d00:	d941      	bls.n	8000d86 <__udivmoddi4+0x2c2>
 8000d02:	f1a9 0902 	sub.w	r9, r9, #2
 8000d06:	441d      	add	r5, r3
 8000d08:	1b2d      	subs	r5, r5, r4
 8000d0a:	fa1f fe8e 	uxth.w	lr, lr
 8000d0e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d12:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d16:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d1a:	fb00 f808 	mul.w	r8, r0, r8
 8000d1e:	45a0      	cmp	r8, r4
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x26e>
 8000d22:	18e4      	adds	r4, r4, r3
 8000d24:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d28:	d229      	bcs.n	8000d7e <__udivmoddi4+0x2ba>
 8000d2a:	45a0      	cmp	r8, r4
 8000d2c:	d927      	bls.n	8000d7e <__udivmoddi4+0x2ba>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	441c      	add	r4, r3
 8000d32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d36:	eba4 0408 	sub.w	r4, r4, r8
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	454c      	cmp	r4, r9
 8000d40:	46c6      	mov	lr, r8
 8000d42:	464d      	mov	r5, r9
 8000d44:	d315      	bcc.n	8000d72 <__udivmoddi4+0x2ae>
 8000d46:	d012      	beq.n	8000d6e <__udivmoddi4+0x2aa>
 8000d48:	b156      	cbz	r6, 8000d60 <__udivmoddi4+0x29c>
 8000d4a:	ebba 030e 	subs.w	r3, sl, lr
 8000d4e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d52:	fa04 f707 	lsl.w	r7, r4, r7
 8000d56:	40cb      	lsrs	r3, r1
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	40cc      	lsrs	r4, r1
 8000d5c:	6037      	str	r7, [r6, #0]
 8000d5e:	6074      	str	r4, [r6, #4]
 8000d60:	2100      	movs	r1, #0
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	4618      	mov	r0, r3
 8000d68:	e6f8      	b.n	8000b5c <__udivmoddi4+0x98>
 8000d6a:	4690      	mov	r8, r2
 8000d6c:	e6e0      	b.n	8000b30 <__udivmoddi4+0x6c>
 8000d6e:	45c2      	cmp	sl, r8
 8000d70:	d2ea      	bcs.n	8000d48 <__udivmoddi4+0x284>
 8000d72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d76:	eb69 0503 	sbc.w	r5, r9, r3
 8000d7a:	3801      	subs	r0, #1
 8000d7c:	e7e4      	b.n	8000d48 <__udivmoddi4+0x284>
 8000d7e:	4628      	mov	r0, r5
 8000d80:	e7d7      	b.n	8000d32 <__udivmoddi4+0x26e>
 8000d82:	4640      	mov	r0, r8
 8000d84:	e791      	b.n	8000caa <__udivmoddi4+0x1e6>
 8000d86:	4681      	mov	r9, r0
 8000d88:	e7be      	b.n	8000d08 <__udivmoddi4+0x244>
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	e778      	b.n	8000c80 <__udivmoddi4+0x1bc>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	e745      	b.n	8000c20 <__udivmoddi4+0x15c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e708      	b.n	8000baa <__udivmoddi4+0xe6>
 8000d98:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9c:	443d      	add	r5, r7
 8000d9e:	e72b      	b.n	8000bf8 <__udivmoddi4+0x134>

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000da8:	4616      	mov	r6, r2
 8000daa:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000dac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <LL_FillBuffer+0x6c>)
{
 8000db2:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000db4:	f04f 0e34 	mov.w	lr, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000db8:	605a      	str	r2, [r3, #4]
{
 8000dba:	460d      	mov	r5, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <LL_FillBuffer+0x70>)
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <LL_FillBuffer+0x74>)
 8000dc0:	6812      	ldr	r2, [r2, #0]
{
 8000dc2:	9908      	ldr	r1, [sp, #32]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dc4:	fb0e 0202 	mla	r2, lr, r2, r0
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <LL_FillBuffer+0x6c>)
{
 8000dca:	9c09      	ldr	r4, [sp, #36]	; 0x24
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000dce:	60d9      	str	r1, [r3, #12]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dd0:	2a02      	cmp	r2, #2
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000dd2:	bf18      	it	ne
 8000dd4:	2200      	movne	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Instance = DMA2D;
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <LL_FillBuffer+0x78>)
 8000dda:	601a      	str	r2, [r3, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000ddc:	f000 ff5e 	bl	8001c9c <HAL_DMA2D_Init>
 8000de0:	b998      	cbnz	r0, 8000e0a <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000de2:	4641      	mov	r1, r8
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <LL_FillBuffer+0x6c>)
 8000de6:	f001 f8ad 	bl	8001f44 <HAL_DMA2D_ConfigLayer>
 8000dea:	b970      	cbnz	r0, 8000e0a <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000dec:	9700      	str	r7, [sp, #0]
 8000dee:	4633      	mov	r3, r6
 8000df0:	462a      	mov	r2, r5
 8000df2:	4621      	mov	r1, r4
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <LL_FillBuffer+0x6c>)
 8000df6:	f000 ff7d 	bl	8001cf4 <HAL_DMA2D_Start>
 8000dfa:	b930      	cbnz	r0, 8000e0a <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 8000e00:	b002      	add	sp, #8
 8000e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000e06:	f000 bf8f 	b.w	8001d28 <HAL_DMA2D_PollForTransfer>
}
 8000e0a:	b002      	add	sp, #8
 8000e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e10:	200000ac 	.word	0x200000ac
 8000e14:	20000090 	.word	0x20000090
 8000e18:	20000210 	.word	0x20000210
 8000e1c:	4002b000 	.word	0x4002b000

08000e20 <BSP_LCD_LayerDefaultInit>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <BSP_LCD_LayerDefaultInit+0x68>)
  layer_cfg.WindowX0 = 0;
 8000e22:	2300      	movs	r3, #0
{     
 8000e24:	b530      	push	{r4, r5, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e26:	6812      	ldr	r2, [r2, #0]
{     
 8000e28:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e2a:	2534      	movs	r5, #52	; 0x34
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <BSP_LCD_LayerDefaultInit+0x6c>)
{     
 8000e2e:	b08f      	sub	sp, #60	; 0x3c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e30:	fb05 0202 	mla	r2, r5, r2, r0
  layer_cfg.WindowX0 = 0;
 8000e34:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 8000e36:	9303      	str	r3, [sp, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e38:	9305      	str	r3, [sp, #20]
  layer_cfg.Alpha0 = 0;
 8000e3a:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8000e3c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8000e40:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8000e44:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e4c:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.FBStartAdress = FB_Address;
 8000e4e:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8000e50:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000e52:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e54:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e56:	2307      	movs	r3, #7
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000e58:	9204      	str	r2, [sp, #16]
  layer_cfg.Alpha = 255;
 8000e5a:	9106      	str	r1, [sp, #24]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000e5c:	a901      	add	r1, sp, #4
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000e5e:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000e60:	4622      	mov	r2, r4
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e62:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000e64:	9502      	str	r5, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000e66:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000e68:	f001 ffba 	bl	8002de0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <BSP_LCD_LayerDefaultInit+0x70>)
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	4360      	muls	r0, r4
 8000e76:	181a      	adds	r2, r3, r0
 8000e78:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000e7a:	4906      	ldr	r1, [pc, #24]	; (8000e94 <BSP_LCD_LayerDefaultInit+0x74>)
 8000e7c:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000e7e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e82:	501a      	str	r2, [r3, r0]
}
 8000e84:	b00f      	add	sp, #60	; 0x3c
 8000e86:	bd30      	pop	{r4, r5, pc}
 8000e88:	20000090 	.word	0x20000090
 8000e8c:	20000210 	.word	0x20000210
 8000e90:	20000094 	.word	0x20000094
 8000e94:	20000000 	.word	0x20000000

08000e98 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <BSP_LCD_SelectLayer+0x8>)
 8000e9a:	6018      	str	r0, [r3, #0]
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000090 	.word	0x20000090

08000ea4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <BSP_LCD_SetTextColor+0x10>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	4353      	muls	r3, r2
 8000eac:	4a02      	ldr	r2, [pc, #8]	; (8000eb8 <BSP_LCD_SetTextColor+0x14>)
 8000eae:	50d0      	str	r0, [r2, r3]
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000090 	.word	0x20000090
 8000eb8:	20000094 	.word	0x20000094

08000ebc <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <BSP_LCD_SetBackColor+0x10>)
 8000ebe:	210c      	movs	r1, #12
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <BSP_LCD_SetBackColor+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	fb01 2303 	mla	r3, r1, r3, r2
 8000ec8:	6058      	str	r0, [r3, #4]
 8000eca:	4770      	bx	lr
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	20000094 	.word	0x20000094

08000ed4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <BSP_LCD_SetFont+0x10>)
 8000ed6:	210c      	movs	r1, #12
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <BSP_LCD_SetFont+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	fb01 2303 	mla	r3, r1, r3, r2
 8000ee0:	6098      	str	r0, [r3, #8]
 8000ee2:	4770      	bx	lr
 8000ee4:	20000090 	.word	0x20000090
 8000ee8:	20000094 	.word	0x20000094

08000eec <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <BSP_LCD_GetFont+0x10>)
 8000eee:	210c      	movs	r1, #12
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <BSP_LCD_GetFont+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000ef8:	6898      	ldr	r0, [r3, #8]
 8000efa:	4770      	bx	lr
 8000efc:	20000090 	.word	0x20000090
 8000f00:	20000094 	.word	0x20000094

08000f04 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <BSP_LCD_Clear+0x24>)
{ 
 8000f06:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f08:	681c      	ldr	r4, [r3, #0]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000f0a:	2134      	movs	r1, #52	; 0x34
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f0e:	9001      	str	r0, [sp, #4]
 8000f10:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000f12:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f16:	2300      	movs	r3, #0
 8000f18:	315c      	adds	r1, #92	; 0x5c
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	c90e      	ldmia	r1, {r1, r2, r3}
 8000f1e:	f7ff ff41 	bl	8000da4 <LL_FillBuffer>
}
 8000f22:	b002      	add	sp, #8
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	20000210 	.word	0x20000210

08000f30 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <BSP_LCD_DrawPixel+0x2c>)
{
 8000f32:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2534      	movs	r5, #52	; 0x34
 8000f38:	4c09      	ldr	r4, [pc, #36]	; (8000f60 <BSP_LCD_DrawPixel+0x30>)
 8000f3a:	fb05 4303 	mla	r3, r5, r3, r4
 8000f3e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000f40:	2c02      	cmp	r4, #2
 8000f42:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000f46:	fb04 0101 	mla	r1, r4, r1, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000f4a:	d103      	bne.n	8000f54 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8000f52:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000f54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8000f58:	bd30      	pop	{r4, r5, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	20000210 	.word	0x20000210

08000f64 <BSP_LCD_DisplayChar>:
{
 8000f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <BSP_LCD_DisplayChar+0xc4>)
{
 8000f6a:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f6c:	f1a2 0420 	sub.w	r4, r2, #32
  for(i = 0; i < height; i++)
 8000f70:	f04f 0800 	mov.w	r8, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f74:	f8d3 a000 	ldr.w	sl, [r3]
{
 8000f78:	9001      	str	r0, [sp, #4]
 8000f7a:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f7c:	210c      	movs	r1, #12
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <BSP_LCD_DisplayChar+0xc8>)
 8000f80:	fb01 010a 	mla	r1, r1, sl, r0
 8000f84:	6889      	ldr	r1, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f86:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8000f8a:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8000f8e:	f109 0607 	add.w	r6, r9, #7
 8000f92:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f94:	fb0b f404 	mul.w	r4, fp, r4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f98:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8000f9a:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
 8000f9e:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1))) 
 8000fa2:	f109 32ff 	add.w	r2, r9, #4294967295
 8000fa6:	fa52 f380 	uxtab	r3, r2, r0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8000fae:	45d8      	cmp	r8, fp
 8000fb0:	eb03 0208 	add.w	r2, r3, r8
 8000fb4:	b293      	uxth	r3, r2
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	d302      	bcc.n	8000fc0 <BSP_LCD_DisplayChar+0x5c>
}
 8000fba:	b005      	add	sp, #20
 8000fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000fc0:	2e01      	cmp	r6, #1
 8000fc2:	d009      	beq.n	8000fd8 <BSP_LCD_DisplayChar+0x74>
 8000fc4:	2e02      	cmp	r6, #2
 8000fc6:	d00f      	beq.n	8000fe8 <BSP_LCD_DisplayChar+0x84>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000fc8:	7865      	ldrb	r5, [r4, #1]
 8000fca:	7822      	ldrb	r2, [r4, #0]
 8000fcc:	022d      	lsls	r5, r5, #8
 8000fce:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8000fd2:	78a2      	ldrb	r2, [r4, #2]
 8000fd4:	4315      	orrs	r5, r2
 8000fd6:	e000      	b.n	8000fda <BSP_LCD_DisplayChar+0x76>
      line =  pchar[0];      
 8000fd8:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8000fda:	2700      	movs	r7, #0
 8000fdc:	45b9      	cmp	r9, r7
 8000fde:	d808      	bhi.n	8000ff2 <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 8000fe0:	f108 0801 	add.w	r8, r8, #1
 8000fe4:	4434      	add	r4, r6
 8000fe6:	e7e1      	b.n	8000fac <BSP_LCD_DisplayChar+0x48>
      line =  (pchar[0]<< 8) | pchar[1];      
 8000fe8:	7822      	ldrb	r2, [r4, #0]
 8000fea:	7865      	ldrb	r5, [r4, #1]
 8000fec:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8000ff0:	e7f3      	b.n	8000fda <BSP_LCD_DisplayChar+0x76>
      if(line & (1 << (width- j + offset- 1))) 
 8000ff2:	9b03      	ldr	r3, [sp, #12]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	1bd9      	subs	r1, r3, r7
 8000ff8:	408a      	lsls	r2, r1
 8000ffa:	422a      	tst	r2, r5
 8000ffc:	f04f 020c 	mov.w	r2, #12
 8001000:	d00b      	beq.n	800101a <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	fb02 f20a 	mul.w	r2, r2, sl
 8001008:	19d8      	adds	r0, r3, r7
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <BSP_LCD_DisplayChar+0xc8>)
 800100c:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800100e:	9900      	ldr	r1, [sp, #0]
 8001010:	b280      	uxth	r0, r0
 8001012:	f7ff ff8d 	bl	8000f30 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001016:	3701      	adds	r7, #1
 8001018:	e7e0      	b.n	8000fdc <BSP_LCD_DisplayChar+0x78>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <BSP_LCD_DisplayChar+0xc8>)
 800101c:	fb02 320a 	mla	r2, r2, sl, r3
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	6852      	ldr	r2, [r2, #4]
 8001024:	19d8      	adds	r0, r3, r7
 8001026:	e7f2      	b.n	800100e <BSP_LCD_DisplayChar+0xaa>
 8001028:	20000090 	.word	0x20000090
 800102c:	20000094 	.word	0x20000094

08001030 <BSP_LCD_DisplayStringAt>:
{
 8001030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001034:	4607      	mov	r7, r0
 8001036:	460d      	mov	r5, r1
 8001038:	4614      	mov	r4, r2
 800103a:	1b10      	subs	r0, r2, r4
  while (*ptr++) size ++ ;
 800103c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001040:	2900      	cmp	r1, #0
 8001042:	d1fa      	bne.n	800103a <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <BSP_LCD_DisplayStringAt+0x9c>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001046:	260c      	movs	r6, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001048:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80010d4 <BSP_LCD_DisplayStringAt+0xa4>
 800104c:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8001050:	6811      	ldr	r1, [r2, #0]
  switch (Mode)
 8001052:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <BSP_LCD_DisplayStringAt+0xa0>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001056:	fb0c 8c01 	mla	ip, ip, r1, r8
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800105a:	fb06 2601 	mla	r6, r6, r1, r2
 800105e:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 8001062:	68b6      	ldr	r6, [r6, #8]
 8001064:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 8001068:	fbb2 f2fe 	udiv	r2, r2, lr
  switch (Mode)
 800106c:	d01a      	beq.n	80010a4 <BSP_LCD_DisplayStringAt+0x74>
 800106e:	2b02      	cmp	r3, #2
 8001070:	d01f      	beq.n	80010b2 <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001072:	b23b      	sxth	r3, r7
    ref_column = 1;
 8001074:	46a1      	mov	r9, r4
 8001076:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001078:	f04f 0334 	mov.w	r3, #52	; 0x34
    ref_column = 1;
 800107c:	bfd8      	it	le
 800107e:	2701      	movle	r7, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001080:	fb03 8801 	mla	r8, r3, r1, r8
 8001084:	eba9 0304 	sub.w	r3, r9, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001088:	88b0      	ldrh	r0, [r6, #4]
 800108a:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 800108e:	b29b      	uxth	r3, r3
 8001090:	f819 2b01 	ldrb.w	r2, [r9], #1
 8001094:	fb00 1313 	mls	r3, r0, r3, r1
 8001098:	b29b      	uxth	r3, r3
 800109a:	4283      	cmp	r3, r0
 800109c:	d300      	bcc.n	80010a0 <BSP_LCD_DisplayStringAt+0x70>
 800109e:	b96a      	cbnz	r2, 80010bc <BSP_LCD_DisplayStringAt+0x8c>
 80010a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80010a4:	1a10      	subs	r0, r2, r0
 80010a6:	fb0e f000 	mul.w	r0, lr, r0
 80010aa:	eb07 0050 	add.w	r0, r7, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80010ae:	b287      	uxth	r7, r0
      break;
 80010b0:	e7df      	b.n	8001072 <BSP_LCD_DisplayStringAt+0x42>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80010b2:	1a10      	subs	r0, r2, r0
 80010b4:	fb10 f00e 	smulbb	r0, r0, lr
 80010b8:	1bc0      	subs	r0, r0, r7
 80010ba:	e7f8      	b.n	80010ae <BSP_LCD_DisplayStringAt+0x7e>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80010bc:	4638      	mov	r0, r7
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff ff50 	bl	8000f64 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80010c4:	88b0      	ldrh	r0, [r6, #4]
 80010c6:	4438      	add	r0, r7
 80010c8:	b287      	uxth	r7, r0
 80010ca:	e7db      	b.n	8001084 <BSP_LCD_DisplayStringAt+0x54>
 80010cc:	20000090 	.word	0x20000090
 80010d0:	20000094 	.word	0x20000094
 80010d4:	20000210 	.word	0x20000210

080010d8 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <BSP_LCD_DisplayStringAtLine+0x28>)
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <BSP_LCD_DisplayStringAtLine+0x2c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
{  
 80010de:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 80010e0:	240c      	movs	r4, #12
 80010e2:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80010e6:	460a      	mov	r2, r1
}
 80010e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	88db      	ldrh	r3, [r3, #6]
 80010f0:	fb13 f000 	smulbb	r0, r3, r0
 80010f4:	2303      	movs	r3, #3
 80010f6:	b281      	uxth	r1, r0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff bf99 	b.w	8001030 <BSP_LCD_DisplayStringAt>
 80010fe:	bf00      	nop
 8001100:	20000090 	.word	0x20000090
 8001104:	20000094 	.word	0x20000094

08001108 <BSP_LCD_FillRect>:
{
 8001108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800110a:	4c12      	ldr	r4, [pc, #72]	; (8001154 <BSP_LCD_FillRect+0x4c>)
 800110c:	4e12      	ldr	r6, [pc, #72]	; (8001158 <BSP_LCD_FillRect+0x50>)
 800110e:	6825      	ldr	r5, [r4, #0]
 8001110:	240c      	movs	r4, #12
 8001112:	436c      	muls	r4, r5
 8001114:	f856 e004 	ldr.w	lr, [r6, r4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001118:	2434      	movs	r4, #52	; 0x34
 800111a:	4e10      	ldr	r6, [pc, #64]	; (800115c <BSP_LCD_FillRect+0x54>)
 800111c:	fb04 6405 	mla	r4, r4, r5, r6
 8001120:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001122:	2f02      	cmp	r7, #2
 8001124:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8001126:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001128:	fb07 0101 	mla	r1, r7, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800112c:	f04f 0034 	mov.w	r0, #52	; 0x34
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001130:	f8cd e004 	str.w	lr, [sp, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001134:	fb00 6605 	mla	r6, r0, r5, r6
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001138:	bf0c      	ite	eq
 800113a:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800113e:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001142:	6e30      	ldr	r0, [r6, #96]	; 0x60
 8001144:	1a80      	subs	r0, r0, r2
 8001146:	9000      	str	r0, [sp, #0]
 8001148:	4628      	mov	r0, r5
 800114a:	f7ff fe2b 	bl	8000da4 <LL_FillBuffer>
}
 800114e:	b003      	add	sp, #12
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001152:	bf00      	nop
 8001154:	20000090 	.word	0x20000090
 8001158:	20000094 	.word	0x20000094
 800115c:	20000210 	.word	0x20000210

08001160 <BSP_LCD_ClearStringLine>:
{
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001162:	4e10      	ldr	r6, [pc, #64]	; (80011a4 <BSP_LCD_ClearStringLine+0x44>)
 8001164:	240c      	movs	r4, #12
 8001166:	4d10      	ldr	r5, [pc, #64]	; (80011a8 <BSP_LCD_ClearStringLine+0x48>)
 8001168:	6832      	ldr	r2, [r6, #0]
 800116a:	fb04 f302 	mul.w	r3, r4, r2
 800116e:	eb05 0e03 	add.w	lr, r5, r3
 8001172:	58ef      	ldr	r7, [r5, r3]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001174:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001178:	50e9      	str	r1, [r5, r3]
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800117a:	f8de 3008 	ldr.w	r3, [lr, #8]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800117e:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8001182:	490a      	ldr	r1, [pc, #40]	; (80011ac <BSP_LCD_ClearStringLine+0x4c>)
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001184:	88db      	ldrh	r3, [r3, #6]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001186:	fb0e 1202 	mla	r2, lr, r2, r1
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800118a:	fb10 f103 	smulbb	r1, r0, r3
 800118e:	2000      	movs	r0, #0
 8001190:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8001194:	b289      	uxth	r1, r1
 8001196:	f7ff ffb7 	bl	8001108 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 800119a:	6833      	ldr	r3, [r6, #0]
 800119c:	435c      	muls	r4, r3
 800119e:	512f      	str	r7, [r5, r4]
 80011a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000090 	.word	0x20000090
 80011a8:	20000094 	.word	0x20000094
 80011ac:	20000210 	.word	0x20000210

080011b0 <BSP_LCD_DisplayOn>:
{
 80011b0:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	6993      	ldr	r3, [r2, #24]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80011c4:	2201      	movs	r2, #1
 80011c6:	f000 fff1 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80011ca:	2201      	movs	r2, #1
 80011cc:	2108      	movs	r1, #8
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <BSP_LCD_DisplayOn+0x30>)
}
 80011d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80011d4:	f000 bfea 	b.w	80021ac <HAL_GPIO_WritePin>
 80011d8:	20000210 	.word	0x20000210
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40022800 	.word	0x40022800

080011e4 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80011e6:	484c      	ldr	r0, [pc, #304]	; (8001318 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80011ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
{
 80011f2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80011f6:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80011f8:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80011fa:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011fc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001200:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001204:	4e45      	ldr	r6, [pc, #276]	; (800131c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800120a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121e:	f042 0210 	orr.w	r2, r2, #16
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001226:	f002 0210 	and.w	r2, r2, #16
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800123c:	9203      	str	r2, [sp, #12]
 800123e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
 8001248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800124e:	9204      	str	r2, [sp, #16]
 8001250:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001260:	9205      	str	r2, [sp, #20]
 8001262:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
 800126c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001272:	9206      	str	r2, [sp, #24]
 8001274:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001284:	9207      	str	r2, [sp, #28]
 8001286:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001292:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001298:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800129a:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800129c:	9308      	str	r3, [sp, #32]
 800129e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80012a0:	2310      	movs	r3, #16
 80012a2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80012a8:	f000 fe96 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80012ac:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80012ae:	a909      	add	r1, sp, #36	; 0x24
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012b2:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80012b4:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80012b6:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80012b8:	f000 fe8e 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80012bc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80012c0:	a909      	add	r1, sp, #36	; 0x24
 80012c2:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012c4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80012c6:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80012c8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80012ca:	f000 fe85 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80012ce:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80012d2:	a909      	add	r1, sp, #36	; 0x24
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012d8:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80012da:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80012dc:	f000 fe7c 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012e0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80012e2:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80012e4:	4c10      	ldr	r4, [pc, #64]	; (8001328 <BSP_LCD_MspInit+0x144>)
 80012e6:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80012e8:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80012ea:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80012ec:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80012ee:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80012f0:	f000 fe72 	bl	8001fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80012f4:	a909      	add	r1, sp, #36	; 0x24
 80012f6:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80012f8:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80012fa:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80012fc:	f000 fe6c 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001300:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001302:	a909      	add	r1, sp, #36	; 0x24
 8001304:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001306:	950a      	str	r5, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001308:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800130a:	f000 fe65 	bl	8001fd8 <HAL_GPIO_Init>
}
 800130e:	b00f      	add	sp, #60	; 0x3c
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000
 800131c:	40022000 	.word	0x40022000
 8001320:	40021800 	.word	0x40021800
 8001324:	40022400 	.word	0x40022400
 8001328:	40022800 	.word	0x40022800

0800132c <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <BSP_LCD_ClockConfig+0x18>)
 800132e:	2308      	movs	r3, #8
 8001330:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001336:	2305      	movs	r3, #5
 8001338:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800133a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133e:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001340:	f002 b856 	b.w	80033f0 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	200000ec 	.word	0x200000ec

08001348 <BSP_LCD_Init>:
{    
 8001348:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800134a:	2328      	movs	r3, #40	; 0x28
 800134c:	4c26      	ldr	r4, [pc, #152]	; (80013e8 <BSP_LCD_Init+0xa0>)
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800134e:	2100      	movs	r1, #0
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001350:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001352:	2309      	movs	r3, #9
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001354:	4620      	mov	r0, r4
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001356:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001358:	2335      	movs	r3, #53	; 0x35
 800135a:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800135c:	230b      	movs	r3, #11
 800135e:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001360:	f240 131b 	movw	r3, #283	; 0x11b
 8001364:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001366:	f240 2315 	movw	r3, #533	; 0x215
 800136a:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800136c:	f240 131d 	movw	r3, #285	; 0x11d
 8001370:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001372:	f240 2335 	movw	r3, #565	; 0x235
 8001376:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001378:	f7ff ffd8 	bl	800132c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800137c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001380:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001382:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001384:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001388:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001390:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001394:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001398:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800139a:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800139c:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800139e:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <BSP_LCD_Init+0xa4>)
 80013a2:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80013a4:	f001 fd45 	bl	8002e32 <HAL_LTDC_GetState>
 80013a8:	4601      	mov	r1, r0
 80013aa:	b910      	cbnz	r0, 80013b2 <BSP_LCD_Init+0x6a>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff ff19 	bl	80011e4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <BSP_LCD_Init+0xa0>)
 80013b4:	f001 fc3e 	bl	8002c34 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <BSP_LCD_Init+0xa8>)
 80013c0:	f000 fef4 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2108      	movs	r1, #8
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <BSP_LCD_Init+0xac>)
 80013ca:	f000 feef 	bl	80021ac <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80013ce:	f000 f923 	bl	8001618 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <BSP_LCD_Init+0xb0>)
 80013d4:	210c      	movs	r1, #12
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <BSP_LCD_Init+0xb4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
}
 80013da:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 80013dc:	fb01 2303 	mla	r3, r1, r3, r2
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <BSP_LCD_Init+0xb8>)
 80013e2:	609a      	str	r2, [r3, #8]
}
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	bf00      	nop
 80013e8:	20000210 	.word	0x20000210
 80013ec:	40016800 	.word	0x40016800
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40022800 	.word	0x40022800
 80013f8:	20000090 	.word	0x20000090
 80013fc:	20000094 	.word	0x20000094
 8001400:	20000000 	.word	0x20000000

08001404 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001408:	4c22      	ldr	r4, [pc, #136]	; (8001494 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800140a:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800140c:	4d22      	ldr	r5, [pc, #136]	; (8001498 <BSP_SDRAM_Initialization_sequence+0x94>)
  __IO uint32_t tmpmrd = 0;
 800140e:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001412:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001414:	4621      	mov	r1, r4
{
 8001416:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800141e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8001422:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001424:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001428:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800142c:	f002 fce2 	bl	8003df4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001430:	4630      	mov	r0, r6
 8001432:	f000 f94d 	bl	80016d0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001436:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001438:	4621      	mov	r1, r4
 800143a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143e:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001440:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001442:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001446:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800144a:	f002 fcd3 	bl	8003df4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800144e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001450:	4621      	mov	r1, r4
 8001452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001456:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 8001458:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800145c:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8001460:	2308      	movs	r3, #8
 8001462:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001464:	f002 fcc6 	bl	8003df4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001468:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800146c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001470:	4621      	mov	r1, r4
 8001472:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001474:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001476:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 8001478:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800147a:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001482:	f002 fcb7 	bl	8003df4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001486:	4649      	mov	r1, r9
 8001488:	4628      	mov	r0, r5
 800148a:	f002 fcca 	bl	8003e22 <HAL_SDRAM_ProgramRefreshRate>
}
 800148e:	b003      	add	sp, #12
 8001490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001494:	20000170 	.word	0x20000170
 8001498:	200002b8 	.word	0x200002b8

0800149c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <BSP_SDRAM_MspInit+0x158>)
 800149e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a0:	f042 0201 	orr.w	r2, r2, #1
{  
 80014a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80014a8:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80014aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80014ac:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80014ae:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80014b0:	4851      	ldr	r0, [pc, #324]	; (80015f8 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80014b2:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80014b6:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80014b8:	9201      	str	r2, [sp, #4]
 80014ba:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80014ca:	9202      	str	r2, [sp, #8]
 80014cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d0:	f042 0204 	orr.w	r2, r2, #4
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
 80014d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d8:	f002 0204 	and.w	r2, r2, #4
 80014dc:	9203      	str	r2, [sp, #12]
 80014de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e2:	f042 0208 	orr.w	r2, r2, #8
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
 80014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ea:	f002 0208 	and.w	r2, r2, #8
 80014ee:	9204      	str	r2, [sp, #16]
 80014f0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	f042 0210 	orr.w	r2, r2, #16
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	f002 0210 	and.w	r2, r2, #16
 8001500:	9205      	str	r2, [sp, #20]
 8001502:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	f042 0220 	orr.w	r2, r2, #32
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
 800150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150e:	f002 0220 	and.w	r2, r2, #32
 8001512:	9206      	str	r2, [sp, #24]
 8001514:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001524:	9207      	str	r2, [sp, #28]
 8001526:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001530:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001534:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	9308      	str	r3, [sp, #32]
 800153c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001542:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001544:	230c      	movs	r3, #12
 8001546:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001548:	2308      	movs	r3, #8
 800154a:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800154e:	4621      	mov	r1, r4
 8001550:	f000 fd42 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001554:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001558:	4621      	mov	r1, r4
 800155a:	4828      	ldr	r0, [pc, #160]	; (80015fc <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800155e:	f000 fd3b 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001562:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001566:	4621      	mov	r1, r4
 8001568:	4825      	ldr	r0, [pc, #148]	; (8001600 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800156a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800156c:	f000 fd34 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001570:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001574:	4621      	mov	r1, r4
 8001576:	4823      	ldr	r0, [pc, #140]	; (8001604 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001578:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800157a:	f000 fd2d 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800157e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001582:	4621      	mov	r1, r4
 8001584:	4820      	ldr	r0, [pc, #128]	; (8001608 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001586:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001588:	f000 fd26 	bl	8001fd8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800158c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800158e:	4621      	mov	r1, r4
 8001590:	481e      	ldr	r0, [pc, #120]	; (800160c <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001592:	4c1f      	ldr	r4, [pc, #124]	; (8001610 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001594:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001596:	f000 fd1f 	bl	8001fd8 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800159a:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800159c:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800159e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015a0:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80015a2:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80015a8:	6065      	str	r5, [r4, #4]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80015aa:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.Mode                = DMA_NORMAL;
 80015b0:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015b2:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80015b8:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015c0:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015c2:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015c8:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015ca:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <BSP_SDRAM_MspInit+0x178>)
 80015d2:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80015d4:	f000 fae4 	bl	8001ba0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 fa63 	bl	8001aa4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80015de:	462a      	mov	r2, r5
 80015e0:	210f      	movs	r1, #15
 80015e2:	2038      	movs	r0, #56	; 0x38
 80015e4:	f000 f9dc 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80015e8:	2038      	movs	r0, #56	; 0x38
 80015ea:	f000 fa11 	bl	8001a10 <HAL_NVIC_EnableIRQ>
}
 80015ee:	b00e      	add	sp, #56	; 0x38
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021c00 	.word	0x40021c00
 8001610:	2000019c 	.word	0x2000019c
 8001614:	40026410 	.word	0x40026410

08001618 <BSP_SDRAM_Init>:
{ 
 8001618:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800161a:	4c1a      	ldr	r4, [pc, #104]	; (8001684 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 800161c:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8001620:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001622:	4d1a      	ldr	r5, [pc, #104]	; (800168c <BSP_SDRAM_Init+0x74>)
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001624:	4620      	mov	r0, r4
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001626:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8001628:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 800162a:	6069      	str	r1, [r5, #4]
  Timing.LoadToActiveDelay    = 2;
 800162c:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 800162e:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8001630:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8001632:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001634:	2310      	movs	r3, #16
  Timing.RowCycleDelay        = 7;
 8001636:	60e9      	str	r1, [r5, #12]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001638:	2100      	movs	r1, #0
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800163a:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800163c:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800163e:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001640:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001642:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001646:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001648:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800164a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800164e:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001650:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001656:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001658:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800165a:	62a1      	str	r1, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 800165c:	60aa      	str	r2, [r5, #8]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800165e:	f7ff ff1d 	bl	800149c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f002 fba5 	bl	8003db4 <HAL_SDRAM_Init>
 800166a:	4c09      	ldr	r4, [pc, #36]	; (8001690 <BSP_SDRAM_Init+0x78>)
 800166c:	b138      	cbz	r0, 800167e <BSP_SDRAM_Init+0x66>
    sdramstatus = SDRAM_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001672:	f240 6003 	movw	r0, #1539	; 0x603
 8001676:	f7ff fec5 	bl	8001404 <BSP_SDRAM_Initialization_sequence>
}
 800167a:	7820      	ldrb	r0, [r4, #0]
 800167c:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 800167e:	7020      	strb	r0, [r4, #0]
 8001680:	e7f7      	b.n	8001672 <BSP_SDRAM_Init+0x5a>
 8001682:	bf00      	nop
 8001684:	200002b8 	.word	0x200002b8
 8001688:	a0000140 	.word	0xa0000140
 800168c:	20000180 	.word	0x20000180
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001696:	2003      	movs	r0, #3
 8001698:	f000 f970 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169c:	2000      	movs	r0, #0
 800169e:	f004 fd9b 	bl	80061d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016a2:	f004 facb 	bl	8005c3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80016a6:	2000      	movs	r0, #0
 80016a8:	bd08      	pop	{r3, pc}
	...

080016ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x10>)
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_IncTick+0x14>)
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200002ec 	.word	0x200002ec
 80016c0:	20000009 	.word	0x20000009

080016c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_GetTick+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200002ec 	.word	0x200002ec

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff6 	bl	80016c4 <HAL_GetTick>
 80016d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80016dc:	bf1e      	ittt	ne
 80016de:	4b04      	ldrne	r3, [pc, #16]	; (80016f0 <HAL_Delay+0x20>)
 80016e0:	781b      	ldrbne	r3, [r3, #0]
 80016e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	1b40      	subs	r0, r0, r5
 80016ea:	4284      	cmp	r4, r0
 80016ec:	d8fa      	bhi.n	80016e4 <HAL_Delay+0x14>
  {
  }
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	20000009 	.word	0x20000009

080016f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f6:	4604      	mov	r4, r0
 80016f8:	2800      	cmp	r0, #0
 80016fa:	f000 8099 	beq.w	8001830 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001700:	b923      	cbnz	r3, 800170c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001702:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001704:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001708:	f004 fade 	bl	8005cc8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800170e:	06db      	lsls	r3, r3, #27
 8001710:	f100 808c 	bmi.w	800182c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800171a:	f023 0302 	bic.w	r3, r3, #2
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_ADC_Init+0x140>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800172c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	6861      	ldr	r1, [r4, #4]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001736:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001738:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001748:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001752:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001758:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800175a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001768:	4933      	ldr	r1, [pc, #204]	; (8001838 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800176a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800176c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800176e:	428a      	cmp	r2, r1
 8001770:	d050      	beq.n	8001814 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001778:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001790:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001792:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001794:	f022 0202 	bic.w	r2, r2, #2
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80017a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017a2:	6a22      	ldr	r2, [r4, #32]
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	d03d      	beq.n	8001824 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017a8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c2:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ce:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80017d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ea:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80017ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80017fc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80017fe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800180c:	2300      	movs	r3, #0
 800180e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001812:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800181a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001822:	e7b4      	b.n	800178e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	e7ca      	b.n	80017c2 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 800182c:	2001      	movs	r0, #1
 800182e:	e7ed      	b.n	800180c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
}
 8001832:	bd10      	pop	{r4, pc}
 8001834:	40012300 	.word	0x40012300
 8001838:	0f000001 	.word	0x0f000001

0800183c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800183c:	2300      	movs	r3, #0
{
 800183e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8001840:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001842:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001846:	2b01      	cmp	r3, #1
 8001848:	d071      	beq.n	800192e <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 800184a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800184c:	2301      	movs	r3, #1
 800184e:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001850:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001852:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001856:	b2ae      	uxth	r6, r5
 8001858:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800185a:	d931      	bls.n	80018c0 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001860:	f04f 0e07 	mov.w	lr, #7
 8001864:	68e7      	ldr	r7, [r4, #12]
 8001866:	3b1e      	subs	r3, #30
 8001868:	fa0e fe03 	lsl.w	lr, lr, r3
 800186c:	ea27 070e 	bic.w	r7, r7, lr
 8001870:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001872:	4f3d      	ldr	r7, [pc, #244]	; (8001968 <HAL_ADC_ConfigChannel+0x12c>)
 8001874:	42bd      	cmp	r5, r7
 8001876:	d11e      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001878:	68e3      	ldr	r3, [r4, #12]
 800187a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800187e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8001880:	684a      	ldr	r2, [r1, #4]
 8001882:	2a06      	cmp	r2, #6
 8001884:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001888:	d82a      	bhi.n	80018e0 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800188a:	4413      	add	r3, r2
 800188c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800188e:	1f59      	subs	r1, r3, #5
 8001890:	231f      	movs	r3, #31
 8001892:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001894:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001898:	ea27 0303 	bic.w	r3, r7, r3
 800189c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800189e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018a0:	4311      	orrs	r1, r2
 80018a2:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_ADC_ConfigChannel+0x130>)
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d039      	beq.n	800191e <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 80018aa:	2300      	movs	r3, #0
 80018ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80018b0:	4618      	mov	r0, r3
}
 80018b2:	b003      	add	sp, #12
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018b6:	68e7      	ldr	r7, [r4, #12]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	433b      	orrs	r3, r7
 80018be:	e7de      	b.n	800187e <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80018c4:	f04f 0e07 	mov.w	lr, #7
 80018c8:	6927      	ldr	r7, [r4, #16]
 80018ca:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018d2:	ea27 070e 	bic.w	r7, r7, lr
 80018d6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018d8:	6927      	ldr	r7, [r4, #16]
 80018da:	433b      	orrs	r3, r7
 80018dc:	6123      	str	r3, [r4, #16]
 80018de:	e7cf      	b.n	8001880 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 80018e0:	2a0c      	cmp	r2, #12
 80018e2:	d80e      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018e4:	4413      	add	r3, r2
 80018e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018e8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80018ec:	231f      	movs	r3, #31
 80018ee:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018f0:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f4:	ea21 0303 	bic.w	r3, r1, r3
 80018f8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018fc:	431a      	orrs	r2, r3
 80018fe:	6322      	str	r2, [r4, #48]	; 0x30
 8001900:	e7d0      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001902:	4413      	add	r3, r2
 8001904:	221f      	movs	r2, #31
 8001906:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	409a      	lsls	r2, r3
 800190c:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001910:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001914:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001916:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001918:	4311      	orrs	r1, r2
 800191a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800191c:	e7c2      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800191e:	2d12      	cmp	r5, #18
 8001920:	d107      	bne.n	8001932 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_ADC_ConfigChannel+0x134>)
 8001924:	6853      	ldr	r3, [r2, #4]
 8001926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192a:	6053      	str	r3, [r2, #4]
 800192c:	e7bd      	b.n	80018aa <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 800192e:	2002      	movs	r0, #2
 8001930:	e7bf      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_ADC_ConfigChannel+0x12c>)
 8001934:	429d      	cmp	r5, r3
 8001936:	d001      	beq.n	800193c <HAL_ADC_ConfigChannel+0x100>
 8001938:	2d11      	cmp	r5, #17
 800193a:	d1b6      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800193e:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001940:	684a      	ldr	r2, [r1, #4]
 8001942:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001946:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001948:	d1af      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_ADC_ConfigChannel+0x138>)
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_ADC_ConfigChannel+0x13c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fbb3 f2f2 	udiv	r2, r3, r2
 8001954:	230a      	movs	r3, #10
 8001956:	4353      	muls	r3, r2
        counter--;
 8001958:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0a4      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	e7f8      	b.n	8001958 <HAL_ADC_ConfigChannel+0x11c>
 8001966:	bf00      	nop
 8001968:	10000012 	.word	0x10000012
 800196c:	40012000 	.word	0x40012000
 8001970:	40012300 	.word	0x40012300
 8001974:	2000000c 	.word	0x2000000c
 8001978:	000f4240 	.word	0x000f4240

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800197e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001982:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019bc:	bf8c      	ite	hi
 80019be:	3c03      	subhi	r4, #3
 80019c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80019c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80019cc:	ea01 0103 	and.w	r1, r1, r3
 80019d0:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	fa05 f404 	lsl.w	r4, r5, r4
 80019d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80019dc:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	ea42 0201 	orr.w	r2, r2, r1
 80019e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 80019e8:	da05      	bge.n	80019f6 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	f000 000f 	and.w	r0, r0, #15
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_NVIC_SetPriority+0x6c>)
 80019f2:	541a      	strb	r2, [r3, r0]
 80019f4:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a00:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001a04:	bd30      	pop	{r4, r5, pc}
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00
 8001a0c:	e000ed14 	.word	0xe000ed14

08001a10 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a10:	0942      	lsrs	r2, r0, #5
 8001a12:	2301      	movs	r3, #1
 8001a14:	f000 001f 	and.w	r0, r0, #31
 8001a18:	fa03 f000 	lsl.w	r0, r3, r0
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <HAL_NVIC_EnableIRQ+0x14>)
 8001a1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	3801      	subs	r0, #1
 8001a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a2e:	d20a      	bcs.n	8001a46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	21f0      	movs	r1, #240	; 0xf0
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a56:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	bf0c      	ite	eq
 8001a5c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a60:	f022 0204 	bicne.w	r2, r2, #4
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4770      	bx	lr
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a6c:	4770      	bx	lr

08001a6e <HAL_SYSTICK_IRQHandler>:
{
 8001a6e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a70:	f7ff fffc 	bl	8001a6c <HAL_SYSTICK_Callback>
 8001a74:	bd08      	pop	{r3, pc}
	...

08001a78 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	2118      	movs	r1, #24
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a82:	3a10      	subs	r2, #16
 8001a84:	f023 0303 	bic.w	r3, r3, #3
 8001a88:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001a8e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a90:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a92:	bf88      	it	hi
 8001a94:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a96:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a98:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001a9a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	080086c4 	.word	0x080086c4

08001aa4 <HAL_DMA_Init>:
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fe0c 	bl	80016c4 <HAL_GetTick>
 8001aac:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d071      	beq.n	8001b96 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001ab2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001ab4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001ab6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aba:	2302      	movs	r3, #2
 8001abc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac8:	6821      	ldr	r1, [r4, #0]
 8001aca:	680b      	ldr	r3, [r1, #0]
 8001acc:	07d8      	lsls	r0, r3, #31
 8001ace:	d43c      	bmi.n	8001b4a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001ad0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad2:	4d32      	ldr	r5, [pc, #200]	; (8001b9c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad4:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001adc:	4313      	orrs	r3, r2
 8001ade:	68e2      	ldr	r2, [r4, #12]
 8001ae0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	6922      	ldr	r2, [r4, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	6962      	ldr	r2, [r4, #20]
 8001ae8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	69e2      	ldr	r2, [r4, #28]
 8001aec:	4303      	orrs	r3, r0
 8001aee:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af0:	6a22      	ldr	r2, [r4, #32]
 8001af2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001af6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001afc:	bf01      	itttt	eq
 8001afe:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001b00:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001b02:	4335      	orreq	r5, r6
 8001b04:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b06:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001b08:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001b0a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b0c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001b10:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b14:	d10b      	bne.n	8001b2e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001b16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001b1a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b1c:	b13d      	cbz	r5, 8001b2e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b1e:	b9f8      	cbnz	r0, 8001b60 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001b20:	2a01      	cmp	r2, #1
 8001b22:	d02d      	beq.n	8001b80 <HAL_DMA_Init+0xdc>
 8001b24:	d301      	bcc.n	8001b2a <HAL_DMA_Init+0x86>
 8001b26:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b28:	d101      	bne.n	8001b2e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b2a:	01ea      	lsls	r2, r5, #7
 8001b2c:	d42b      	bmi.n	8001b86 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001b2e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff ffa1 	bl	8001a78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b38:	233f      	movs	r3, #63	; 0x3f
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b40:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4a:	f7ff fdbb 	bl	80016c4 <HAL_GetTick>
 8001b4e:	1b40      	subs	r0, r0, r5
 8001b50:	2805      	cmp	r0, #5
 8001b52:	d9b9      	bls.n	8001ac8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b54:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b56:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b58:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b60:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001b64:	d113      	bne.n	8001b8e <HAL_DMA_Init+0xea>
    switch (tmp)
 8001b66:	2a03      	cmp	r2, #3
 8001b68:	d8e1      	bhi.n	8001b2e <HAL_DMA_Init+0x8a>
 8001b6a:	a001      	add	r0, pc, #4	; (adr r0, 8001b70 <HAL_DMA_Init+0xcc>)
 8001b6c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001b70:	08001b87 	.word	0x08001b87
 8001b74:	08001b2b 	.word	0x08001b2b
 8001b78:	08001b87 	.word	0x08001b87
 8001b7c:	08001b81 	.word	0x08001b81
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b80:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001b84:	d1d3      	bne.n	8001b2e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b86:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001b88:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8a:	6563      	str	r3, [r4, #84]	; 0x54
 8001b8c:	e7e5      	b.n	8001b5a <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001b8e:	2a02      	cmp	r2, #2
 8001b90:	d9f9      	bls.n	8001b86 <HAL_DMA_Init+0xe2>
 8001b92:	2a03      	cmp	r2, #3
 8001b94:	e7c8      	b.n	8001b28 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
 8001b9a:	bf00      	nop
 8001b9c:	f010803f 	.word	0xf010803f

08001ba0 <HAL_DMA_DeInit>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	b320      	cbz	r0, 8001bf0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ba6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001baa:	b2e4      	uxtb	r4, r4
 8001bac:	2c02      	cmp	r4, #2
 8001bae:	d01d      	beq.n	8001bec <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001bb2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001bbc:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001bbe:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001bc0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001bc2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001bc4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001bc6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001bc8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bca:	f7ff ff55 	bl	8001a78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bce:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001bd0:	233f      	movs	r3, #63	; 0x3f
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd6:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 8001bd8:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001bda:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001bdc:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001bde:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001be0:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001be2:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 8001be4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001be8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 8001bec:	4620      	mov	r0, r4
}
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}

08001bf4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001c04:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c06:	2305      	movs	r3, #5
 8001c08:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	4770      	bx	lr

08001c18 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001c18:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001c1a:	6804      	ldr	r4, [r0, #0]
 8001c1c:	9d04      	ldr	r5, [sp, #16]
 8001c1e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001c20:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001c24:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001c28:	4333      	orrs	r3, r6
 8001c2a:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c2c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001c2e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c34:	d130      	bne.n	8001c98 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001c36:	6886      	ldr	r6, [r0, #8]
 8001c38:	b11e      	cbz	r6, 8001c42 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001c3a:	2e01      	cmp	r6, #1
 8001c3c:	d103      	bne.n	8001c46 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8001c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8001c42:	63a1      	str	r1, [r4, #56]	; 0x38
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c46:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001c48:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001c4c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001c50:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c52:	d107      	bne.n	8001c64 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19);
 8001c54:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 8001c56:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001c58:	02c9      	lsls	r1, r1, #11
 8001c5a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001c5e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8001c62:	e7ee      	b.n	8001c42 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001c64:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001c66:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001c6a:	d10a      	bne.n	8001c82 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19);
 8001c6c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 8001c6e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c70:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8001c72:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c74:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001c78:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001c7c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001c80:	e7df      	b.n	8001c42 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20);
 8001c82:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12);
 8001c84:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001c86:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28);
 8001c88:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001c8a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001c8e:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8001c92:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8001c96:	e7d4      	b.n	8001c42 <DMA2D_SetConfig+0x2a>
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001c98:	60e1      	str	r1, [r4, #12]
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}

08001c9c <HAL_DMA2D_Init>:
{ 
 8001c9c:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	b330      	cbz	r0, 8001cf0 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ca2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001caa:	b91b      	cbnz	r3, 8001cb4 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8001cac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001cb0:	f004 f836 	bl	8005d20 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cb4:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001cb6:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cb8:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001cba:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001cbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cc6:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cc8:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cca:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ccc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cd4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cd6:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ce6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ce8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001cee:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
}
 8001cf2:	bd10      	pop	{r4, pc}

08001cf4 <HAL_DMA2D_Start>:
{
 8001cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001cf6:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 8001cfa:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8001cfc:	2c01      	cmp	r4, #1
 8001cfe:	f04f 0402 	mov.w	r4, #2
 8001d02:	d00f      	beq.n	8001d24 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d04:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001d08:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d0a:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001d0c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d10:	9400      	str	r4, [sp, #0]
 8001d12:	f7ff ff81 	bl	8001c18 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d16:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	4333      	orrs	r3, r6
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	b002      	add	sp, #8
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001d24:	4620      	mov	r0, r4
 8001d26:	e7fb      	b.n	8001d20 <HAL_DMA2D_Start+0x2c>

08001d28 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0;  
 8001d28:	2300      	movs	r3, #0
{
 8001d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001d2c:	9301      	str	r3, [sp, #4]
{
 8001d2e:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d30:	6803      	ldr	r3, [r0, #0]
{
 8001d32:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	07db      	lsls	r3, r3, #31
 8001d38:	d427      	bmi.n	8001d8a <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	0696      	lsls	r6, r2, #26
 8001d40:	d55c      	bpl.n	8001dfc <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001d42:	f7ff fcbf 	bl	80016c4 <HAL_GetTick>
 8001d46:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	06d2      	lsls	r2, r2, #27
 8001d4e:	d458      	bmi.n	8001e02 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001d54:	9a01      	ldr	r2, [sp, #4]
 8001d56:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d5a:	d05d      	beq.n	8001e18 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001d5c:	9a01      	ldr	r2, [sp, #4]
 8001d5e:	0716      	lsls	r6, r2, #28
 8001d60:	d503      	bpl.n	8001d6a <HAL_DMA2D_PollForTransfer+0x42>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001d62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d64:	f042 0204 	orr.w	r2, r2, #4
 8001d68:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001d6a:	9a01      	ldr	r2, [sp, #4]
 8001d6c:	0695      	lsls	r5, r2, #26
 8001d6e:	d503      	bpl.n	8001d78 <HAL_DMA2D_PollForTransfer+0x50>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001d70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d72:	f042 0202 	orr.w	r2, r2, #2
 8001d76:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001d78:	9a01      	ldr	r2, [sp, #4]
 8001d7a:	07d0      	lsls	r0, r2, #31
 8001d7c:	d503      	bpl.n	8001d86 <HAL_DMA2D_PollForTransfer+0x5e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001d7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d86:	2229      	movs	r2, #41	; 0x29
 8001d88:	e01b      	b.n	8001dc2 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001d8a:	f7ff fc9b 	bl	80016c4 <HAL_GetTick>
 8001d8e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	0792      	lsls	r2, r2, #30
 8001d96:	d4d0      	bmi.n	8001d3a <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001d9c:	9a01      	ldr	r2, [sp, #4]
 8001d9e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001da2:	d017      	beq.n	8001dd4 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001da4:	9a01      	ldr	r2, [sp, #4]
 8001da6:	0695      	lsls	r5, r2, #26
 8001da8:	d503      	bpl.n	8001db2 <HAL_DMA2D_PollForTransfer+0x8a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001daa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dac:	f042 0202 	orr.w	r2, r2, #2
 8001db0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001db2:	9a01      	ldr	r2, [sp, #4]
 8001db4:	07d0      	lsls	r0, r2, #31
 8001db6:	d503      	bpl.n	8001dc0 <HAL_DMA2D_PollForTransfer+0x98>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001db8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dc0:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dc2:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001dc4:	2304      	movs	r3, #4
        return HAL_ERROR;      
 8001dc6:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001dc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;      
 8001dd2:	e01f      	b.n	8001e14 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001dd4:	1c69      	adds	r1, r5, #1
 8001dd6:	d0dc      	beq.n	8001d92 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001dd8:	b955      	cbnz	r5, 8001df0 <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dde:	f043 0320 	orr.w	r3, r3, #32
 8001de2:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8001de4:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001de6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001dea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001dee:	e011      	b.n	8001e14 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001df0:	f7ff fc68 	bl	80016c4 <HAL_GetTick>
 8001df4:	1b80      	subs	r0, r0, r6
 8001df6:	4285      	cmp	r5, r0
 8001df8:	d2ca      	bcs.n	8001d90 <HAL_DMA2D_PollForTransfer+0x68>
 8001dfa:	e7ee      	b.n	8001dda <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001dfe:	069b      	lsls	r3, r3, #26
 8001e00:	d49f      	bmi.n	8001d42 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8001e06:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e08:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e0a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8001e0c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001e14:	b002      	add	sp, #8
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001e18:	1c69      	adds	r1, r5, #1
 8001e1a:	d096      	beq.n	8001d4a <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d0dc      	beq.n	8001dda <HAL_DMA2D_PollForTransfer+0xb2>
 8001e20:	f7ff fc50 	bl	80016c4 <HAL_GetTick>
 8001e24:	1b80      	subs	r0, r0, r6
 8001e26:	4285      	cmp	r5, r0
 8001e28:	d28e      	bcs.n	8001d48 <HAL_DMA2D_PollForTransfer+0x20>
 8001e2a:	e7d6      	b.n	8001dda <HAL_DMA2D_PollForTransfer+0xb2>

08001e2c <HAL_DMA2D_LineEventCallback>:
 8001e2c:	4770      	bx	lr

08001e2e <HAL_DMA2D_CLUTLoadingCpltCallback>:
{
 8001e2e:	4770      	bx	lr

08001e30 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e30:	6803      	ldr	r3, [r0, #0]
{
 8001e32:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e34:	685e      	ldr	r6, [r3, #4]
{
 8001e36:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001e38:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001e3a:	07f2      	lsls	r2, r6, #31
 8001e3c:	d514      	bpl.n	8001e68 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8001e3e:	05e9      	lsls	r1, r5, #23
 8001e40:	d512      	bpl.n	8001e68 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e4a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001e52:	2201      	movs	r2, #1
 8001e54:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e56:	2304      	movs	r3, #4
 8001e58:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001e62:	6943      	ldr	r3, [r0, #20]
 8001e64:	b103      	cbz	r3, 8001e68 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8001e66:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001e68:	06b2      	lsls	r2, r6, #26
 8001e6a:	d516      	bpl.n	8001e9a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8001e6c:	04ab      	lsls	r3, r5, #18
 8001e6e:	d514      	bpl.n	8001e9a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e78:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8001e7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e86:	2304      	movs	r3, #4
 8001e88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001e92:	6963      	ldr	r3, [r4, #20]
 8001e94:	b10b      	cbz	r3, 8001e9a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8001e96:	4620      	mov	r0, r4
 8001e98:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001e9a:	0730      	lsls	r0, r6, #28
 8001e9c:	d516      	bpl.n	8001ecc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8001e9e:	0529      	lsls	r1, r5, #20
 8001ea0:	d514      	bpl.n	8001ecc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001eac:	2208      	movs	r2, #8
 8001eae:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8001eb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001ec4:	6963      	ldr	r3, [r4, #20]
 8001ec6:	b10b      	cbz	r3, 8001ecc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8001ecc:	0772      	lsls	r2, r6, #29
 8001ece:	d50b      	bpl.n	8001ee8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8001ed0:	056b      	lsls	r3, r5, #21
 8001ed2:	d509      	bpl.n	8001ee8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ed4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ed6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ee4:	f7ff ffa2 	bl	8001e2c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001ee8:	07b0      	lsls	r0, r6, #30
 8001eea:	d514      	bpl.n	8001f16 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8001eec:	05a9      	lsls	r1, r5, #22
 8001eee:	d512      	bpl.n	8001f16 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001efa:	2202      	movs	r2, #2
 8001efc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8001efe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f00:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8001f0e:	6923      	ldr	r3, [r4, #16]
 8001f10:	b10b      	cbz	r3, 8001f16 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8001f12:	4620      	mov	r0, r4
 8001f14:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001f16:	06f2      	lsls	r2, r6, #27
 8001f18:	d513      	bpl.n	8001f42 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8001f1a:	04eb      	lsls	r3, r5, #19
 8001f1c:	d511      	bpl.n	8001f42 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f1e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8001f20:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f28:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8001f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f30:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8001f3e:	f7ff ff76 	bl	8001e2e <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001f42:	bd70      	pop	{r4, r5, r6, pc}

08001f44 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001f44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	f04f 0302 	mov.w	r3, #2
{ 
 8001f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8001f50:	d037      	beq.n	8001fc2 <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f52:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8001f54:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001f56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f5a:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8001f5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8001f60:	4f1c      	ldr	r7, [pc, #112]	; (8001fd4 <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f62:	69dd      	ldr	r5, [r3, #28]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f68:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f6c:	3d09      	subs	r5, #9
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	2d01      	cmp	r5, #1
 8001f72:	d80f      	bhi.n	8001f94 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f74:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8001f78:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == 0)
 8001f7c:	b969      	cbnz	r1, 8001f9a <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f80:	4039      	ands	r1, r7
 8001f82:	430a      	orrs	r2, r1
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f86:	6982      	ldr	r2, [r0, #24]
 8001f88:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
 8001f92:	e010      	b.n	8001fb6 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f94:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 8001f98:	b1a9      	cbz	r1, 8001fc6 <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f9a:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001f9c:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f9e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001fa0:	ea01 0107 	and.w	r1, r1, r7
 8001fa4:	ea42 0201 	orr.w	r2, r2, r1
 8001fa8:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001faa:	69b2      	ldr	r2, [r6, #24]
 8001fac:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fae:	d802      	bhi.n	8001fb6 <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001fb0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001fb4:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001fc6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001fc8:	4039      	ands	r1, r7
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001fce:	6982      	ldr	r2, [r0, #24]
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	e7f0      	b.n	8001fb6 <HAL_DMA2D_ConfigLayer+0x72>
 8001fd4:	00fcfff0 	.word	0x00fcfff0

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fdc:	680b      	ldr	r3, [r1, #0]
{
 8001fde:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80021a4 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fe6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe8:	4a6c      	ldr	r2, [pc, #432]	; (800219c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fea:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80021a8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001fee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001ff4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001ffc:	45b6      	cmp	lr, r6
 8001ffe:	f040 80b3 	bne.w	8002168 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002002:	684c      	ldr	r4, [r1, #4]
 8002004:	f024 0710 	bic.w	r7, r4, #16
 8002008:	2f02      	cmp	r7, #2
 800200a:	d116      	bne.n	800203a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800200c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002010:	f003 0b07 	and.w	fp, r3, #7
 8002014:	f04f 0c0f 	mov.w	ip, #15
 8002018:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800201c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002020:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002024:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002028:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800202c:	690d      	ldr	r5, [r1, #16]
 800202e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002032:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8002036:	f8ca 5020 	str.w	r5, [sl, #32]
 800203a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800203e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002040:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002044:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002048:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800204e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002052:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002054:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002056:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800205a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800205e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002062:	d811      	bhi.n	8002088 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002064:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002066:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800206a:	68cf      	ldr	r7, [r1, #12]
 800206c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002070:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002074:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002076:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002078:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800207c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002080:	409f      	lsls	r7, r3
 8002082:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002086:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002088:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800208a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800208c:	688f      	ldr	r7, [r1, #8]
 800208e:	fa07 f70a 	lsl.w	r7, r7, sl
 8002092:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002094:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002096:	00e5      	lsls	r5, r4, #3
 8002098:	d566      	bpl.n	8002168 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800209e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020a2:	f003 0e03 	and.w	lr, r3, #3
 80020a6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80020ae:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80020ba:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80020be:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80020c2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80020c6:	9503      	str	r5, [sp, #12]
 80020c8:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020ca:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80020ce:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020d2:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020d6:	4d32      	ldr	r5, [pc, #200]	; (80021a0 <HAL_GPIO_Init+0x1c8>)
 80020d8:	42a8      	cmp	r0, r5
 80020da:	d04c      	beq.n	8002176 <HAL_GPIO_Init+0x19e>
 80020dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e0:	42a8      	cmp	r0, r5
 80020e2:	d04a      	beq.n	800217a <HAL_GPIO_Init+0x1a2>
 80020e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e8:	42a8      	cmp	r0, r5
 80020ea:	d048      	beq.n	800217e <HAL_GPIO_Init+0x1a6>
 80020ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020f0:	42a8      	cmp	r0, r5
 80020f2:	d046      	beq.n	8002182 <HAL_GPIO_Init+0x1aa>
 80020f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020f8:	42a8      	cmp	r0, r5
 80020fa:	d044      	beq.n	8002186 <HAL_GPIO_Init+0x1ae>
 80020fc:	4548      	cmp	r0, r9
 80020fe:	d044      	beq.n	800218a <HAL_GPIO_Init+0x1b2>
 8002100:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002104:	42a8      	cmp	r0, r5
 8002106:	d042      	beq.n	800218e <HAL_GPIO_Init+0x1b6>
 8002108:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800210c:	42a8      	cmp	r0, r5
 800210e:	d040      	beq.n	8002192 <HAL_GPIO_Init+0x1ba>
 8002110:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002114:	42a8      	cmp	r0, r5
 8002116:	d03e      	beq.n	8002196 <HAL_GPIO_Init+0x1be>
 8002118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800211c:	42a8      	cmp	r0, r5
 800211e:	bf14      	ite	ne
 8002120:	250a      	movne	r5, #10
 8002122:	2509      	moveq	r5, #9
 8002124:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002128:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800212c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002130:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002132:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002136:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002138:	bf0c      	ite	eq
 800213a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800213c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002142:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002144:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002146:	bf0c      	ite	eq
 8002148:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800214a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800214c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002150:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002152:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002154:	bf0c      	ite	eq
 8002156:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002158:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800215a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800215c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800215e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002160:	bf54      	ite	pl
 8002162:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002164:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002166:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002168:	3301      	adds	r3, #1
 800216a:	2b10      	cmp	r3, #16
 800216c:	f47f af3f 	bne.w	8001fee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002170:	b005      	add	sp, #20
 8002172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002176:	2500      	movs	r5, #0
 8002178:	e7d4      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 800217a:	2501      	movs	r5, #1
 800217c:	e7d2      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 800217e:	2502      	movs	r5, #2
 8002180:	e7d0      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 8002182:	2503      	movs	r5, #3
 8002184:	e7ce      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 8002186:	2504      	movs	r5, #4
 8002188:	e7cc      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 800218a:	2505      	movs	r5, #5
 800218c:	e7ca      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 800218e:	2506      	movs	r5, #6
 8002190:	e7c8      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 8002192:	2507      	movs	r5, #7
 8002194:	e7c6      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 8002196:	2508      	movs	r5, #8
 8002198:	e7c4      	b.n	8002124 <HAL_GPIO_Init+0x14c>
 800219a:	bf00      	nop
 800219c:	40013c00 	.word	0x40013c00
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021400 	.word	0x40021400

080021ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	b10a      	cbz	r2, 80021b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ae:	6181      	str	r1, [r0, #24]
 80021b0:	4770      	bx	lr
 80021b2:	0409      	lsls	r1, r1, #16
 80021b4:	e7fb      	b.n	80021ae <HAL_GPIO_WritePin+0x2>

080021b6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	0791      	lsls	r1, r2, #30
 80021bc:	d501      	bpl.n	80021c2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	07d2      	lsls	r2, r2, #31
 80021c6:	d403      	bmi.n	80021d0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	4770      	bx	lr

080021d2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80021d2:	b530      	push	{r4, r5, lr}
 80021d4:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021d6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80021da:	6805      	ldr	r5, [r0, #0]
 80021dc:	4323      	orrs	r3, r4
 80021de:	0d64      	lsrs	r4, r4, #21
 80021e0:	6868      	ldr	r0, [r5, #4]
 80021e2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80021e6:	4319      	orrs	r1, r3
 80021e8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80021ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80021f0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80021f4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80021f8:	f044 0403 	orr.w	r4, r4, #3
 80021fc:	ea20 0404 	bic.w	r4, r0, r4
 8002200:	4321      	orrs	r1, r4
 8002202:	6069      	str	r1, [r5, #4]
 8002204:	bd30      	pop	{r4, r5, pc}

08002206 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002206:	f011 0301 	ands.w	r3, r1, #1
 800220a:	d007      	beq.n	800221c <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800220c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002210:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002214:	2b28      	cmp	r3, #40	; 0x28
 8002216:	bf0c      	ite	eq
 8002218:	2342      	moveq	r3, #66	; 0x42
 800221a:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800221c:	078a      	lsls	r2, r1, #30
 800221e:	d509      	bpl.n	8002234 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002220:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002224:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002228:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800222a:	bf0c      	ite	eq
 800222c:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002230:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002234:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002236:	f001 0211 	and.w	r2, r1, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800223a:	f001 0112 	and.w	r1, r1, #18
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800223e:	bf48      	it	mi
 8002240:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002244:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002246:	bf08      	it	eq
 8002248:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800224c:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800224e:	6801      	ldr	r1, [r0, #0]

  return HAL_OK;
}
 8002250:	f04f 0000 	mov.w	r0, #0
    tmpisr |= I2C_IT_TCI;
 8002254:	bf08      	it	eq
 8002256:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800225a:	680a      	ldr	r2, [r1, #0]
 800225c:	ea22 0303 	bic.w	r3, r2, r3
 8002260:	600b      	str	r3, [r1, #0]
}
 8002262:	4770      	bx	lr

08002264 <I2C_WaitOnFlagUntilTimeout>:
{
 8002264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002268:	9f06      	ldr	r7, [sp, #24]
 800226a:	4604      	mov	r4, r0
 800226c:	4688      	mov	r8, r1
 800226e:	4616      	mov	r6, r2
 8002270:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6993      	ldr	r3, [r2, #24]
 8002276:	ea38 0303 	bics.w	r3, r8, r3
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	42b3      	cmp	r3, r6
 8002282:	d002      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
}
 8002286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800228a:	1c6b      	adds	r3, r5, #1
 800228c:	d0f2      	beq.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800228e:	b955      	cbnz	r5, 80022a6 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8002290:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8002292:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8002294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800229e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a6:	f7ff fa0d 	bl	80016c4 <HAL_GetTick>
 80022aa:	1bc0      	subs	r0, r0, r7
 80022ac:	4285      	cmp	r5, r0
 80022ae:	d2e0      	bcs.n	8002272 <I2C_WaitOnFlagUntilTimeout+0xe>
 80022b0:	e7ee      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0x2c>

080022b2 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b2:	6803      	ldr	r3, [r0, #0]
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b8:	6998      	ldr	r0, [r3, #24]
{
 80022ba:	460d      	mov	r5, r1
 80022bc:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022be:	f010 0010 	ands.w	r0, r0, #16
 80022c2:	d112      	bne.n	80022ea <I2C_IsAcknowledgeFailed+0x38>
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80022c6:	1c69      	adds	r1, r5, #1
 80022c8:	d010      	beq.n	80022ec <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ca:	b94d      	cbnz	r5, 80022e0 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80022ce:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80022da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80022de:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e0:	f7ff f9f0 	bl	80016c4 <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	4285      	cmp	r5, r0
 80022e8:	d3f0      	bcc.n	80022cc <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	6999      	ldr	r1, [r3, #24]
 80022ee:	068a      	lsls	r2, r1, #26
 80022f0:	d5e9      	bpl.n	80022c6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80022f6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022fa:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80022fc:	f7ff ff5b 	bl	80021b6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002300:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002304:	6853      	ldr	r3, [r2, #4]
 8002306:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800230a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800230e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002318:	2304      	movs	r3, #4
 800231a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002322:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800232a:	bd70      	pop	{r4, r5, r6, pc}

0800232c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	079b      	lsls	r3, r3, #30
 800233a:	d501      	bpl.n	8002340 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002340:	4632      	mov	r2, r6
 8002342:	4629      	mov	r1, r5
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ffb4 	bl	80022b2 <I2C_IsAcknowledgeFailed>
 800234a:	b9b0      	cbnz	r0, 800237a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800234c:	1c6a      	adds	r2, r5, #1
 800234e:	d0f1      	beq.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002350:	b96d      	cbnz	r5, 800236e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002354:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800235c:	2320      	movs	r3, #32
 800235e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	2300      	movs	r3, #0
 8002364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800236c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800236e:	f7ff f9a9 	bl	80016c4 <HAL_GetTick>
 8002372:	1b80      	subs	r0, r0, r6
 8002374:	4285      	cmp	r5, r0
 8002376:	d2dd      	bcs.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8002378:	e7eb      	b.n	8002352 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
}
 800237c:	bd70      	pop	{r4, r5, r6, pc}

0800237e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800237e:	b570      	push	{r4, r5, r6, lr}
 8002380:	4604      	mov	r4, r0
 8002382:	460d      	mov	r5, r1
 8002384:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	069b      	lsls	r3, r3, #26
 800238c:	d501      	bpl.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800238e:	2000      	movs	r0, #0
 8002390:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	4632      	mov	r2, r6
 8002394:	4629      	mov	r1, r5
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ff8b 	bl	80022b2 <I2C_IsAcknowledgeFailed>
 800239c:	b9a0      	cbnz	r0, 80023c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800239e:	b96d      	cbnz	r5, 80023bc <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80023a2:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	2320      	movs	r3, #32
 80023ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80023b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023bc:	f7ff f982 	bl	80016c4 <HAL_GetTick>
 80023c0:	1b80      	subs	r0, r0, r6
 80023c2:	4285      	cmp	r5, r0
 80023c4:	d2df      	bcs.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80023c6:	e7eb      	b.n	80023a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
}
 80023ca:	bd70      	pop	{r4, r5, r6, pc}

080023cc <HAL_I2C_Init>:
{
 80023cc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80023ce:	4604      	mov	r4, r0
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d04a      	beq.n	800246a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023dc:	b91b      	cbnz	r3, 80023e6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80023de:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80023e2:	f003 fcbb 	bl	8005d5c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e6:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e8:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ee:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023fa:	6862      	ldr	r2, [r4, #4]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800240c:	d124      	bne.n	8002458 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800240e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002412:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002414:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002416:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002418:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800241e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002422:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800242c:	6922      	ldr	r2, [r4, #16]
 800242e:	430a      	orrs	r2, r1
 8002430:	69a1      	ldr	r1, [r4, #24]
 8002432:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002436:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002438:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800243a:	69e2      	ldr	r2, [r4, #28]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002448:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800244c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002450:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002456:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002458:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800245c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800245e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	d1d8      	bne.n	8002414 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	e7d4      	b.n	8002414 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800246a:	2001      	movs	r0, #1
}
 800246c:	bd10      	pop	{r4, pc}
	...

08002470 <HAL_I2C_Master_Transmit>:
{
 8002470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002474:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800247a:	4604      	mov	r4, r0
 800247c:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	2b20      	cmp	r3, #32
{
 8002480:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	f040 8089 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 8002486:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800248a:	2b01      	cmp	r3, #1
 800248c:	f000 8084 	beq.w	8002598 <HAL_I2C_Master_Transmit+0x128>
 8002490:	2701      	movs	r7, #1
 8002492:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002496:	f7ff f915 	bl	80016c4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800249a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800249c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800249e:	9000      	str	r0, [sp, #0]
 80024a0:	463a      	mov	r2, r7
 80024a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff fedc 	bl	8002264 <I2C_WaitOnFlagUntilTimeout>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d148      	bne.n	8002542 <HAL_I2C_Master_Transmit+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b0:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80024b2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80024b6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024bc:	2310      	movs	r3, #16
 80024be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80024c4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_I2C_Master_Transmit+0x12c>)
 80024d0:	d925      	bls.n	800251e <HAL_I2C_Master_Transmit+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024d4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024dc:	4631      	mov	r1, r6
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fe77 	bl	80021d2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	462a      	mov	r2, r5
 80024e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80024ea:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b9f3      	cbnz	r3, 800252e <HAL_I2C_Master_Transmit+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	f7ff ff45 	bl	800237e <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f4:	b9f0      	cbnz	r0, 8002534 <HAL_I2C_Master_Transmit+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	2120      	movs	r1, #32
 80024fa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002502:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002506:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002514:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002518:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800251c:	e00e      	b.n	800253c <HAL_I2C_Master_Transmit+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 800251e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002520:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002522:	b292      	uxth	r2, r2
 8002524:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	e7d6      	b.n	80024dc <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252e:	f7ff fefd 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002532:	b140      	cbz	r0, 8002546 <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002534:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002536:	2b04      	cmp	r3, #4
 8002538:	d103      	bne.n	8002542 <HAL_I2C_Master_Transmit+0xd2>
          return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
}
 800253c:	b003      	add	sp, #12
 800253e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8002542:	2003      	movs	r0, #3
 8002544:	e7fa      	b.n	800253c <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	6261      	str	r1, [r4, #36]	; 0x24
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8002552:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002556:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002558:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800255a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800255c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800255e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002560:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002562:	2a00      	cmp	r2, #0
 8002564:	d1be      	bne.n	80024e4 <HAL_I2C_Master_Transmit+0x74>
 8002566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ba      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800256e:	9500      	str	r5, [sp, #0]
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff fe75 	bl	8002264 <I2C_WaitOnFlagUntilTimeout>
 800257a:	2800      	cmp	r0, #0
 800257c:	d1e1      	bne.n	8002542 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2bff      	cmp	r3, #255	; 0xff
 8002584:	d903      	bls.n	800258e <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002586:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002588:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258a:	8522      	strh	r2, [r4, #40]	; 0x28
 800258c:	e7a4      	b.n	80024d8 <HAL_I2C_Master_Transmit+0x68>
          hi2c->XferSize = hi2c->XferCount;
 800258e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002590:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002592:	b292      	uxth	r2, r2
 8002594:	8522      	strh	r2, [r4, #40]	; 0x28
 8002596:	e7c6      	b.n	8002526 <HAL_I2C_Master_Transmit+0xb6>
    return HAL_BUSY;
 8002598:	2002      	movs	r0, #2
 800259a:	e7cf      	b.n	800253c <HAL_I2C_Master_Transmit+0xcc>
 800259c:	80002000 	.word	0x80002000

080025a0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80025a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025a6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80025a8:	b103      	cbz	r3, 80025ac <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80025aa:	4718      	bx	r3
 80025ac:	4770      	bx	lr

080025ae <HAL_I2C_SlaveTxCpltCallback>:
 80025ae:	4770      	bx	lr

080025b0 <HAL_I2C_SlaveRxCpltCallback>:
 80025b0:	4770      	bx	lr

080025b2 <I2C_ITSlaveSequentialCplt>:
{
 80025b2:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	2500      	movs	r5, #0
{
 80025b6:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025c0:	2b29      	cmp	r3, #41	; 0x29
 80025c2:	d10d      	bne.n	80025e0 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025c4:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025c6:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025cc:	2321      	movs	r3, #33	; 0x21
 80025ce:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025d0:	f7ff fe19 	bl	8002206 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025d4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ffe8 	bl	80025ae <HAL_I2C_SlaveTxCpltCallback>
 80025de:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025e4:	2b2a      	cmp	r3, #42	; 0x2a
 80025e6:	d10c      	bne.n	8002602 <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025e8:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025ea:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025f0:	2322      	movs	r3, #34	; 0x22
 80025f2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025f4:	f7ff fe07 	bl	8002206 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025f8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7ff ffd7 	bl	80025b0 <HAL_I2C_SlaveRxCpltCallback>
 8002602:	bd38      	pop	{r3, r4, r5, pc}

08002604 <HAL_I2C_AddrCallback>:
{
 8002604:	4770      	bx	lr

08002606 <HAL_I2C_ListenCpltCallback>:
 8002606:	4770      	bx	lr

08002608 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 800260a:	2220      	movs	r2, #32
{
 800260c:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002610:	2300      	movs	r3, #0
{
 8002612:	4604      	mov	r4, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8002614:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002616:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002618:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002620:	074b      	lsls	r3, r1, #29
 8002622:	d511      	bpl.n	8002648 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002624:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	6242      	str	r2, [r0, #36]	; 0x24
 800262a:	6802      	ldr	r2, [r0, #0]
 800262c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800262e:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8002630:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002632:	b14b      	cbz	r3, 8002648 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8002634:	3b01      	subs	r3, #1
 8002636:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002638:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002640:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002648:	2107      	movs	r1, #7
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff fddb 	bl	8002206 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	2210      	movs	r2, #16
  HAL_I2C_ListenCpltCallback(hi2c);
 8002654:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002656:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002658:	2300      	movs	r3, #0
 800265a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800265e:	f7ff ffd2 	bl	8002606 <HAL_I2C_ListenCpltCallback>
 8002662:	bd10      	pop	{r4, pc}
 8002664:	ffff0000 	.word	0xffff0000

08002668 <HAL_I2C_ErrorCallback>:
 8002668:	4770      	bx	lr

0800266a <HAL_I2C_AbortCpltCallback>:
{
 800266a:	4770      	bx	lr

0800266c <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800266c:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800266e:	4a34      	ldr	r2, [pc, #208]	; (8002740 <I2C_ITError+0xd4>)
{
 8002670:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002672:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
{
 8002676:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002678:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800267a:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800267c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800267e:	4319      	orrs	r1, r3
 8002680:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002682:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002686:	2b28      	cmp	r3, #40	; 0x28
 8002688:	d007      	beq.n	800269a <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800268a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800268e:	2b29      	cmp	r3, #41	; 0x29
 8002690:	d003      	beq.n	800269a <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002692:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002696:	2b2a      	cmp	r3, #42	; 0x2a
 8002698:	d121      	bne.n	80026de <I2C_ITError+0x72>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800269a:	2103      	movs	r1, #3
 800269c:	4620      	mov	r0, r4
 800269e:	f7ff fdb2 	bl	8002206 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a2:	2328      	movs	r3, #40	; 0x28
 80026a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <I2C_ITError+0xd8>)
    hi2c->XferISR       = NULL;
 80026ae:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026b4:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b6:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 80026ba:	d01d      	beq.n	80026f8 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c2:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <I2C_ITError+0xdc>)
 80026c6:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 80026c8:	2300      	movs	r3, #0
 80026ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026ce:	f7ff fa91 	bl	8001bf4 <HAL_DMA_Abort_IT>
 80026d2:	b3a0      	cbz	r0, 800273e <I2C_ITError+0xd2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80026d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026dc:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026de:	2107      	movs	r1, #7
 80026e0:	f7ff fd91 	bl	8002206 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d002      	beq.n	80026f2 <I2C_ITError+0x86>
      hi2c->State         = HAL_I2C_STATE_READY;
 80026ec:	2320      	movs	r3, #32
 80026ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	6323      	str	r3, [r4, #48]	; 0x30
 80026f6:	e7da      	b.n	80026ae <I2C_ITError+0x42>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80026f8:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 80026fc:	d00d      	beq.n	800271a <I2C_ITError+0xae>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026fe:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002700:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <I2C_ITError+0xdc>)
 800270a:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 800270c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002710:	f7ff fa70 	bl	8001bf4 <HAL_DMA_Abort_IT>
 8002714:	b198      	cbz	r0, 800273e <I2C_ITError+0xd2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002716:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002718:	e7dd      	b.n	80026d6 <I2C_ITError+0x6a>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800271a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800271e:	2b60      	cmp	r3, #96	; 0x60
 8002720:	d108      	bne.n	8002734 <I2C_ITError+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002724:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002728:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800272a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800272e:	f7ff ff9c 	bl	800266a <HAL_I2C_AbortCpltCallback>
 8002732:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8002734:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff ff95 	bl	8002668 <HAL_I2C_ErrorCallback>
 800273e:	bd10      	pop	{r4, pc}
 8002740:	ffff0000 	.word	0xffff0000
 8002744:	0800284d 	.word	0x0800284d
 8002748:	08002a5f 	.word	0x08002a5f

0800274c <I2C_ITSlaveCplt>:
{
 800274c:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274e:	2220      	movs	r2, #32
 8002750:	6803      	ldr	r3, [r0, #0]
{
 8002752:	4604      	mov	r4, r0
 8002754:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002758:	2208      	movs	r2, #8
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800275a:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800275c:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800275e:	f7ff fd52 	bl	8002206 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002762:	6823      	ldr	r3, [r4, #0]
  I2C_Flush_TXDR(hi2c);
 8002764:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002774:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002778:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002782:	f7ff fd18 	bl	80021b6 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	6813      	ldr	r3, [r2, #0]
 800278a:	0458      	lsls	r0, r3, #17
 800278c:	d402      	bmi.n	8002794 <I2C_ITSlaveCplt+0x48>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 800278e:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002790:	0419      	lsls	r1, r3, #16
 8002792:	d509      	bpl.n	80027a8 <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8002794:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002798:	2b21      	cmp	r3, #33	; 0x21
 800279a:	bf0c      	ite	eq
 800279c:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 800279e:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80027a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b11b      	cbz	r3, 80027b6 <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80027b6:	076b      	lsls	r3, r5, #29
 80027b8:	d510      	bpl.n	80027dc <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80027ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027be:	1c59      	adds	r1, r3, #1
 80027c0:	6261      	str	r1, [r4, #36]	; 0x24
 80027c2:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80027c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027c6:	b14b      	cbz	r3, 80027dc <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 80027c8:	3b01      	subs	r3, #1
 80027ca:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80027cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80027dc:	2300      	movs	r3, #0
 80027de:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 80027e0:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027e8:	b16b      	cbz	r3, 8002806 <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff ff3d 	bl	800266c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80027f2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027f6:	2b28      	cmp	r3, #40	; 0x28
 80027f8:	d124      	bne.n	8002844 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 80027fa:	4629      	mov	r1, r5
 80027fc:	4620      	mov	r0, r4
}
 80027fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002802:	f7ff bf01 	b.w	8002608 <I2C_ITListenCplt>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002808:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800280c:	d00a      	beq.n	8002824 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280e:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <I2C_ITSlaveCplt+0xfc>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8002810:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002812:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002816:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	2220      	movs	r2, #32
 800281a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800281e:	f7ff fef2 	bl	8002606 <HAL_I2C_ListenCpltCallback>
 8002822:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002824:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002828:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800282a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800282e:	2a22      	cmp	r2, #34	; 0x22
 8002830:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002838:	d102      	bne.n	8002840 <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800283a:	f7ff feb9 	bl	80025b0 <HAL_I2C_SlaveRxCpltCallback>
 800283e:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002840:	f7ff feb5 	bl	80025ae <HAL_I2C_SlaveTxCpltCallback>
 8002844:	bd38      	pop	{r3, r4, r5, pc}
 8002846:	bf00      	nop
 8002848:	ffff0000 	.word	0xffff0000

0800284c <I2C_Slave_ISR_IT>:
{
 800284c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8002850:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
{
 8002854:	4604      	mov	r4, r0
 8002856:	460e      	mov	r6, r1
 8002858:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 800285a:	2b01      	cmp	r3, #1
 800285c:	f000 80cb 	beq.w	80029f6 <I2C_Slave_ISR_IT+0x1aa>
 8002860:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002862:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8002864:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002868:	d53e      	bpl.n	80028e8 <I2C_Slave_ISR_IT+0x9c>
 800286a:	06d0      	lsls	r0, r2, #27
 800286c:	d53c      	bpl.n	80028e8 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 800286e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	bb8b      	cbnz	r3, 80028d8 <I2C_Slave_ISR_IT+0x8c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8002874:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800287a:	d003      	beq.n	8002884 <I2C_Slave_ISR_IT+0x38>
 800287c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800287e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002882:	d114      	bne.n	80028ae <I2C_Slave_ISR_IT+0x62>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8002884:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8002888:	2b28      	cmp	r3, #40	; 0x28
 800288a:	d110      	bne.n	80028ae <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 800288c:	4631      	mov	r1, r6
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff feba 	bl	8002608 <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002894:	06b2      	lsls	r2, r6, #26
 8002896:	d505      	bpl.n	80028a4 <I2C_Slave_ISR_IT+0x58>
 8002898:	06bb      	lsls	r3, r7, #26
 800289a:	d503      	bpl.n	80028a4 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800289c:	4631      	mov	r1, r6
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ff54 	bl	800274c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80028aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	d00c      	beq.n	80028d2 <I2C_Slave_ISR_IT+0x86>
 80028b8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80028bc:	2a29      	cmp	r2, #41	; 0x29
 80028be:	d108      	bne.n	80028d2 <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c0:	2210      	movs	r2, #16
        I2C_Flush_TXDR(hi2c);
 80028c2:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c4:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80028c6:	f7ff fc76 	bl	80021b6 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff fe71 	bl	80025b2 <I2C_ITSlaveSequentialCplt>
 80028d0:	e7e0      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	2210      	movs	r2, #16
 80028d4:	61da      	str	r2, [r3, #28]
 80028d6:	e7dd      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6463      	str	r3, [r4, #68]	; 0x44
 80028e6:	e7d5      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 80028e8:	0771      	lsls	r1, r6, #29
 80028ea:	d51a      	bpl.n	8002922 <I2C_Slave_ISR_IT+0xd6>
 80028ec:	077a      	lsls	r2, r7, #29
 80028ee:	d518      	bpl.n	8002922 <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 80028f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b163      	cbz	r3, 8002910 <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80028f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	6262      	str	r2, [r4, #36]	; 0x24
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002900:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002902:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002908:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1bd      	bne.n	8002894 <I2C_Slave_ISR_IT+0x48>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8002918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 800291a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800291e:	d1d4      	bne.n	80028ca <I2C_Slave_ISR_IT+0x7e>
 8002920:	e7b8      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8002922:	0733      	lsls	r3, r6, #28
 8002924:	d546      	bpl.n	80029b4 <I2C_Slave_ISR_IT+0x168>
 8002926:	073d      	lsls	r5, r7, #28
 8002928:	d544      	bpl.n	80029b4 <I2C_Slave_ISR_IT+0x168>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 800292a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800292e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002932:	2b28      	cmp	r3, #40	; 0x28
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	d137      	bne.n	80029a8 <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002938:	699a      	ldr	r2, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800293a:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800293c:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800293e:	f3c2 4800 	ubfx	r8, r2, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002942:	2902      	cmp	r1, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002944:	689a      	ldr	r2, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002946:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800294a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800294e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002952:	d120      	bne.n	8002996 <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002954:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002958:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800295c:	f015 0506 	ands.w	r5, r5, #6
 8002960:	d10f      	bne.n	8002982 <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 8002962:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002964:	3101      	adds	r1, #1
 8002966:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002968:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800296a:	2902      	cmp	r1, #2
 800296c:	d192      	bne.n	8002894 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800296e:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002970:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002972:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002974:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002978:	4641      	mov	r1, r8
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff fe42 	bl	8002604 <HAL_I2C_AddrCallback>
 8002980:	e788      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002982:	2104      	movs	r1, #4
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff fc3e 	bl	8002206 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800298a:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800298c:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8002990:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002994:	e7f0      	b.n	8002978 <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002996:	2104      	movs	r1, #4
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff fc34 	bl	8002206 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800299e:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029a0:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 80029a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029a6:	e7e7      	b.n	8002978 <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029a8:	2208      	movs	r2, #8
 80029aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029ac:	2300      	movs	r3, #0
 80029ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029b2:	e76f      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80029b4:	07b0      	lsls	r0, r6, #30
 80029b6:	f57f af6d 	bpl.w	8002894 <I2C_Slave_ISR_IT+0x48>
 80029ba:	07b9      	lsls	r1, r7, #30
 80029bc:	f57f af6a 	bpl.w	8002894 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 80029c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	b16b      	cbz	r3, 80029e2 <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	1c59      	adds	r1, r3, #1
 80029cc:	6261      	str	r1, [r4, #36]	; 0x24
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80029d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80029da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	8523      	strh	r3, [r4, #40]	; 0x28
 80029e0:	e758      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 80029e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	f43f af6f 	beq.w	80028ca <I2C_Slave_ISR_IT+0x7e>
 80029ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f43f af6b 	beq.w	80028ca <I2C_Slave_ISR_IT+0x7e>
 80029f4:	e74e      	b.n	8002894 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 80029f6:	2002      	movs	r0, #2
}
 80029f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080029fc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029fc:	6803      	ldr	r3, [r0, #0]
 80029fe:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a00:	681a      	ldr	r2, [r3, #0]
{
 8002a02:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002a04:	05cc      	lsls	r4, r1, #23
 8002a06:	d508      	bpl.n	8002a1a <HAL_I2C_ER_IRQHandler+0x1e>
 8002a08:	0614      	lsls	r4, r2, #24
 8002a0a:	d506      	bpl.n	8002a1a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002a0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a0e:	f044 0401 	orr.w	r4, r4, #1
 8002a12:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a14:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002a18:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002a1a:	054c      	lsls	r4, r1, #21
 8002a1c:	d508      	bpl.n	8002a30 <HAL_I2C_ER_IRQHandler+0x34>
 8002a1e:	0614      	lsls	r4, r2, #24
 8002a20:	d506      	bpl.n	8002a30 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a22:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a24:	f044 0408 	orr.w	r4, r4, #8
 8002a28:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a2e:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002a30:	0589      	lsls	r1, r1, #22
 8002a32:	d508      	bpl.n	8002a46 <HAL_I2C_ER_IRQHandler+0x4a>
 8002a34:	0612      	lsls	r2, r2, #24
 8002a36:	d506      	bpl.n	8002a46 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002a3a:	f042 0202 	orr.w	r2, r2, #2
 8002a3e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a44:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a48:	f013 0f0b 	tst.w	r3, #11
 8002a4c:	d004      	beq.n	8002a58 <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8002a50:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a54:	f7ff be0a 	b.w	800266c <I2C_ITError>
}
 8002a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a60:	6802      	ldr	r2, [r0, #0]
{
 8002a62:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a64:	6853      	ldr	r3, [r2, #4]
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6a:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002a70:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002a72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a74:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a7a:	2b60      	cmp	r3, #96	; 0x60
 8002a7c:	d105      	bne.n	8002a8a <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a84:	f7ff fdf1 	bl	800266a <HAL_I2C_AbortCpltCallback>
 8002a88:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8002a8a:	f7ff fded 	bl	8002668 <HAL_I2C_ErrorCallback>
 8002a8e:	bd08      	pop	{r3, pc}

08002a90 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	2a20      	cmp	r2, #32
{
 8002a98:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	d11d      	bne.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d019      	beq.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	2324      	movs	r3, #36	; 0x24
 8002aa6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aaa:	6803      	ldr	r3, [r0, #0]
 8002aac:	681c      	ldr	r4, [r3, #0]
 8002aae:	f024 0401 	bic.w	r4, r4, #1
 8002ab2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002aba:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002abc:	681c      	ldr	r4, [r3, #0]
 8002abe:	4321      	orrs	r1, r4
 8002ac0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	f041 0101 	orr.w	r1, r1, #1
 8002ac8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ad0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2002      	movs	r0, #2
  }
}
 8002ada:	bd10      	pop	{r4, pc}

08002adc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002adc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002ae2:	b2e4      	uxtb	r4, r4
 8002ae4:	2c20      	cmp	r4, #32
 8002ae6:	d11c      	bne.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d018      	beq.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	2324      	movs	r3, #36	; 0x24
 8002af2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af6:	6803      	ldr	r3, [r0, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b00:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b02:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b06:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b0a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b1a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2002      	movs	r0, #2
  }
}
 8002b24:	bd10      	pop	{r4, pc}

08002b26 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b26:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002b28:	f04f 0c00 	mov.w	ip, #0
{
 8002b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b30:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b32:	6804      	ldr	r4, [r0, #0]
 8002b34:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b36:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b38:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b3a:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b3e:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b40:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b44:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002b48:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b4c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b50:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b52:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b54:	68e0      	ldr	r0, [r4, #12]
 8002b56:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002b5a:	4430      	add	r0, r6
 8002b5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002b60:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b62:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002b64:	68e0      	ldr	r0, [r4, #12]
 8002b66:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002b6a:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002b6c:	6898      	ldr	r0, [r3, #8]
 8002b6e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002b72:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002b74:	6888      	ldr	r0, [r1, #8]
 8002b76:	68e6      	ldr	r6, [r4, #12]
 8002b78:	3001      	adds	r0, #1
 8002b7a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002b7e:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b80:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002b82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002b86:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002b88:	6918      	ldr	r0, [r3, #16]
 8002b8a:	f020 0007 	bic.w	r0, r0, #7
 8002b8e:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b90:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002b92:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002b94:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002b98:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002b9c:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002ba0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002ba4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002ba8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002bac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002bb0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002bb2:	6958      	ldr	r0, [r3, #20]
 8002bb4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002bb8:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002bba:	6948      	ldr	r0, [r1, #20]
 8002bbc:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002bbe:	69d8      	ldr	r0, [r3, #28]
 8002bc0:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002bc4:	f020 0007 	bic.w	r0, r0, #7
 8002bc8:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002bca:	6a08      	ldr	r0, [r1, #32]
 8002bcc:	69cd      	ldr	r5, [r1, #28]
 8002bce:	4305      	orrs	r5, r0
 8002bd0:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bd4:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002bd6:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bda:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002bdc:	b31e      	cbz	r6, 8002c26 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002bde:	2e01      	cmp	r6, #1
 8002be0:	d023      	beq.n	8002c2a <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002be2:	1eb0      	subs	r0, r6, #2
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d922      	bls.n	8002c2e <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002be8:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8002bea:	bf0c      	ite	eq
 8002bec:	2002      	moveq	r0, #2
 8002bee:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002bf0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002bf2:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002bf6:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002bfa:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002bfc:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002bfe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002c00:	4345      	muls	r5, r0
 8002c02:	4378      	muls	r0, r7
 8002c04:	3003      	adds	r0, #3
 8002c06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002c0a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c0e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002c12:	f020 0007 	bic.w	r0, r0, #7
 8002c16:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c18:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c1a:	58a3      	ldr	r3, [r4, r2]
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	50a3      	str	r3, [r4, r2]
 8002c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8002c26:	2004      	movs	r0, #4
 8002c28:	e7e2      	b.n	8002bf0 <LTDC_SetConfig+0xca>
    tmp = 3;
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	e7e0      	b.n	8002bf0 <LTDC_SetConfig+0xca>
    tmp = 2;
 8002c2e:	2002      	movs	r0, #2
 8002c30:	e7de      	b.n	8002bf0 <LTDC_SetConfig+0xca>
	...

08002c34 <HAL_LTDC_Init>:
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8002c36:	4604      	mov	r4, r0
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d067      	beq.n	8002d0c <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002c3c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c44:	b91b      	cbnz	r3, 8002c4e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002c46:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002c4a:	f003 f8df 	bl	8005e0c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c4e:	2302      	movs	r3, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c50:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c52:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c60:	6862      	ldr	r2, [r4, #4]
 8002c62:	6999      	ldr	r1, [r3, #24]
 8002c64:	4302      	orrs	r2, r0
 8002c66:	68e0      	ldr	r0, [r4, #12]
 8002c68:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c6a:	6920      	ldr	r0, [r4, #16]
 8002c6c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002c6e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c70:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c74:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002c82:	69a0      	ldr	r0, [r4, #24]
 8002c84:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002c86:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c88:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002c96:	6a20      	ldr	r0, [r4, #32]
 8002c98:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002c9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c9c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002caa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002cac:	4302      	orrs	r2, r0
 8002cae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	4011      	ands	r1, r2
 8002cb4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002cb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002cc6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cca:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002cce:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cd2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002ce0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002ce4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cea:	f042 0204 	orr.w	r2, r2, #4
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf2:	f042 0202 	orr.w	r2, r2, #2
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d00:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002d02:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d06:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
}
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	f000f800 	.word	0xf000f800

08002d14 <HAL_LTDC_ErrorCallback>:
 8002d14:	4770      	bx	lr

08002d16 <HAL_LTDC_LineEventCallback>:
 8002d16:	4770      	bx	lr

08002d18 <HAL_LTDC_ReloadEventCallback>:
{
 8002d18:	4770      	bx	lr

08002d1a <HAL_LTDC_IRQHandler>:
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8002d1a:	6803      	ldr	r3, [r0, #0]
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1e:	0751      	lsls	r1, r2, #29
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8002d24:	d515      	bpl.n	8002d52 <HAL_LTDC_IRQHandler+0x38>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8002d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d28:	0752      	lsls	r2, r2, #29
 8002d2a:	d512      	bpl.n	8002d52 <HAL_LTDC_IRQHandler+0x38>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002d34:	2204      	movs	r2, #4
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002d38:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
      __HAL_UNLOCK(hltdc);
 8002d44:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002d46:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002d4a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 8002d4e:	f7ff ffe1 	bl	8002d14 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	0790      	lsls	r0, r2, #30
 8002d58:	d516      	bpl.n	8002d88 <HAL_LTDC_IRQHandler+0x6e>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5c:	0791      	lsls	r1, r2, #30
 8002d5e:	d513      	bpl.n	8002d88 <HAL_LTDC_IRQHandler+0x6e>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ErrorCallback(hltdc);
 8002d62:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002d64:	f022 0202 	bic.w	r2, r2, #2
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002d6e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 8002d84:	f7ff ffc6 	bl	8002d14 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	07d2      	lsls	r2, r2, #31
 8002d8e:	d510      	bpl.n	8002db2 <HAL_LTDC_IRQHandler+0x98>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8002d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d92:	07d0      	lsls	r0, r2, #31
 8002d94:	d50d      	bpl.n	8002db2 <HAL_LTDC_IRQHandler+0x98>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_LineEventCallback(hltdc);
 8002d98:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002da0:	2201      	movs	r2, #1
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_UNLOCK(hltdc);
 8002da4:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_READY;
 8002da6:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002daa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_LineEventCallback(hltdc);
 8002dae:	f7ff ffb2 	bl	8002d16 <HAL_LTDC_LineEventCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	0711      	lsls	r1, r2, #28
 8002db8:	d511      	bpl.n	8002dde <HAL_LTDC_IRQHandler+0xc4>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8002dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbc:	0712      	lsls	r2, r2, #28
 8002dbe:	d50e      	bpl.n	8002dde <HAL_LTDC_IRQHandler+0xc4>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002dc2:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002dca:	2208      	movs	r2, #8
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->State = HAL_LTDC_STATE_READY;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002dda:	f7ff ff9d 	bl	8002d18 <HAL_LTDC_ReloadEventCallback>
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <HAL_LTDC_ConfigLayer>:
{   
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002de2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 8002de6:	4606      	mov	r6, r0
 8002de8:	468e      	mov	lr, r1
 8002dea:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	f04f 0002 	mov.w	r0, #2
 8002df2:	d01d      	beq.n	8002e30 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002df4:	2434      	movs	r4, #52	; 0x34
 8002df6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002df8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8002dfc:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002dfe:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8002e02:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002e06:	3438      	adds	r4, #56	; 0x38
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e14:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e16:	4630      	mov	r0, r6
 8002e18:	4662      	mov	r2, ip
 8002e1a:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002e1c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e1e:	f7ff fe82 	bl	8002b26 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e22:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002e24:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e26:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002e28:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002e2c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e32 <HAL_LTDC_GetState>:
  return hltdc->State;
 8002e32:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002e36:	4770      	bx	lr

08002e38 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002e3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e3e:	4c19      	ldr	r4, [pc, #100]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e58:	f7fe fc34 	bl	80016c4 <HAL_GetTick>
 8002e5c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e5e:	6863      	ldr	r3, [r4, #4]
 8002e60:	03da      	lsls	r2, r3, #15
 8002e62:	d50c      	bpl.n	8002e7e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7fe fc2a 	bl	80016c4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e70:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8002e72:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e74:	6863      	ldr	r3, [r4, #4]
 8002e76:	039b      	lsls	r3, r3, #14
 8002e78:	d50a      	bpl.n	8002e90 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e006      	b.n	8002e8c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e7e:	f7fe fc21 	bl	80016c4 <HAL_GetTick>
 8002e82:	1b40      	subs	r0, r0, r5
 8002e84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e88:	d9e9      	bls.n	8002e5e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002e8a:	2003      	movs	r0, #3
}
 8002e8c:	b003      	add	sp, #12
 8002e8e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e90:	f7fe fc18 	bl	80016c4 <HAL_GetTick>
 8002e94:	1b40      	subs	r0, r0, r5
 8002e96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e9a:	d9eb      	bls.n	8002e74 <HAL_PWREx_EnableOverDrive+0x3c>
 8002e9c:	e7f5      	b.n	8002e8a <HAL_PWREx_EnableOverDrive+0x52>
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eac:	4604      	mov	r4, r0
 8002eae:	b918      	cbnz	r0, 8002eb8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002eb2:	b002      	add	sp, #8
 8002eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	07d8      	lsls	r0, r3, #31
 8002ebc:	d410      	bmi.n	8002ee0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	0799      	lsls	r1, r3, #30
 8002ec2:	d45e      	bmi.n	8002f82 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	0719      	lsls	r1, r3, #28
 8002ec8:	f100 80a3 	bmi.w	8003012 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	075a      	lsls	r2, r3, #29
 8002ed0:	f100 80c4 	bmi.w	800305c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed4:	69a2      	ldr	r2, [r4, #24]
 8002ed6:	2a00      	cmp	r2, #0
 8002ed8:	f040 812e 	bne.w	8003138 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002edc:	2000      	movs	r0, #0
 8002ede:	e7e8      	b.n	8002eb2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b93      	ldr	r3, [pc, #588]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	f002 020c 	and.w	r2, r2, #12
 8002ee8:	2a04      	cmp	r2, #4
 8002eea:	d007      	beq.n	8002efc <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	f002 020c 	and.w	r2, r2, #12
 8002ef2:	2a08      	cmp	r2, #8
 8002ef4:	d10a      	bne.n	8002f0c <HAL_RCC_OscConfig+0x64>
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	025a      	lsls	r2, r3, #9
 8002efa:	d507      	bpl.n	8002f0c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	039b      	lsls	r3, r3, #14
 8002f02:	d5dc      	bpl.n	8002ebe <HAL_RCC_OscConfig+0x16>
 8002f04:	6863      	ldr	r3, [r4, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d9      	bne.n	8002ebe <HAL_RCC_OscConfig+0x16>
 8002f0a:	e7d1      	b.n	8002eb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	4d88      	ldr	r5, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d111      	bne.n	8002f3a <HAL_RCC_OscConfig+0x92>
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fbd1 	bl	80016c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4d83      	ldr	r5, [pc, #524]	; (8003130 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002f24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	039f      	lsls	r7, r3, #14
 8002f2a:	d4c8      	bmi.n	8002ebe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fbca 	bl	80016c4 <HAL_GetTick>
 8002f30:	1b80      	subs	r0, r0, r6
 8002f32:	2864      	cmp	r0, #100	; 0x64
 8002f34:	d9f7      	bls.n	8002f26 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002f36:	2003      	movs	r0, #3
 8002f38:	e7bb      	b.n	8002eb2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3a:	b99b      	cbnz	r3, 8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fbba 	bl	80016c4 <HAL_GetTick>
 8002f50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	682b      	ldr	r3, [r5, #0]
 8002f54:	0398      	lsls	r0, r3, #14
 8002f56:	d5b2      	bpl.n	8002ebe <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fbb4 	bl	80016c4 <HAL_GetTick>
 8002f5c:	1b80      	subs	r0, r0, r6
 8002f5e:	2864      	cmp	r0, #100	; 0x64
 8002f60:	d9f7      	bls.n	8002f52 <HAL_RCC_OscConfig+0xaa>
 8002f62:	e7e8      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	d103      	bne.n	8002f74 <HAL_RCC_OscConfig+0xcc>
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	602b      	str	r3, [r5, #0]
 8002f72:	e7d0      	b.n	8002f16 <HAL_RCC_OscConfig+0x6e>
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	682b      	ldr	r3, [r5, #0]
 8002f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f80:	e7cc      	b.n	8002f1c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	4b6b      	ldr	r3, [pc, #428]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	f012 0f0c 	tst.w	r2, #12
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	f002 020c 	and.w	r2, r2, #12
 8002f92:	2a08      	cmp	r2, #8
 8002f94:	d111      	bne.n	8002fba <HAL_RCC_OscConfig+0x112>
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	0259      	lsls	r1, r3, #9
 8002f9a:	d40e      	bmi.n	8002fba <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	0792      	lsls	r2, r2, #30
 8002fa2:	d502      	bpl.n	8002faa <HAL_RCC_OscConfig+0x102>
 8002fa4:	68e2      	ldr	r2, [r4, #12]
 8002fa6:	2a01      	cmp	r2, #1
 8002fa8:	d182      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	6921      	ldr	r1, [r4, #16]
 8002fae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002fb2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002fb6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	e784      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	4d5c      	ldr	r5, [pc, #368]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	b1bb      	cbz	r3, 8002ff0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fb7c 	bl	80016c4 <HAL_GetTick>
 8002fcc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	682b      	ldr	r3, [r5, #0]
 8002fd0:	079f      	lsls	r7, r3, #30
 8002fd2:	d507      	bpl.n	8002fe4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	6922      	ldr	r2, [r4, #16]
 8002fd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002fdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fe0:	602b      	str	r3, [r5, #0]
 8002fe2:	e76f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fb6e 	bl	80016c4 <HAL_GetTick>
 8002fe8:	1b80      	subs	r0, r0, r6
 8002fea:	2802      	cmp	r0, #2
 8002fec:	d9ef      	bls.n	8002fce <HAL_RCC_OscConfig+0x126>
 8002fee:	e7a2      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb64 	bl	80016c4 <HAL_GetTick>
 8002ffc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	682b      	ldr	r3, [r5, #0]
 8003000:	0798      	lsls	r0, r3, #30
 8003002:	f57f af5f 	bpl.w	8002ec4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fb5d 	bl	80016c4 <HAL_GetTick>
 800300a:	1b80      	subs	r0, r0, r6
 800300c:	2802      	cmp	r0, #2
 800300e:	d9f6      	bls.n	8002ffe <HAL_RCC_OscConfig+0x156>
 8003010:	e791      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	6963      	ldr	r3, [r4, #20]
 8003014:	4d46      	ldr	r5, [pc, #280]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8003016:	b183      	cbz	r3, 800303a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8003018:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003020:	f7fe fb50 	bl	80016c4 <HAL_GetTick>
 8003024:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003028:	079b      	lsls	r3, r3, #30
 800302a:	f53f af4f 	bmi.w	8002ecc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302e:	f7fe fb49 	bl	80016c4 <HAL_GetTick>
 8003032:	1b80      	subs	r0, r0, r6
 8003034:	2802      	cmp	r0, #2
 8003036:	d9f6      	bls.n	8003026 <HAL_RCC_OscConfig+0x17e>
 8003038:	e77d      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800303a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003042:	f7fe fb3f 	bl	80016c4 <HAL_GetTick>
 8003046:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800304a:	079f      	lsls	r7, r3, #30
 800304c:	f57f af3e 	bpl.w	8002ecc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fb38 	bl	80016c4 <HAL_GetTick>
 8003054:	1b80      	subs	r0, r0, r6
 8003056:	2802      	cmp	r0, #2
 8003058:	d9f6      	bls.n	8003048 <HAL_RCC_OscConfig+0x1a0>
 800305a:	e76c      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 800305e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003060:	00d0      	lsls	r0, r2, #3
 8003062:	d427      	bmi.n	80030b4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003066:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003078:	4d2e      	ldr	r5, [pc, #184]	; (8003134 <HAL_RCC_OscConfig+0x28c>)
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	05d9      	lsls	r1, r3, #23
 800307e:	d51b      	bpl.n	80030b8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	68a3      	ldr	r3, [r4, #8]
 8003082:	4d2b      	ldr	r5, [pc, #172]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 8003084:	2b01      	cmp	r3, #1
 8003086:	d127      	bne.n	80030d8 <HAL_RCC_OscConfig+0x230>
 8003088:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003094:	f7fe fb16 	bl	80016c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4f25      	ldr	r7, [pc, #148]	; (8003130 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800309a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309e:	079b      	lsls	r3, r3, #30
 80030a0:	d53f      	bpl.n	8003122 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80030a2:	2e00      	cmp	r6, #0
 80030a4:	f43f af16 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4a21      	ldr	r2, [pc, #132]	; (8003130 <HAL_RCC_OscConfig+0x288>)
 80030aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	e70f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80030b4:	2600      	movs	r6, #0
 80030b6:	e7df      	b.n	8003078 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80030c0:	f7fe fb00 	bl	80016c4 <HAL_GetTick>
 80030c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	05da      	lsls	r2, r3, #23
 80030ca:	d4d9      	bmi.n	8003080 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fe fafa 	bl	80016c4 <HAL_GetTick>
 80030d0:	1bc0      	subs	r0, r0, r7
 80030d2:	2864      	cmp	r0, #100	; 0x64
 80030d4:	d9f7      	bls.n	80030c6 <HAL_RCC_OscConfig+0x21e>
 80030d6:	e72e      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	b9ab      	cbnz	r3, 8003106 <HAL_RCC_OscConfig+0x25e>
 80030da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	672b      	str	r3, [r5, #112]	; 0x70
 80030e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80030ee:	f7fe fae9 	bl	80016c4 <HAL_GetTick>
 80030f2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030f6:	0798      	lsls	r0, r3, #30
 80030f8:	d5d3      	bpl.n	80030a2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fe fae3 	bl	80016c4 <HAL_GetTick>
 80030fe:	1bc0      	subs	r0, r0, r7
 8003100:	4540      	cmp	r0, r8
 8003102:	d9f7      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
 8003104:	e717      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003106:	2b05      	cmp	r3, #5
 8003108:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800310a:	d103      	bne.n	8003114 <HAL_RCC_OscConfig+0x26c>
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	672b      	str	r3, [r5, #112]	; 0x70
 8003112:	e7b9      	b.n	8003088 <HAL_RCC_OscConfig+0x1e0>
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	672b      	str	r3, [r5, #112]	; 0x70
 800311a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	e7b5      	b.n	800308e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe facf 	bl	80016c4 <HAL_GetTick>
 8003126:	eba0 0008 	sub.w	r0, r0, r8
 800312a:	42a8      	cmp	r0, r5
 800312c:	d9b6      	bls.n	800309c <HAL_RCC_OscConfig+0x1f4>
 800312e:	e702      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	4d24      	ldr	r5, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x324>)
 800313a:	68ab      	ldr	r3, [r5, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	f43f aeb5 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003146:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	d12e      	bne.n	80031b0 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8003152:	f7fe fab7 	bl	80016c4 <HAL_GetTick>
 8003156:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	0199      	lsls	r1, r3, #6
 800315c:	d422      	bmi.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315e:	6a22      	ldr	r2, [r4, #32]
 8003160:	69e3      	ldr	r3, [r4, #28]
 8003162:	4313      	orrs	r3, r2
 8003164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003166:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800316a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800316e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003170:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003174:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4c15      	ldr	r4, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	0852      	lsrs	r2, r2, #1
 800317a:	3a01      	subs	r2, #1
 800317c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003180:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003182:	682b      	ldr	r3, [r5, #0]
 8003184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003188:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800318a:	f7fe fa9b 	bl	80016c4 <HAL_GetTick>
 800318e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	f53f aea2 	bmi.w	8002edc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe fa94 	bl	80016c4 <HAL_GetTick>
 800319c:	1b40      	subs	r0, r0, r5
 800319e:	2802      	cmp	r0, #2
 80031a0:	d9f6      	bls.n	8003190 <HAL_RCC_OscConfig+0x2e8>
 80031a2:	e6c8      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fa8e 	bl	80016c4 <HAL_GetTick>
 80031a8:	1b80      	subs	r0, r0, r6
 80031aa:	2802      	cmp	r0, #2
 80031ac:	d9d4      	bls.n	8003158 <HAL_RCC_OscConfig+0x2b0>
 80031ae:	e6c2      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80031b0:	f7fe fa88 	bl	80016c4 <HAL_GetTick>
 80031b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	f57f ae8f 	bpl.w	8002edc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe fa81 	bl	80016c4 <HAL_GetTick>
 80031c2:	1b00      	subs	r0, r0, r4
 80031c4:	2802      	cmp	r0, #2
 80031c6:	d9f6      	bls.n	80031b6 <HAL_RCC_OscConfig+0x30e>
 80031c8:	e6b5      	b.n	8002f36 <HAL_RCC_OscConfig+0x8e>
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d0:	4913      	ldr	r1, [pc, #76]	; (8003220 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80031d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d4:	688b      	ldr	r3, [r1, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x16>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80031e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80031e6:	4810      	ldr	r0, [pc, #64]	; (8003228 <HAL_RCC_GetSysClockFreq+0x58>)
 80031e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ea:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80031fc:	bf1a      	itte	ne
 80031fe:	480a      	ldrne	r0, [pc, #40]	; (8003228 <HAL_RCC_GetSysClockFreq+0x58>)
 8003200:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4808      	ldreq	r0, [pc, #32]	; (8003224 <HAL_RCC_GetSysClockFreq+0x54>)
 8003204:	fba1 0100 	umull	r0, r1, r1, r0
 8003208:	f7fd fc44 	bl	8000a94 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_GetSysClockFreq+0x50>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003214:	3301      	adds	r3, #1
 8003216:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003218:	fbb0 f0f3 	udiv	r0, r0, r3
 800321c:	bd08      	pop	{r3, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	00f42400 	.word	0x00f42400
 8003228:	017d7840 	.word	0x017d7840

0800322c <HAL_RCC_ClockConfig>:
{
 800322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003230:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003232:	4604      	mov	r4, r0
 8003234:	b910      	cbnz	r0, 800323c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003236:	2001      	movs	r0, #1
 8003238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4a46      	ldr	r2, [pc, #280]	; (8003358 <HAL_RCC_ClockConfig+0x12c>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	428b      	cmp	r3, r1
 8003246:	d328      	bcc.n	800329a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	6821      	ldr	r1, [r4, #0]
 800324a:	078f      	lsls	r7, r1, #30
 800324c:	d430      	bmi.n	80032b0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	07c8      	lsls	r0, r1, #31
 8003250:	d443      	bmi.n	80032da <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4a41      	ldr	r2, [pc, #260]	; (8003358 <HAL_RCC_ClockConfig+0x12c>)
 8003254:	6813      	ldr	r3, [r2, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	429d      	cmp	r5, r3
 800325c:	d367      	bcc.n	800332e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	0751      	lsls	r1, r2, #29
 8003262:	d470      	bmi.n	8003346 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	0713      	lsls	r3, r2, #28
 8003266:	d507      	bpl.n	8003278 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003268:	4a3c      	ldr	r2, [pc, #240]	; (800335c <HAL_RCC_ClockConfig+0x130>)
 800326a:	6921      	ldr	r1, [r4, #16]
 800326c:	6893      	ldr	r3, [r2, #8]
 800326e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003272:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003276:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003278:	f7ff ffaa 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800327c:	4b37      	ldr	r3, [pc, #220]	; (800335c <HAL_RCC_ClockConfig+0x130>)
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_ClockConfig+0x134>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	40d8      	lsrs	r0, r3
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCC_ClockConfig+0x138>)
 800328c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800328e:	2000      	movs	r0, #0
 8003290:	f002 ffa2 	bl	80061d8 <HAL_InitTick>
  return HAL_OK;
 8003294:	2000      	movs	r0, #0
 8003296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d1c3      	bne.n	8003236 <HAL_RCC_ClockConfig+0xa>
 80032ae:	e7cb      	b.n	8003248 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	f011 0f04 	tst.w	r1, #4
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_ClockConfig+0x130>)
 80032b6:	d003      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80032be:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	070e      	lsls	r6, r1, #28
 80032c2:	d503      	bpl.n	80032cc <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80032ca:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68a0      	ldr	r0, [r4, #8]
 80032d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032d4:	4302      	orrs	r2, r0
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e7b9      	b.n	800324e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	6861      	ldr	r1, [r4, #4]
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <HAL_RCC_ClockConfig+0x130>)
 80032de:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e0:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	d11c      	bne.n	800331e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	d0a5      	beq.n	8003236 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f0:	4e1a      	ldr	r6, [pc, #104]	; (800335c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	f022 0203 	bic.w	r2, r2, #3
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80032fa:	f7fe f9e3 	bl	80016c4 <HAL_GetTick>
 80032fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003300:	68b3      	ldr	r3, [r6, #8]
 8003302:	6862      	ldr	r2, [r4, #4]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800330c:	d0a1      	beq.n	8003252 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7fe f9d9 	bl	80016c4 <HAL_GetTick>
 8003312:	1bc0      	subs	r0, r0, r7
 8003314:	4540      	cmp	r0, r8
 8003316:	d9f3      	bls.n	8003300 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8003318:	2003      	movs	r0, #3
}
 800331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331e:	2902      	cmp	r1, #2
 8003320:	d102      	bne.n	8003328 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003326:	e7df      	b.n	80032e8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	f012 0f02 	tst.w	r2, #2
 800332c:	e7dc      	b.n	80032e8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	f023 030f 	bic.w	r3, r3, #15
 8003334:	432b      	orrs	r3, r5
 8003336:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	429d      	cmp	r5, r3
 8003340:	f47f af79 	bne.w	8003236 <HAL_RCC_ClockConfig+0xa>
 8003344:	e78b      	b.n	800325e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003346:	4905      	ldr	r1, [pc, #20]	; (800335c <HAL_RCC_ClockConfig+0x130>)
 8003348:	68e0      	ldr	r0, [r4, #12]
 800334a:	688b      	ldr	r3, [r1, #8]
 800334c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003350:	4303      	orrs	r3, r0
 8003352:	608b      	str	r3, [r1, #8]
 8003354:	e786      	b.n	8003264 <HAL_RCC_ClockConfig+0x38>
 8003356:	bf00      	nop
 8003358:	40023c00 	.word	0x40023c00
 800335c:	40023800 	.word	0x40023800
 8003360:	0800873e 	.word	0x0800873e
 8003364:	2000000c 	.word	0x2000000c

08003368 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <HAL_RCC_GetHCLKFreq+0x8>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003382:	6810      	ldr	r0, [r2, #0]
}
 8003384:	40d8      	lsrs	r0, r3
 8003386:	4770      	bx	lr
 8003388:	40023800 	.word	0x40023800
 800338c:	0800874e 	.word	0x0800874e
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	4a03      	ldr	r2, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033a2:	6810      	ldr	r0, [r2, #0]
}
 80033a4:	40d8      	lsrs	r0, r3
 80033a6:	4770      	bx	lr
 80033a8:	40023800 	.word	0x40023800
 80033ac:	0800874e 	.word	0x0800874e
 80033b0:	2000000c 	.word	0x2000000c

080033b4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033b4:	230f      	movs	r3, #15
 80033b6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_GetClockConfig+0x34>)
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f002 0203 	and.w	r2, r2, #3
 80033c0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80033c8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80033d0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	08db      	lsrs	r3, r3, #3
 80033d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80033da:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_GetClockConfig+0x38>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	600b      	str	r3, [r1, #0]
 80033e6:	4770      	bx	lr
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40023c00 	.word	0x40023c00

080033f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033f4:	6802      	ldr	r2, [r0, #0]
{
 80033f6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033f8:	f012 0601 	ands.w	r6, r2, #1
 80033fc:	d00b      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033fe:	4bb8      	ldr	r3, [pc, #736]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003406:	6099      	str	r1, [r3, #8]
 8003408:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800340e:	fab6 f686 	clz	r6, r6
 8003412:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003414:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003416:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800341a:	d012      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341c:	49b0      	ldr	r1, [pc, #704]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003420:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003424:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800342c:	bf08      	it	eq
 800342e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003430:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003434:	bf16      	itet	ne
 8003436:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800343a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800343c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800343e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003442:	02d1      	lsls	r1, r2, #11
 8003444:	d510      	bpl.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003446:	48a6      	ldr	r0, [pc, #664]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003448:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800344a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800344e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003452:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003456:	ea43 0301 	orr.w	r3, r3, r1
 800345a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800345e:	f000 8185 	beq.w	800376c <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003462:	2900      	cmp	r1, #0
 8003464:	bf08      	it	eq
 8003466:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003468:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800346c:	bf18      	it	ne
 800346e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003470:	0692      	lsls	r2, r2, #26
 8003472:	d531      	bpl.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b9a      	ldr	r3, [pc, #616]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003476:	4f9b      	ldr	r7, [pc, #620]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003492:	f7fe f917 	bl	80016c4 <HAL_GetTick>
 8003496:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	05db      	lsls	r3, r3, #23
 800349c:	f140 8168 	bpl.w	8003770 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a0:	4f8f      	ldr	r7, [pc, #572]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034a8:	f040 816d 	bne.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ae:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80034b2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034b8:	f040 818b 	bne.w	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80034bc:	6891      	ldr	r1, [r2, #8]
 80034be:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80034c2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80034c6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80034ca:	4301      	orrs	r1, r0
 80034cc:	6091      	str	r1, [r2, #8]
 80034ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	06da      	lsls	r2, r3, #27
 80034dc:	d50c      	bpl.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034de:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80034e4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80034e8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80034ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80034f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034f2:	4301      	orrs	r1, r0
 80034f4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f8:	045f      	lsls	r7, r3, #17
 80034fa:	d508      	bpl.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034fc:	4978      	ldr	r1, [pc, #480]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003500:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003504:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003508:	4302      	orrs	r2, r0
 800350a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350e:	0418      	lsls	r0, r3, #16
 8003510:	d508      	bpl.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003512:	4973      	ldr	r1, [pc, #460]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003514:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003516:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800351a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800351e:	4302      	orrs	r2, r0
 8003520:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003524:	03d9      	lsls	r1, r3, #15
 8003526:	d508      	bpl.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003528:	496d      	ldr	r1, [pc, #436]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800352a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800352c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003530:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003534:	4302      	orrs	r2, r0
 8003536:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800353a:	039a      	lsls	r2, r3, #14
 800353c:	d508      	bpl.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800353e:	4968      	ldr	r1, [pc, #416]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003540:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003542:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003546:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800354a:	4302      	orrs	r2, r0
 800354c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003550:	065f      	lsls	r7, r3, #25
 8003552:	d508      	bpl.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003554:	4962      	ldr	r1, [pc, #392]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003556:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003558:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800355c:	f022 0203 	bic.w	r2, r2, #3
 8003560:	4302      	orrs	r2, r0
 8003562:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003566:	0618      	lsls	r0, r3, #24
 8003568:	d508      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800356a:	495d      	ldr	r1, [pc, #372]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800356c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800356e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003572:	f022 020c 	bic.w	r2, r2, #12
 8003576:	4302      	orrs	r2, r0
 8003578:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800357c:	05d9      	lsls	r1, r3, #23
 800357e:	d508      	bpl.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003580:	4957      	ldr	r1, [pc, #348]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003582:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003584:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003588:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800358c:	4302      	orrs	r2, r0
 800358e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003592:	059a      	lsls	r2, r3, #22
 8003594:	d508      	bpl.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003596:	4952      	ldr	r1, [pc, #328]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003598:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800359a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800359e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035a2:	4302      	orrs	r2, r0
 80035a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035a8:	055f      	lsls	r7, r3, #21
 80035aa:	d508      	bpl.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ac:	494c      	ldr	r1, [pc, #304]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035b8:	4302      	orrs	r2, r0
 80035ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035be:	0518      	lsls	r0, r3, #20
 80035c0:	d508      	bpl.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035c2:	4947      	ldr	r1, [pc, #284]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035ce:	4302      	orrs	r2, r0
 80035d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035d4:	04d9      	lsls	r1, r3, #19
 80035d6:	d508      	bpl.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035d8:	4941      	ldr	r1, [pc, #260]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80035dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80035e4:	4302      	orrs	r2, r0
 80035e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035ea:	049a      	lsls	r2, r3, #18
 80035ec:	d508      	bpl.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ee:	493c      	ldr	r1, [pc, #240]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80035f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80035fa:	4302      	orrs	r2, r0
 80035fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003600:	025f      	lsls	r7, r3, #9
 8003602:	d508      	bpl.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003604:	4936      	ldr	r1, [pc, #216]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003606:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003608:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800360c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003610:	4302      	orrs	r2, r0
 8003612:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003616:	0298      	lsls	r0, r3, #10
 8003618:	d50c      	bpl.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800361a:	4831      	ldr	r0, [pc, #196]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800361e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003622:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003626:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800362a:	bf08      	it	eq
 800362c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800362e:	430a      	orrs	r2, r1
 8003630:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003634:	f013 0f08 	tst.w	r3, #8
 8003638:	bf18      	it	ne
 800363a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363c:	0359      	lsls	r1, r3, #13
 800363e:	d508      	bpl.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003640:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003642:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003644:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800364c:	4302      	orrs	r2, r0
 800364e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	d509      	bpl.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003656:	4922      	ldr	r1, [pc, #136]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003658:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800365c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003660:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003664:	4302      	orrs	r2, r0
 8003666:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800366a:	2e01      	cmp	r6, #1
 800366c:	f000 80b5 	beq.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003674:	f000 80b1 	beq.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003678:	2d01      	cmp	r5, #1
 800367a:	d175      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367c:	4d18      	ldr	r5, [pc, #96]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fe f81d 	bl	80016c4 <HAL_GetTick>
 800368a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	009f      	lsls	r7, r3, #2
 8003690:	f100 8127 	bmi.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003694:	6821      	ldr	r1, [r4, #0]
 8003696:	030e      	lsls	r6, r1, #12
 8003698:	d501      	bpl.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800369a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800369c:	b11b      	cbz	r3, 80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800369e:	02cd      	lsls	r5, r1, #11
 80036a0:	d522      	bpl.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036a4:	bb03      	cbnz	r3, 80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036ac:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80036b8:	4303      	orrs	r3, r0
 80036ba:	6960      	ldr	r0, [r4, #20]
 80036bc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036c0:	69a0      	ldr	r0, [r4, #24]
 80036c2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80036c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80036ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80036d0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80036d4:	3801      	subs	r0, #1
 80036d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80036da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036e8:	0288      	lsls	r0, r1, #10
 80036ea:	d515      	bpl.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80036ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d111      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036f4:	4a82      	ldr	r2, [pc, #520]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80036f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036fa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036fe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003702:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003706:	4303      	orrs	r3, r0
 8003708:	6960      	ldr	r0, [r4, #20]
 800370a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800370e:	6a20      	ldr	r0, [r4, #32]
 8003710:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003718:	070a      	lsls	r2, r1, #28
 800371a:	d519      	bpl.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800371c:	4978      	ldr	r1, [pc, #480]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800371e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003722:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003726:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800372a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800372e:	4313      	orrs	r3, r2
 8003730:	6962      	ldr	r2, [r4, #20]
 8003732:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003736:	69e2      	ldr	r2, [r4, #28]
 8003738:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003740:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003746:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003750:	4c6b      	ldr	r4, [pc, #428]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375a:	f7fd ffb3 	bl	80016c4 <HAL_GetTick>
 800375e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f140 80c4 	bpl.w	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003768:	2000      	movs	r0, #0
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 800376c:	2601      	movs	r6, #1
 800376e:	e67b      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fd ffa8 	bl	80016c4 <HAL_GetTick>
 8003774:	eba0 0008 	sub.w	r0, r0, r8
 8003778:	2864      	cmp	r0, #100	; 0x64
 800377a:	f67f ae8d 	bls.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800377e:	2003      	movs	r0, #3
}
 8003780:	b003      	add	sp, #12
 8003782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003786:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003788:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800378c:	4293      	cmp	r3, r2
 800378e:	f43f ae8d 	beq.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003794:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800379a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800379e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037a6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80037a8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ac:	07d8      	lsls	r0, r3, #31
 80037ae:	f57f ae7d 	bpl.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80037b2:	f7fd ff87 	bl	80016c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80037ba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037be:	0799      	lsls	r1, r3, #30
 80037c0:	f53f ae74 	bmi.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fd ff7e 	bl	80016c4 <HAL_GetTick>
 80037c8:	eba0 0008 	sub.w	r0, r0, r8
 80037cc:	4548      	cmp	r0, r9
 80037ce:	d9f5      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80037d0:	e7d5      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d2:	6891      	ldr	r1, [r2, #8]
 80037d4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80037d8:	e678      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80037da:	4e49      	ldr	r6, [pc, #292]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037e2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80037e4:	f7fd ff6e 	bl	80016c4 <HAL_GetTick>
 80037e8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	d472      	bmi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	07d7      	lsls	r7, r2, #31
 80037f4:	d512      	bpl.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80037f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037f8:	b983      	cbnz	r3, 800381c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037fa:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037fe:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003806:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800380a:	430b      	orrs	r3, r1
 800380c:	6861      	ldr	r1, [r4, #4]
 800380e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003812:	68a1      	ldr	r1, [r4, #8]
 8003814:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003818:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800381c:	0316      	lsls	r6, r2, #12
 800381e:	d503      	bpl.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003826:	d005      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003828:	02d0      	lsls	r0, r2, #11
 800382a:	d51e      	bpl.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003832:	d11a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003834:	4932      	ldr	r1, [pc, #200]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003836:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800383a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800383e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003842:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003846:	4303      	orrs	r3, r0
 8003848:	6860      	ldr	r0, [r4, #4]
 800384a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800384e:	68e0      	ldr	r0, [r4, #12]
 8003850:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003858:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800385c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385e:	f020 001f 	bic.w	r0, r0, #31
 8003862:	3b01      	subs	r3, #1
 8003864:	4303      	orrs	r3, r0
 8003866:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800386a:	01d1      	lsls	r1, r2, #7
 800386c:	d511      	bpl.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386e:	4924      	ldr	r1, [pc, #144]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003870:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003874:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003878:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800387c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003880:	4303      	orrs	r3, r0
 8003882:	6860      	ldr	r0, [r4, #4]
 8003884:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003888:	6920      	ldr	r0, [r4, #16]
 800388a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800388e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003892:	0192      	lsls	r2, r2, #6
 8003894:	d50d      	bpl.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80038a0:	68e2      	ldr	r2, [r4, #12]
 80038a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038a6:	68a2      	ldr	r2, [r4, #8]
 80038a8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80038b2:	4e13      	ldr	r6, [pc, #76]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038b4:	6833      	ldr	r3, [r6, #0]
 80038b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80038bc:	f7fd ff02 	bl	80016c4 <HAL_GetTick>
 80038c0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c2:	6833      	ldr	r3, [r6, #0]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	f53f aed7 	bmi.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038ca:	f7fd fefb 	bl	80016c4 <HAL_GetTick>
 80038ce:	1bc0      	subs	r0, r0, r7
 80038d0:	2864      	cmp	r0, #100	; 0x64
 80038d2:	d9f6      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038d4:	e753      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038d6:	f7fd fef5 	bl	80016c4 <HAL_GetTick>
 80038da:	1bc0      	subs	r0, r0, r7
 80038dc:	2864      	cmp	r0, #100	; 0x64
 80038de:	d984      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80038e0:	e74d      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038e2:	f7fd feef 	bl	80016c4 <HAL_GetTick>
 80038e6:	1b80      	subs	r0, r0, r6
 80038e8:	2864      	cmp	r0, #100	; 0x64
 80038ea:	f67f aecf 	bls.w	800368c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80038ee:	e746      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038f0:	f7fd fee8 	bl	80016c4 <HAL_GetTick>
 80038f4:	1b40      	subs	r0, r0, r5
 80038f6:	2864      	cmp	r0, #100	; 0x64
 80038f8:	f67f af32 	bls.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80038fc:	e73f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003904:	6802      	ldr	r2, [r0, #0]
{
 8003906:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003908:	68d3      	ldr	r3, [r2, #12]
{
 800390a:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800390c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003910:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003912:	f7fd fed7 	bl	80016c4 <HAL_GetTick>
 8003916:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	069b      	lsls	r3, r3, #26
 800391e:	d501      	bpl.n	8003924 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8003920:	2000      	movs	r0, #0
 8003922:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003924:	f7fd fece 	bl	80016c4 <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800392e:	d9f3      	bls.n	8003918 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8003930:	2003      	movs	r0, #3
}
 8003932:	bd38      	pop	{r3, r4, r5, pc}

08003934 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003934:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003936:	6803      	ldr	r3, [r0, #0]
{
 8003938:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	0652      	lsls	r2, r2, #25
 800393e:	d501      	bpl.n	8003944 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8003940:	2000      	movs	r0, #0
 8003942:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800394a:	f7fd febb 	bl	80016c4 <HAL_GetTick>
 800394e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	065b      	lsls	r3, r3, #25
 8003956:	d4f3      	bmi.n	8003940 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003958:	f7fd feb4 	bl	80016c4 <HAL_GetTick>
 800395c:	1b40      	subs	r0, r0, r5
 800395e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003962:	d9f5      	bls.n	8003950 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
}
 8003966:	bd38      	pop	{r3, r4, r5, pc}

08003968 <HAL_RTC_Init>:
{
 8003968:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800396a:	4604      	mov	r4, r0
 800396c:	b1b0      	cbz	r0, 800399c <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800396e:	7f43      	ldrb	r3, [r0, #29]
 8003970:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003974:	b913      	cbnz	r3, 800397c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8003976:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003978:	f002 faa8 	bl	8005ecc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800397c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800397e:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003980:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003982:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
 8003988:	2253      	movs	r2, #83	; 0x53
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800398c:	f7ff ffd2 	bl	8003934 <RTC_EnterInitMode>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	b128      	cbz	r0, 80039a0 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003998:	2304      	movs	r3, #4
 800399a:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
}
 800399e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039a0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039a2:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039a4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80039a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ac:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ae:	6862      	ldr	r2, [r4, #4]
 80039b0:	6899      	ldr	r1, [r3, #8]
 80039b2:	432a      	orrs	r2, r5
 80039b4:	6965      	ldr	r5, [r4, #20]
 80039b6:	432a      	orrs	r2, r5
 80039b8:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80039ba:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039bc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039be:	68e2      	ldr	r2, [r4, #12]
 80039c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 80039c8:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80039ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80039d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 80039dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039de:	430a      	orrs	r2, r1
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80039e6:	2301      	movs	r3, #1
 80039e8:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80039ea:	bd38      	pop	{r3, r4, r5, pc}

080039ec <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80039ec:	2300      	movs	r3, #0
  
  while(Value >= 10)
 80039ee:	2809      	cmp	r0, #9
 80039f0:	d803      	bhi.n	80039fa <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80039f2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80039f6:	b2c0      	uxtb	r0, r0
 80039f8:	4770      	bx	lr
    Value -= 10;
 80039fa:	380a      	subs	r0, #10
    bcdhigh++;
 80039fc:	3301      	adds	r3, #1
    Value -= 10;
 80039fe:	b2c0      	uxtb	r0, r0
 8003a00:	e7f5      	b.n	80039ee <RTC_ByteToBcd2+0x2>

08003a02 <HAL_RTC_SetDate>:
{
 8003a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003a04:	7f03      	ldrb	r3, [r0, #28]
{
 8003a06:	4605      	mov	r5, r0
 8003a08:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d030      	beq.n	8003a70 <HAL_RTC_SetDate+0x6e>
 8003a0e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8003a10:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8003a12:	7703      	strb	r3, [r0, #28]
 8003a14:	784b      	ldrb	r3, [r1, #1]
 8003a16:	78c8      	ldrb	r0, [r1, #3]
 8003a18:	788e      	ldrb	r6, [r1, #2]
 8003a1a:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d148      	bne.n	8003ab2 <HAL_RTC_SetDate+0xb0>
 8003a20:	06da      	lsls	r2, r3, #27
 8003a22:	d503      	bpl.n	8003a2c <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a24:	f023 0310 	bic.w	r3, r3, #16
 8003a28:	330a      	adds	r3, #10
 8003a2a:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a2c:	f7ff ffde 	bl	80039ec <RTC_ByteToBcd2>
 8003a30:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003a32:	7848      	ldrb	r0, [r1, #1]
 8003a34:	f7ff ffda 	bl	80039ec <RTC_ByteToBcd2>
 8003a38:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7ff ffd6 	bl	80039ec <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a40:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8003a44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003a48:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a50:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
 8003a54:	2253      	movs	r2, #83	; 0x53
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a58:	f7ff ff6c 	bl	8003934 <RTC_EnterInitMode>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	4606      	mov	r6, r0
 8003a60:	b140      	cbz	r0, 8003a74 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003a62:	22ff      	movs	r2, #255	; 0xff
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a66:	2304      	movs	r3, #4
 8003a68:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8003a6e:	2601      	movs	r6, #1
}
 8003a70:	4630      	mov	r0, r6
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a74:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003a78:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003a7c:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a84:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	069b      	lsls	r3, r3, #26
 8003a8a:	d40a      	bmi.n	8003aa2 <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f7ff ff39 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003a92:	b130      	cbz	r0, 8003aa2 <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a9a:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8003a9c:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a9e:	776b      	strb	r3, [r5, #29]
 8003aa0:	e7e5      	b.n	8003a6e <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003aac:	2300      	movs	r3, #0
 8003aae:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8003ab0:	e7de      	b.n	8003a70 <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 8003ab2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003ab4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003ab8:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003aba:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8003abe:	e7c5      	b.n	8003a4c <HAL_RTC_SetDate+0x4a>

08003ac0 <HAL_RTC_SetTime>:
{
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003ac2:	7f03      	ldrb	r3, [r0, #28]
{
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	460f      	mov	r7, r1
 8003ac8:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d02f      	beq.n	8003b2e <HAL_RTC_SetTime+0x6e>
 8003ace:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ad0:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 8003ad2:	7703      	strb	r3, [r0, #28]
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	784d      	ldrb	r5, [r1, #1]
 8003ad8:	7808      	ldrb	r0, [r1, #0]
 8003ada:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003adc:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8003ade:	bb42      	cbnz	r2, 8003b32 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ae0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8003ae4:	bf08      	it	eq
 8003ae6:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003ae8:	f7ff ff80 	bl	80039ec <RTC_ByteToBcd2>
 8003aec:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7ff ff7c 	bl	80039ec <RTC_ByteToBcd2>
 8003af4:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff ff78 	bl	80039ec <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8003afc:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003afe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003b06:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b0a:	6833      	ldr	r3, [r6, #0]
 8003b0c:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b0e:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
 8003b12:	2253      	movs	r2, #83	; 0x53
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b16:	f7ff ff0d 	bl	8003934 <RTC_EnterInitMode>
 8003b1a:	6833      	ldr	r3, [r6, #0]
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b1a0      	cbz	r0, 8003b4a <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b24:	2304      	movs	r3, #4
 8003b26:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8003b2c:	2501      	movs	r5, #1
}
 8003b2e:	4628      	mov	r0, r5
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003b32:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003b38:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 8003b3c:	bf08      	it	eq
 8003b3e:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003b40:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8003b42:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003b44:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8003b48:	e7df      	b.n	8003b0a <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b4a:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b4e:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b50:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003b54:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b5c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	6899      	ldr	r1, [r3, #8]
 8003b62:	4302      	orrs	r2, r0
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	d40a      	bmi.n	8003b8c <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b76:	4630      	mov	r0, r6
 8003b78:	f7ff fec4 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003b7c:	b130      	cbz	r0, 8003b8c <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003b7e:	6833      	ldr	r3, [r6, #0]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b84:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8003b86:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b88:	7773      	strb	r3, [r6, #29]
 8003b8a:	e7cf      	b.n	8003b2c <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b8c:	6833      	ldr	r3, [r6, #0]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003b92:	2301      	movs	r3, #1
 8003b94:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8003b96:	2300      	movs	r3, #0
 8003b98:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8003b9a:	e7c8      	b.n	8003b2e <HAL_RTC_SetTime+0x6e>

08003b9c <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8003b9c:	7f03      	ldrb	r3, [r0, #28]
 8003b9e:	2b01      	cmp	r3, #1
{
 8003ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003baa:	d056      	beq.n	8003c5a <HAL_RTC_SetAlarm+0xbe>
 8003bac:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bae:	7760      	strb	r0, [r4, #29]
 8003bb0:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 8003bb2:	7723      	strb	r3, [r4, #28]
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	7808      	ldrb	r0, [r1, #0]
 8003bb8:	f891 9001 	ldrb.w	r9, [r1, #1]
 8003bbc:	788d      	ldrb	r5, [r1, #2]
 8003bbe:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 8003bc2:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bc4:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d149      	bne.n	8003c5e <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bca:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003bce:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003bd2:	bf08      	it	eq
 8003bd4:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003bd6:	f7ff ff09 	bl	80039ec <RTC_ByteToBcd2>
 8003bda:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8003bdc:	4648      	mov	r0, r9
 8003bde:	f7ff ff05 	bl	80039ec <RTC_ByteToBcd2>
 8003be2:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7ff ff01 	bl	80039ec <RTC_ByteToBcd2>
 8003bea:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003bec:	4640      	mov	r0, r8
 8003bee:	f7ff fefd 	bl	80039ec <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003bf2:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003bf4:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8003bf8:	ea45 0509 	orr.w	r5, r5, r9
 8003bfc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8003c00:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8003c04:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003c08:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0a:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003c0c:	684e      	ldr	r6, [r1, #4]
 8003c0e:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
 8003c14:	2253      	movs	r2, #83	; 0x53
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003c18:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003c1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c1e:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003c20:	d13d      	bne.n	8003c9e <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c26:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c2e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c30:	f7fd fd48 	bl	80016c4 <HAL_GetTick>
 8003c34:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	68df      	ldr	r7, [r3, #12]
 8003c3a:	f017 0701 	ands.w	r7, r7, #1
 8003c3e:	d01f      	beq.n	8003c80 <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003c40:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003c42:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8003c4a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8003c4c:	22ff      	movs	r2, #255	; 0xff
 8003c4e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 8003c50:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8003c54:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8003c56:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY; 
 8003c58:	7763      	strb	r3, [r4, #29]
}
 8003c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003c5e:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003c60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003c64:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003c68:	bf08      	it	eq
 8003c6a:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003c6c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003c70:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003c72:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8003c76:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003c7a:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 8003c7e:	e7c3      	b.n	8003c08 <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c80:	f7fd fd20 	bl	80016c4 <HAL_GetTick>
 8003c84:	eba0 0008 	sub.w	r0, r0, r8
 8003c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c8c:	d9d3      	bls.n	8003c36 <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003c92:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003c96:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003c98:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 8003c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003cac:	f7fd fd0a 	bl	80016c4 <HAL_GetTick>
 8003cb0:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	68df      	ldr	r7, [r3, #12]
 8003cb6:	f017 0702 	ands.w	r7, r7, #2
 8003cba:	d005      	beq.n	8003cc8 <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003cbc:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003cbe:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc6:	e7c0      	b.n	8003c4a <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cc8:	f7fd fcfc 	bl	80016c4 <HAL_GetTick>
 8003ccc:	eba0 0008 	sub.w	r0, r0, r8
 8003cd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cd4:	d9ed      	bls.n	8003cb2 <HAL_RTC_SetAlarm+0x116>
 8003cd6:	e7da      	b.n	8003c8e <HAL_RTC_SetAlarm+0xf2>

08003cd8 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003cd8:	7f03      	ldrb	r3, [r0, #28]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f04f 0302 	mov.w	r3, #2
{
 8003ce0:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8003ce2:	d01d      	beq.n	8003d20 <HAL_RTCEx_SetTimeStamp+0x48>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ce4:	7743      	strb	r3, [r0, #29]
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003ce6:	6803      	ldr	r3, [r0, #0]
 8003ce8:	689c      	ldr	r4, [r3, #8]
 8003cea:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003cee:	f024 0408 	bic.w	r4, r4, #8
    
  tmpreg|= TimeStampEdge;
 8003cf2:	430c      	orrs	r4, r1
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cf4:	21ca      	movs	r1, #202	; 0xca
 8003cf6:	6259      	str	r1, [r3, #36]	; 0x24
 8003cf8:	2153      	movs	r1, #83	; 0x53
 8003cfa:	6259      	str	r1, [r3, #36]	; 0x24
  
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8003cfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cfe:	f021 0106 	bic.w	r1, r1, #6
 8003d02:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8003d04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003d06:	430a      	orrs	r2, r1
 8003d08:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003d0a:	609c      	str	r4, [r3, #8]
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8003d18:	2301      	movs	r3, #1
 8003d1a:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8003d20:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8003d22:	bd10      	pop	{r4, pc}

08003d24 <HAL_RTCEx_SetWakeUpTimer>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003d24:	7f03      	ldrb	r3, [r0, #28]
 8003d26:	2b01      	cmp	r3, #1
{
 8003d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	460e      	mov	r6, r1
 8003d30:	4617      	mov	r7, r2
 8003d32:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003d36:	d03b      	beq.n	8003db0 <HAL_RTCEx_SetWakeUpTimer+0x8c>
 8003d38:	2301      	movs	r3, #1
    
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d3a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d3c:	7760      	strb	r0, [r4, #29]
  __HAL_LOCK(hrtc);
 8003d3e:	7723      	strb	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24
 8003d44:	2253      	movs	r2, #83	; 0x53
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
  
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d50:	f7fd fcb8 	bl	80016c4 <HAL_GetTick>

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003d54:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003d56:	4680      	mov	r8, r0
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	055b      	lsls	r3, r3, #21
 8003d5c:	d414      	bmi.n	8003d88 <HAL_RTCEx_SetWakeUpTimer+0x64>
      }  
    }
  }
  
  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003d5e:	6823      	ldr	r3, [r4, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  
  hrtc->State = HAL_RTC_STATE_READY;   
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8003d60:	2000      	movs	r0, #0
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	f022 0207 	bic.w	r2, r2, #7
 8003d68:	609a      	str	r2, [r3, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	433a      	orrs	r2, r7
 8003d6e:	609a      	str	r2, [r3, #8]
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003d70:	615e      	str	r6, [r3, #20]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);   
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d78:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;   
 8003d7e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8003d80:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;   
 8003d82:	7763      	strb	r3, [r4, #29]
  
  return HAL_OK;
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	68dd      	ldr	r5, [r3, #12]
 8003d8c:	f015 0504 	ands.w	r5, r5, #4
 8003d90:	d1e5      	bne.n	8003d5e <HAL_RTCEx_SetWakeUpTimer+0x3a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d92:	f7fd fc97 	bl	80016c4 <HAL_GetTick>
 8003d96:	eba0 0008 	sub.w	r0, r0, r8
 8003d9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d9e:	d9f3      	bls.n	8003d88 <HAL_RTCEx_SetWakeUpTimer+0x64>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003da4:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003da8:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003daa:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 8003dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003db4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003db8:	4604      	mov	r4, r0
 8003dba:	b1c8      	cbz	r0, 8003df0 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003dbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dc4:	b91b      	cbnz	r3, 8003dce <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003dc6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003dca:	f002 f99d 	bl	8006108 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003dce:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003dd0:	1d21      	adds	r1, r4, #4
 8003dd2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003dd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003dd8:	f000 fe6b 	bl	8004ab2 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ddc:	6862      	ldr	r2, [r4, #4]
 8003dde:	4629      	mov	r1, r5
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	f000 fea5 	bl	8004b30 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003de6:	2301      	movs	r3, #1
  
  return HAL_OK;
 8003de8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003dea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	bd38      	pop	{r3, r4, r5, pc}

08003df4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003df8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8003dfc:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003dfe:	b2c0      	uxtb	r0, r0
 8003e00:	2802      	cmp	r0, #2
 8003e02:	d00d      	beq.n	8003e20 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e04:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003e06:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003e0c:	f000 fed8 	bl	8004bc0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e10:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8003e12:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e14:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003e16:	bf0c      	ite	eq
 8003e18:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003e20:	bd38      	pop	{r3, r4, r5, pc}

08003e22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003e22:	b510      	push	{r4, lr}
 8003e24:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e26:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003e2a:	b2c0      	uxtb	r0, r0
 8003e2c:	2802      	cmp	r0, #2
 8003e2e:	d009      	beq.n	8003e44 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e30:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e32:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e38:	f000 fed5 	bl	8004be6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e3c:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8003e3e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e46:	6a03      	ldr	r3, [r0, #32]
{
 8003e48:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4a:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8003e54:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003e58:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e5a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003e5e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e62:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e64:	6203      	str	r3, [r0, #32]
 8003e66:	bd10      	pop	{r4, pc}

08003e68 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	6a03      	ldr	r3, [r0, #32]
 8003e6a:	f023 0310 	bic.w	r3, r3, #16
{
 8003e6e:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e70:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e72:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e74:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e76:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003e7e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8003e82:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e86:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e88:	6203      	str	r3, [r0, #32]
 8003e8a:	bd10      	pop	{r4, pc}

08003e8c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e8c:	6803      	ldr	r3, [r0, #0]
}
 8003e8e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIM_IC_CaptureCallback>:
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_TriggerCallback>:
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eaa:	6803      	ldr	r3, [r0, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	0791      	lsls	r1, r2, #30
{
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb4:	d50f      	bpl.n	8003ed6 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	0792      	lsls	r2, r2, #30
 8003eba:	d50c      	bpl.n	8003ed6 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ebc:	f06f 0202 	mvn.w	r2, #2
 8003ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ec2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003ec4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ec6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003ec8:	0799      	lsls	r1, r3, #30
 8003eca:	f000 8085 	beq.w	8003fd8 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	f7ff ffe9 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	0752      	lsls	r2, r2, #29
 8003edc:	d510      	bpl.n	8003f00 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	0750      	lsls	r0, r2, #29
 8003ee2:	d50d      	bpl.n	8003f00 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee4:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eec:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003eee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003ef2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ef6:	d075      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef8:	f7ff ffd4 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efc:	2300      	movs	r3, #0
 8003efe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	0711      	lsls	r1, r2, #28
 8003f06:	d50f      	bpl.n	8003f28 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	0712      	lsls	r2, r2, #28
 8003f0c:	d50c      	bpl.n	8003f28 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003f18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003f1c:	079b      	lsls	r3, r3, #30
 8003f1e:	d067      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	f7ff ffc0 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f24:	2300      	movs	r3, #0
 8003f26:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	06d0      	lsls	r0, r2, #27
 8003f2e:	d510      	bpl.n	8003f52 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	06d1      	lsls	r1, r2, #27
 8003f34:	d50d      	bpl.n	8003f52 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f36:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003f40:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f42:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003f44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f48:	d058      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	f7ff ffab 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	07d2      	lsls	r2, r2, #31
 8003f58:	d508      	bpl.n	8003f6c <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	07d0      	lsls	r0, r2, #31
 8003f5e:	d505      	bpl.n	8003f6c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f68:	f001 fcda 	bl	8005920 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	0611      	lsls	r1, r2, #24
 8003f72:	d508      	bpl.n	8003f86 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	0612      	lsls	r2, r2, #24
 8003f78:	d505      	bpl.n	8003f86 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003f7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f82:	f000 faec 	bl	800455e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	05d0      	lsls	r0, r2, #23
 8003f8c:	d508      	bpl.n	8003fa0 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	0611      	lsls	r1, r2, #24
 8003f92:	d505      	bpl.n	8003fa0 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003f98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f9c:	f000 fadf 	bl	800455e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	0652      	lsls	r2, r2, #25
 8003fa6:	d508      	bpl.n	8003fba <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	0650      	lsls	r0, r2, #25
 8003fac:	d505      	bpl.n	8003fba <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003fb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fb6:	f7ff ff77 	bl	8003ea8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	0691      	lsls	r1, r2, #26
 8003fc0:	d522      	bpl.n	8004008 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	0692      	lsls	r2, r2, #26
 8003fc6:	d51f      	bpl.n	8004008 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003fcc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fce:	611a      	str	r2, [r3, #16]
}
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003fd4:	f000 bac2 	b.w	800455c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd8:	f7ff ff63 	bl	8003ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff ff62 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fe2:	e776      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe4:	f7ff ff5d 	bl	8003ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff ff5c 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fee:	e785      	b.n	8003efc <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff0:	f7ff ff57 	bl	8003ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff ff56 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ffa:	e793      	b.n	8003f24 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffc:	f7ff ff51 	bl	8003ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff50 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004006:	e7a2      	b.n	8003f4e <HAL_TIM_IRQHandler+0xa4>
 8004008:	bd10      	pop	{r4, pc}
	...

0800400c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800400c:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800400e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004010:	4290      	cmp	r0, r2
 8004012:	d012      	beq.n	800403a <TIM_Base_SetConfig+0x2e>
 8004014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004018:	d00f      	beq.n	800403a <TIM_Base_SetConfig+0x2e>
 800401a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800401e:	4290      	cmp	r0, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x2e>
 8004022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004026:	4290      	cmp	r0, r2
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x2e>
 800402a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800402e:	4290      	cmp	r0, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x2e>
 8004032:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004036:	4290      	cmp	r0, r2
 8004038:	d11d      	bne.n	8004076 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800403a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004040:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004042:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <TIM_Base_SetConfig+0xc4>)
 8004044:	4290      	cmp	r0, r2
 8004046:	d104      	bne.n	8004052 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404c:	68ca      	ldr	r2, [r1, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	e028      	b.n	80040a4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004052:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004056:	d0f7      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 8004058:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <TIM_Base_SetConfig+0xc8>)
 800405a:	4290      	cmp	r0, r2
 800405c:	d0f4      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 800405e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004062:	4290      	cmp	r0, r2
 8004064:	d0f0      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 8004066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800406a:	4290      	cmp	r0, r2
 800406c:	d0ec      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 800406e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004072:	4290      	cmp	r0, r2
 8004074:	d0e8      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_Base_SetConfig+0xcc>)
 8004078:	4290      	cmp	r0, r2
 800407a:	d0e5      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 800407c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004080:	4290      	cmp	r0, r2
 8004082:	d0e1      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 8004084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004088:	4290      	cmp	r0, r2
 800408a:	d0dd      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 800408c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004090:	4290      	cmp	r0, r2
 8004092:	d0d9      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 8004094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004098:	4290      	cmp	r0, r2
 800409a:	d0d5      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
 800409c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040a0:	4290      	cmp	r0, r2
 80040a2:	d0d1      	beq.n	8004048 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a4:	694a      	ldr	r2, [r1, #20]
 80040a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040aa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80040ac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ae:	688b      	ldr	r3, [r1, #8]
 80040b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80040b2:	680b      	ldr	r3, [r1, #0]
 80040b4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <TIM_Base_SetConfig+0xc4>)
 80040b8:	4298      	cmp	r0, r3
 80040ba:	d006      	beq.n	80040ca <TIM_Base_SetConfig+0xbe>
 80040bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c0:	4298      	cmp	r0, r3
 80040c2:	d002      	beq.n	80040ca <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	2301      	movs	r3, #1
 80040c6:	6143      	str	r3, [r0, #20]
}
 80040c8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	6303      	str	r3, [r0, #48]	; 0x30
 80040ce:	e7f9      	b.n	80040c4 <TIM_Base_SetConfig+0xb8>
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40014000 	.word	0x40014000

080040dc <HAL_TIM_Base_Init>:
{ 
 80040dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80040de:	4604      	mov	r4, r0
 80040e0:	b1a0      	cbz	r0, 800410c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80040e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040ea:	b91b      	cbnz	r3, 80040f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80040ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040f0:	f001 fefa 	bl	8005ee8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80040f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80040fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80040fe:	f7ff ff85 	bl	800400c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004102:	2301      	movs	r3, #1
  return HAL_OK;
 8004104:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800410a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
}
 800410e:	bd10      	pop	{r4, pc}

08004110 <HAL_TIM_PWM_Init>:
{
 8004110:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004112:	4604      	mov	r4, r0
 8004114:	b1a0      	cbz	r0, 8004140 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004116:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800411a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800411e:	b91b      	cbnz	r3, 8004128 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004120:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004124:	f001 ff34 	bl	8005f90 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8004128:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800412a:	6820      	ldr	r0, [r4, #0]
 800412c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 800412e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004132:	f7ff ff6b 	bl	800400c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004136:	2301      	movs	r3, #1
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800413a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800413e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004140:	2001      	movs	r0, #1
}  
 8004142:	bd10      	pop	{r4, pc}

08004144 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004144:	6a03      	ldr	r3, [r0, #32]
 8004146:	f023 0301 	bic.w	r3, r3, #1
{
 800414a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800414e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004150:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004152:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004154:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8004158:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800415a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800415e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004162:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8004164:	688d      	ldr	r5, [r1, #8]
 8004166:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004168:	4d0c      	ldr	r5, [pc, #48]	; (800419c <TIM_OC1_SetConfig+0x58>)
 800416a:	42a8      	cmp	r0, r5
 800416c:	d009      	beq.n	8004182 <TIM_OC1_SetConfig+0x3e>
 800416e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004172:	42a8      	cmp	r0, r5
 8004174:	d005      	beq.n	8004182 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8004176:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8004178:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800417a:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800417c:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800417e:	6203      	str	r3, [r0, #32]
} 
 8004180:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8004182:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004184:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8004188:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800418e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004190:	694d      	ldr	r5, [r1, #20]
 8004192:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004194:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004198:	432a      	orrs	r2, r5
 800419a:	e7ec      	b.n	8004176 <TIM_OC1_SetConfig+0x32>
 800419c:	40010000 	.word	0x40010000

080041a0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a0:	6a03      	ldr	r3, [r0, #32]
 80041a2:	f023 0310 	bic.w	r3, r3, #16
{
 80041a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80041aa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80041ac:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80041ae:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80041b0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 80041b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80041ba:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80041be:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 80041c2:	688d      	ldr	r5, [r1, #8]
 80041c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80041c8:	4d0d      	ldr	r5, [pc, #52]	; (8004200 <TIM_OC2_SetConfig+0x60>)
 80041ca:	42a8      	cmp	r0, r5
 80041cc:	d009      	beq.n	80041e2 <TIM_OC2_SetConfig+0x42>
 80041ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041d2:	42a8      	cmp	r0, r5
 80041d4:	d005      	beq.n	80041e2 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80041d6:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80041d8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80041da:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80041dc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80041de:	6203      	str	r3, [r0, #32]
}
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80041e2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80041e8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80041ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80041f2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80041f4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80041f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80041fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80041fe:	e7ea      	b.n	80041d6 <TIM_OC2_SetConfig+0x36>
 8004200:	40010000 	.word	0x40010000

08004204 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004204:	6a03      	ldr	r3, [r0, #32]
 8004206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800420a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800420e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004210:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004212:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8004218:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800421a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800421e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004222:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004224:	688d      	ldr	r5, [r1, #8]
 8004226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800422a:	4d0e      	ldr	r5, [pc, #56]	; (8004264 <TIM_OC3_SetConfig+0x60>)
 800422c:	42a8      	cmp	r0, r5
 800422e:	d009      	beq.n	8004244 <TIM_OC3_SetConfig+0x40>
 8004230:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004234:	42a8      	cmp	r0, r5
 8004236:	d005      	beq.n	8004244 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8004238:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 800423a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800423c:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800423e:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004240:	6203      	str	r3, [r0, #32]
}
 8004242:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004244:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800424a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800424c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004250:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004254:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004256:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800425c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004260:	e7ea      	b.n	8004238 <TIM_OC3_SetConfig+0x34>
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000

08004268 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004268:	6a03      	ldr	r3, [r0, #32]
 800426a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800426e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004270:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004272:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004274:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004276:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004278:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800427c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800427e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004282:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004286:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 800428a:	688d      	ldr	r5, [r1, #8]
 800428c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004290:	4d09      	ldr	r5, [pc, #36]	; (80042b8 <TIM_OC4_SetConfig+0x50>)
 8004292:	42a8      	cmp	r0, r5
 8004294:	d009      	beq.n	80042aa <TIM_OC4_SetConfig+0x42>
 8004296:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800429a:	42a8      	cmp	r0, r5
 800429c:	d005      	beq.n	80042aa <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800429e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80042a0:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80042a2:	684b      	ldr	r3, [r1, #4]
 80042a4:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80042a6:	6204      	str	r4, [r0, #32]
}
 80042a8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80042ae:	694d      	ldr	r5, [r1, #20]
 80042b0:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80042b4:	e7f3      	b.n	800429e <TIM_OC4_SetConfig+0x36>
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042be:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80042c0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042ca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042cc:	6083      	str	r3, [r0, #8]
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80042d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
{
 80042d6:	b510      	push	{r4, lr}
 80042d8:	4604      	mov	r4, r0
 80042da:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80042de:	d018      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80042e4:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80042e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80042e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ee:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <HAL_TIM_ConfigClockSource+0x118>)
 80042f0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80042f2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80042f4:	680b      	ldr	r3, [r1, #0]
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d059      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xde>
 80042fa:	d815      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x58>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d067      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x100>
 8004300:	d808      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x44>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d05e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8004306:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004308:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800430a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800430e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004312:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004314:	2b20      	cmp	r3, #32
 8004316:	d061      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x10c>
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	d1f4      	bne.n	8004306 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 800431c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004322:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8004326:	e026      	b.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004328:	2b70      	cmp	r3, #112	; 0x70
 800432a:	d026      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xaa>
 800432c:	d80e      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x7c>
 800432e:	2b50      	cmp	r3, #80	; 0x50
 8004330:	d032      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xc8>
 8004332:	2b60      	cmp	r3, #96	; 0x60
 8004334:	d1e7      	bne.n	8004306 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004336:	68ca      	ldr	r2, [r1, #12]
 8004338:	6849      	ldr	r1, [r1, #4]
 800433a:	f7ff fd95 	bl	8003e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800433e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8004340:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004346:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800434a:	e023      	b.n	8004394 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d00c      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x9c>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	d1d6      	bne.n	8004306 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8004358:	68cb      	ldr	r3, [r1, #12]
 800435a:	684a      	ldr	r2, [r1, #4]
 800435c:	6889      	ldr	r1, [r1, #8]
 800435e:	f7ff ffad 	bl	80042bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	6893      	ldr	r3, [r2, #8]
 8004366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800436a:	e013      	b.n	8004394 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800436c:	6883      	ldr	r3, [r0, #8]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8004376:	6083      	str	r3, [r0, #8]
 8004378:	e7c5      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800437a:	68cb      	ldr	r3, [r1, #12]
 800437c:	684a      	ldr	r2, [r1, #4]
 800437e:	6889      	ldr	r1, [r1, #8]
 8004380:	f7ff ff9c 	bl	80042bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004394:	6093      	str	r3, [r2, #8]
    break;
 8004396:	e7b6      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004398:	68ca      	ldr	r2, [r1, #12]
 800439a:	6849      	ldr	r1, [r1, #4]
 800439c:	f7ff fd53 	bl	8003e46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80043a2:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80043a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80043ac:	e7f2      	b.n	8004394 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80043ae:	68ca      	ldr	r2, [r1, #12]
 80043b0:	6849      	ldr	r1, [r1, #4]
 80043b2:	f7ff fd48 	bl	8003e46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b6:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80043b8:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043be:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80043c2:	e7e7      	b.n	8004394 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 80043c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043ca:	f043 0307 	orr.w	r3, r3, #7
 80043ce:	e7d2      	b.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80043d0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043d6:	f043 0317 	orr.w	r3, r3, #23
 80043da:	e7cc      	b.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80043dc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043e2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80043e6:	e7c6      	b.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 80043e8:	fffe0088 	.word	0xfffe0088

080043ec <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80043f2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043f4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80043f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8004400:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800440a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800440c:	688d      	ldr	r5, [r1, #8]
 800440e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004412:	4d09      	ldr	r5, [pc, #36]	; (8004438 <TIM_OC5_SetConfig+0x4c>)
 8004414:	42a8      	cmp	r0, r5
 8004416:	d003      	beq.n	8004420 <TIM_OC5_SetConfig+0x34>
 8004418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800441c:	42a8      	cmp	r0, r5
 800441e:	d104      	bne.n	800442a <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004420:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004424:	694d      	ldr	r5, [r1, #20]
 8004426:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800442c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800442e:	684b      	ldr	r3, [r1, #4]
 8004430:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004432:	6202      	str	r2, [r0, #32]
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000

0800443c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800443c:	6a03      	ldr	r3, [r0, #32]
 800443e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8004442:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004444:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004448:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800444a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800444c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004450:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800445a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800445e:	688d      	ldr	r5, [r1, #8]
 8004460:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	4d08      	ldr	r5, [pc, #32]	; (8004488 <TIM_OC6_SetConfig+0x4c>)
 8004466:	42a8      	cmp	r0, r5
 8004468:	d003      	beq.n	8004472 <TIM_OC6_SetConfig+0x36>
 800446a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800446e:	42a8      	cmp	r0, r5
 8004470:	d104      	bne.n	800447c <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004472:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004476:	694d      	ldr	r5, [r1, #20]
 8004478:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800447e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004480:	684b      	ldr	r3, [r1, #4]
 8004482:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004484:	6202      	str	r2, [r0, #32]
 8004486:	bd30      	pop	{r4, r5, pc}
 8004488:	40010000 	.word	0x40010000

0800448c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800448c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
{
 8004492:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004494:	d01c      	beq.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8004496:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004498:	4d0e      	ldr	r5, [pc, #56]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800449a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800449c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800449e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a0:	d003      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80044a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044a6:	42aa      	cmp	r2, r5
 80044a8:	d103      	bne.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ae:	684d      	ldr	r5, [r1, #4]
 80044b0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b8:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044ba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044be:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044c0:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80044c2:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80044c4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80044c6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80044c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80044d0:	2002      	movs	r0, #2
} 
 80044d2:	bd30      	pop	{r4, r5, pc}
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80044d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
{
 80044de:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80044e0:	d038      	beq.n	8004554 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044e2:	68cb      	ldr	r3, [r1, #12]
 80044e4:	688a      	ldr	r2, [r1, #8]
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044ea:	4c1b      	ldr	r4, [pc, #108]	; (8004558 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044ee:	684a      	ldr	r2, [r1, #4]
 80044f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044f6:	680a      	ldr	r2, [r1, #0]
 80044f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044fe:	690a      	ldr	r2, [r1, #16]
 8004500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004504:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004506:	694a      	ldr	r2, [r1, #20]
 8004508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800450c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800450e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004510:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004514:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004516:	698a      	ldr	r2, [r1, #24]
 8004518:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800451c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004520:	6802      	ldr	r2, [r0, #0]
 8004522:	42a2      	cmp	r2, r4
 8004524:	d003      	beq.n	800452e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8004526:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800452a:	42a2      	cmp	r2, r4
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800452e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004530:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004534:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004538:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800453a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800453c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004540:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004542:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004546:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8004548:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800454a:	2300      	movs	r3, #0
 800454c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004550:	4618      	mov	r0, r3
 8004552:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004554:	2002      	movs	r0, #2
}
 8004556:	bd10      	pop	{r4, pc}
 8004558:	40010000 	.word	0x40010000

0800455c <HAL_TIMEx_CommutationCallback>:
 800455c:	4770      	bx	lr

0800455e <HAL_TIMEx_BreakCallback>:
{
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PWM_ConfigChannel>:
{
 8004560:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004562:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004566:	4604      	mov	r4, r0
 8004568:	460d      	mov	r5, r1
 800456a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800456c:	2b01      	cmp	r3, #1
 800456e:	d010      	beq.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004570:	2301      	movs	r3, #1
  switch (Channel)
 8004572:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004578:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800457c:	d043      	beq.n	8004606 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800457e:	d809      	bhi.n	8004594 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004580:	b1fa      	cbz	r2, 80045c2 <HAL_TIM_PWM_ConfigChannel+0x62>
 8004582:	2a04      	cmp	r2, #4
 8004584:	d02e      	beq.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8004586:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004588:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800458a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800458e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004592:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004594:	2a10      	cmp	r2, #16
 8004596:	d047      	beq.n	8004628 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8004598:	2a14      	cmp	r2, #20
 800459a:	d056      	beq.n	800464a <HAL_TIM_PWM_ConfigChannel+0xea>
 800459c:	2a0c      	cmp	r2, #12
 800459e:	d1f2      	bne.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	f7ff fe61 	bl	8004268 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80045a8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045c0:	e030      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	f7ff fdbe 	bl	8004144 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ca:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	f042 0208 	orr.w	r2, r2, #8
 80045d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	f022 0204 	bic.w	r2, r2, #4
 80045da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80045e0:	619a      	str	r2, [r3, #24]
    break;
 80045e2:	e7d0      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	f7ff fddb 	bl	80041a0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80045ec:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004604:	e7ec      	b.n	80045e0 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	6820      	ldr	r0, [r4, #0]
 8004608:	f7ff fdfc 	bl	8004204 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800460c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800460e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004624:	61da      	str	r2, [r3, #28]
    break;
 8004626:	e7ae      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	f7ff fedf 	bl	80043ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800462e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004630:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004632:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800463a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800463c:	f022 0204 	bic.w	r2, r2, #4
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004644:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004648:	e79d      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	f7ff fef6 	bl	800443c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004650:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004652:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800465c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004666:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800466a:	e7ec      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800466c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	9d06      	ldr	r5, [sp, #24]
 8004672:	4604      	mov	r4, r0
 8004674:	460f      	mov	r7, r1
 8004676:	4616      	mov	r6, r2
 8004678:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	69ca      	ldr	r2, [r1, #28]
 800467e:	ea37 0302 	bics.w	r3, r7, r2
 8004682:	bf0c      	ite	eq
 8004684:	2201      	moveq	r2, #1
 8004686:	2200      	movne	r2, #0
 8004688:	42b2      	cmp	r2, r6
 800468a:	d002      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800468c:	2000      	movs	r0, #0
}
 800468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004692:	1c6b      	adds	r3, r5, #1
 8004694:	d0f2      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004696:	b99d      	cbnz	r5, 80046c0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004698:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800469a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80046ac:	2320      	movs	r3, #32
 80046ae:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80046b2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80046b6:	2300      	movs	r3, #0
 80046b8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80046c0:	f7fd f800 	bl	80016c4 <HAL_GetTick>
 80046c4:	eba0 0008 	sub.w	r0, r0, r8
 80046c8:	4285      	cmp	r5, r0
 80046ca:	d8d6      	bhi.n	800467a <UART_WaitOnFlagUntilTimeout+0xe>
 80046cc:	e7e4      	b.n	8004698 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

080046d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046d4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d6:	69c3      	ldr	r3, [r0, #28]
 80046d8:	6921      	ldr	r1, [r4, #16]
 80046da:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046dc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046de:	430a      	orrs	r2, r1
 80046e0:	6961      	ldr	r1, [r4, #20]
 80046e2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046e4:	4993      	ldr	r1, [pc, #588]	; (8004934 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046e8:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80046ea:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046ec:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ee:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046f0:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f2:	686a      	ldr	r2, [r5, #4]
 80046f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046f8:	430a      	orrs	r2, r1
 80046fa:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80046fc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80046fe:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004700:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004702:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004706:	430a      	orrs	r2, r1
 8004708:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470a:	4a8b      	ldr	r2, [pc, #556]	; (8004938 <UART_SetConfig+0x268>)
 800470c:	4295      	cmp	r5, r2
 800470e:	d119      	bne.n	8004744 <UART_SetConfig+0x74>
 8004710:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004714:	4989      	ldr	r1, [pc, #548]	; (800493c <UART_SetConfig+0x26c>)
 8004716:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800471a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004722:	5c8a      	ldrb	r2, [r1, r2]
 8004724:	f040 80b3 	bne.w	800488e <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8004728:	2a08      	cmp	r2, #8
 800472a:	f200 80ad 	bhi.w	8004888 <UART_SetConfig+0x1b8>
 800472e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004732:	0026      	.short	0x0026
 8004734:	00e9007b 	.word	0x00e9007b
 8004738:	00f500ab 	.word	0x00f500ab
 800473c:	00ab00ab 	.word	0x00ab00ab
 8004740:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004744:	4a7e      	ldr	r2, [pc, #504]	; (8004940 <UART_SetConfig+0x270>)
 8004746:	4295      	cmp	r5, r2
 8004748:	d107      	bne.n	800475a <UART_SetConfig+0x8a>
 800474a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800474e:	497d      	ldr	r1, [pc, #500]	; (8004944 <UART_SetConfig+0x274>)
 8004750:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004754:	f002 020c 	and.w	r2, r2, #12
 8004758:	e7e1      	b.n	800471e <UART_SetConfig+0x4e>
 800475a:	4a7b      	ldr	r2, [pc, #492]	; (8004948 <UART_SetConfig+0x278>)
 800475c:	4295      	cmp	r5, r2
 800475e:	d12b      	bne.n	80047b8 <UART_SetConfig+0xe8>
 8004760:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8004764:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004768:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800476c:	2a10      	cmp	r2, #16
 800476e:	f000 80d2 	beq.w	8004916 <UART_SetConfig+0x246>
 8004772:	d816      	bhi.n	80047a2 <UART_SetConfig+0xd2>
 8004774:	b9da      	cbnz	r2, 80047ae <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477a:	f040 809f 	bne.w	80048bc <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800477e:	f7fe fdf9 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004782:	6861      	ldr	r1, [r4, #4]
 8004784:	084a      	lsrs	r2, r1, #1
 8004786:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800478a:	fbb3 f3f1 	udiv	r3, r3, r1
 800478e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004790:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004792:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004796:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
 80047a0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047a2:	2a20      	cmp	r2, #32
 80047a4:	f000 80ab 	beq.w	80048fe <UART_SetConfig+0x22e>
 80047a8:	2a30      	cmp	r2, #48	; 0x30
 80047aa:	f000 80ba 	beq.w	8004922 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b2:	d069      	beq.n	8004888 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80047b4:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b8:	4a64      	ldr	r2, [pc, #400]	; (800494c <UART_SetConfig+0x27c>)
 80047ba:	4295      	cmp	r5, r2
 80047bc:	d10e      	bne.n	80047dc <UART_SetConfig+0x10c>
 80047be:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80047c2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80047c6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80047ca:	2a40      	cmp	r2, #64	; 0x40
 80047cc:	f000 80a3 	beq.w	8004916 <UART_SetConfig+0x246>
 80047d0:	d9d0      	bls.n	8004774 <UART_SetConfig+0xa4>
 80047d2:	2a80      	cmp	r2, #128	; 0x80
 80047d4:	f000 8093 	beq.w	80048fe <UART_SetConfig+0x22e>
 80047d8:	2ac0      	cmp	r2, #192	; 0xc0
 80047da:	e7e6      	b.n	80047aa <UART_SetConfig+0xda>
 80047dc:	4a5c      	ldr	r2, [pc, #368]	; (8004950 <UART_SetConfig+0x280>)
 80047de:	4295      	cmp	r5, r2
 80047e0:	d110      	bne.n	8004804 <UART_SetConfig+0x134>
 80047e2:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80047e6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80047ea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80047ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80047f2:	f000 8090 	beq.w	8004916 <UART_SetConfig+0x246>
 80047f6:	d9bd      	bls.n	8004774 <UART_SetConfig+0xa4>
 80047f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80047fc:	d07f      	beq.n	80048fe <UART_SetConfig+0x22e>
 80047fe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004802:	e7d2      	b.n	80047aa <UART_SetConfig+0xda>
 8004804:	4a53      	ldr	r2, [pc, #332]	; (8004954 <UART_SetConfig+0x284>)
 8004806:	4295      	cmp	r5, r2
 8004808:	d117      	bne.n	800483a <UART_SetConfig+0x16a>
 800480a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800480e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004812:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004816:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800481a:	d07c      	beq.n	8004916 <UART_SetConfig+0x246>
 800481c:	d807      	bhi.n	800482e <UART_SetConfig+0x15e>
 800481e:	2a00      	cmp	r2, #0
 8004820:	d1c5      	bne.n	80047ae <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004826:	d154      	bne.n	80048d2 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004828:	f7fe fdb4 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 800482c:	e7a9      	b.n	8004782 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004832:	d064      	beq.n	80048fe <UART_SetConfig+0x22e>
 8004834:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004838:	e7b7      	b.n	80047aa <UART_SetConfig+0xda>
 800483a:	4a47      	ldr	r2, [pc, #284]	; (8004958 <UART_SetConfig+0x288>)
 800483c:	4295      	cmp	r5, r2
 800483e:	d10f      	bne.n	8004860 <UART_SetConfig+0x190>
 8004840:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8004844:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004848:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800484c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004850:	d061      	beq.n	8004916 <UART_SetConfig+0x246>
 8004852:	d98f      	bls.n	8004774 <UART_SetConfig+0xa4>
 8004854:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004858:	d051      	beq.n	80048fe <UART_SetConfig+0x22e>
 800485a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800485e:	e7a4      	b.n	80047aa <UART_SetConfig+0xda>
 8004860:	4a3e      	ldr	r2, [pc, #248]	; (800495c <UART_SetConfig+0x28c>)
 8004862:	4295      	cmp	r5, r2
 8004864:	d1a3      	bne.n	80047ae <UART_SetConfig+0xde>
 8004866:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800486a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800486e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004872:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004876:	d04e      	beq.n	8004916 <UART_SetConfig+0x246>
 8004878:	f67f af7c 	bls.w	8004774 <UART_SetConfig+0xa4>
 800487c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004880:	d03d      	beq.n	80048fe <UART_SetConfig+0x22e>
 8004882:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8004886:	e790      	b.n	80047aa <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8004888:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800488a:	2300      	movs	r3, #0
 800488c:	e781      	b.n	8004792 <UART_SetConfig+0xc2>
    switch (clocksource)
 800488e:	2a08      	cmp	r2, #8
 8004890:	d890      	bhi.n	80047b4 <UART_SetConfig+0xe4>
 8004892:	a301      	add	r3, pc, #4	; (adr r3, 8004898 <UART_SetConfig+0x1c8>)
 8004894:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080047b5 	.word	0x080047b5
 80048a8:	080048ef 	.word	0x080048ef
 80048ac:	080047b5 	.word	0x080047b5
 80048b0:	080047b5 	.word	0x080047b5
 80048b4:	080047b5 	.word	0x080047b5
 80048b8:	080048f5 	.word	0x080048f5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048bc:	f7fe fd5a 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80048c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80048ca:	b280      	uxth	r0, r0
 80048cc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ce:	2000      	movs	r0, #0
      break;
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80048d2:	f7fe fd5f 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80048d6:	e7f3      	b.n	80048c0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048d8:	6862      	ldr	r2, [r4, #4]
 80048da:	0853      	lsrs	r3, r2, #1
 80048dc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80048e0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	60eb      	str	r3, [r5, #12]
 80048ec:	e7ef      	b.n	80048ce <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048ee:	f7fe fc6f 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 80048f2:	e7e5      	b.n	80048c0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048f4:	6862      	ldr	r2, [r4, #4]
 80048f6:	0853      	lsrs	r3, r2, #1
 80048f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80048fc:	e7f2      	b.n	80048e4 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d1e9      	bne.n	80048d8 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004904:	6860      	ldr	r0, [r4, #4]
 8004906:	0843      	lsrs	r3, r0, #1
 8004908:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800490c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004910:	fbb3 f3f0 	udiv	r3, r3, r0
 8004914:	e73b      	b.n	800478e <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d1e8      	bne.n	80048ee <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800491c:	f7fe fc58 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8004920:	e72f      	b.n	8004782 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004926:	d1e5      	bne.n	80048f4 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004928:	6860      	ldr	r0, [r4, #4]
 800492a:	0843      	lsrs	r3, r0, #1
 800492c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004930:	e7ee      	b.n	8004910 <UART_SetConfig+0x240>
 8004932:	bf00      	nop
 8004934:	efff69f3 	.word	0xefff69f3
 8004938:	40011000 	.word	0x40011000
 800493c:	080086cc 	.word	0x080086cc
 8004940:	40004400 	.word	0x40004400
 8004944:	080086d0 	.word	0x080086d0
 8004948:	40004800 	.word	0x40004800
 800494c:	40004c00 	.word	0x40004c00
 8004950:	40005000 	.word	0x40005000
 8004954:	40011400 	.word	0x40011400
 8004958:	40007800 	.word	0x40007800
 800495c:	40007c00 	.word	0x40007c00

08004960 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004960:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004962:	07da      	lsls	r2, r3, #31
{
 8004964:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004966:	d506      	bpl.n	8004976 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800496c:	684a      	ldr	r2, [r1, #4]
 800496e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004972:	4322      	orrs	r2, r4
 8004974:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004976:	079c      	lsls	r4, r3, #30
 8004978:	d506      	bpl.n	8004988 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800497a:	6801      	ldr	r1, [r0, #0]
 800497c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800497e:	684a      	ldr	r2, [r1, #4]
 8004980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004984:	4322      	orrs	r2, r4
 8004986:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004988:	0759      	lsls	r1, r3, #29
 800498a:	d506      	bpl.n	800499a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498c:	6801      	ldr	r1, [r0, #0]
 800498e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004990:	684a      	ldr	r2, [r1, #4]
 8004992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004996:	4322      	orrs	r2, r4
 8004998:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499a:	071a      	lsls	r2, r3, #28
 800499c:	d506      	bpl.n	80049ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499e:	6801      	ldr	r1, [r0, #0]
 80049a0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80049a2:	684a      	ldr	r2, [r1, #4]
 80049a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a8:	4322      	orrs	r2, r4
 80049aa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ac:	06dc      	lsls	r4, r3, #27
 80049ae:	d506      	bpl.n	80049be <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b0:	6801      	ldr	r1, [r0, #0]
 80049b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049ba:	4322      	orrs	r2, r4
 80049bc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049be:	0699      	lsls	r1, r3, #26
 80049c0:	d506      	bpl.n	80049d0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c2:	6801      	ldr	r1, [r0, #0]
 80049c4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80049c6:	688a      	ldr	r2, [r1, #8]
 80049c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049cc:	4322      	orrs	r2, r4
 80049ce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d0:	065a      	lsls	r2, r3, #25
 80049d2:	d510      	bpl.n	80049f6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d4:	6801      	ldr	r1, [r0, #0]
 80049d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80049d8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80049e2:	ea42 0204 	orr.w	r2, r2, r4
 80049e6:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049e8:	d105      	bne.n	80049f6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ea:	684a      	ldr	r2, [r1, #4]
 80049ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80049ee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80049f2:	4322      	orrs	r2, r4
 80049f4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	d506      	bpl.n	8004a08 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fa:	6802      	ldr	r2, [r0, #0]
 80049fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80049fe:	6853      	ldr	r3, [r2, #4]
 8004a00:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6053      	str	r3, [r2, #4]
 8004a08:	bd10      	pop	{r4, pc}

08004a0a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	2500      	movs	r5, #0
{
 8004a0e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a12:	f7fc fe57 	bl	80016c4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a16:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004a18:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	0712      	lsls	r2, r2, #28
 8004a1e:	d409      	bmi.n	8004a34 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004a20:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a22:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8004a24:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8004a28:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8004a2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8004a30:	b003      	add	sp, #12
 8004a32:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a34:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004a38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	9200      	str	r2, [sp, #0]
 8004a40:	462a      	mov	r2, r5
 8004a42:	f7ff fe13 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0ea      	beq.n	8004a20 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	e7f0      	b.n	8004a30 <UART_CheckIdleState+0x26>

08004a4e <HAL_UART_Init>:
{
 8004a4e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004a50:	4604      	mov	r4, r0
 8004a52:	b360      	cbz	r0, 8004aae <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004a54:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004a58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a5c:	b91b      	cbnz	r3, 8004a66 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004a5e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004a62:	f001 fb01 	bl	8006068 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a66:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a68:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a6a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004a6c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a78:	f7ff fe2a 	bl	80046d0 <UART_SetConfig>
 8004a7c:	2801      	cmp	r0, #1
 8004a7e:	d016      	beq.n	8004aae <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a82:	b113      	cbz	r3, 8004a8a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff ff6b 	bl	8004960 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004a8c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
}
 8004aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004aa8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004aaa:	f7ff bfae 	b.w	8004a0a <UART_CheckIdleState>
}
 8004aae:	2001      	movs	r0, #1
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004ab2:	680b      	ldr	r3, [r1, #0]
 8004ab4:	684a      	ldr	r2, [r1, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004abc:	6803      	ldr	r3, [r0, #0]
{
 8004abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac2:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8004ac6:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004aca:	694d      	ldr	r5, [r1, #20]
 8004acc:	698c      	ldr	r4, [r1, #24]
 8004ace:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8004ad2:	6a0f      	ldr	r7, [r1, #32]
 8004ad4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004ad6:	d014      	beq.n	8004b02 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004ad8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004adc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	ea42 0209 	orr.w	r2, r2, r9
 8004ae6:	ea42 0208 	orr.w	r2, r2, r8
 8004aea:	ea42 030c 	orr.w	r3, r2, ip
 8004aee:	432b      	orrs	r3, r5
 8004af0:	4323      	orrs	r3, r4
 8004af2:	ea43 030e 	orr.w	r3, r3, lr
 8004af6:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004af8:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004afa:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004afc:	2000      	movs	r0, #0
 8004afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004b02:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004b08:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004b0c:	ea43 030e 	orr.w	r3, r3, lr
 8004b10:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004b14:	433b      	orrs	r3, r7
 8004b16:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004b18:	431e      	orrs	r6, r3
 8004b1a:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004b1e:	6006      	str	r6, [r0, #0]
 8004b20:	ea42 0208 	orr.w	r2, r2, r8
 8004b24:	ea42 030c 	orr.w	r3, r2, ip
 8004b28:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004b2a:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004b2c:	6043      	str	r3, [r0, #4]
 8004b2e:	e7e5      	b.n	8004afc <FMC_SDRAM_Init+0x4a>

08004b30 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004b30:	2a01      	cmp	r2, #1
 8004b32:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8004b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b38:	e891 4008 	ldmia.w	r1, {r3, lr}
 8004b3c:	688f      	ldr	r7, [r1, #8]
 8004b3e:	690d      	ldr	r5, [r1, #16]
 8004b40:	694e      	ldr	r6, [r1, #20]
 8004b42:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8004b44:	d01b      	beq.n	8004b7e <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004b46:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004b48:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004b4c:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004b4e:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004b52:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004b56:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 8004b58:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 8004b5a:	3901      	subs	r1, #1
 8004b5c:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004b60:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004b62:	1e7b      	subs	r3, r7, #1
 8004b64:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004b68:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8004b6c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004b70:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004b74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004b78:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004b7e:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004b80:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004b84:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004b86:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004b88:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004b8c:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004b90:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8004b94:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004b96:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 8004b9a:	3901      	subs	r1, #1
 8004b9c:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004ba0:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8004ba4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004ba6:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004ba8:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8004bac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004bb0:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004bb2:	6086      	str	r6, [r0, #8]
 8004bb4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004bb8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004bbc:	60c3      	str	r3, [r0, #12]
 8004bbe:	e7dc      	b.n	8004b7a <FMC_SDRAM_Timing_Init+0x4a>

08004bc0 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004bc0:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8004bc4:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004bc6:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8004bc8:	68ca      	ldr	r2, [r1, #12]
{
 8004bca:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8004bcc:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004bce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004bd2:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8004bd4:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004bd6:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004bd8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004bdc:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8004be2:	b002      	add	sp, #8
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8004be6:	6943      	ldr	r3, [r0, #20]
 8004be8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004bec:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004bee:	2000      	movs	r0, #0
 8004bf0:	4770      	bx	lr
	...

08004bf4 <led_on>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

static void led_on(void) {
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <led_on+0xc>)
 8004bfa:	f7fd bad7 	b.w	80021ac <HAL_GPIO_WritePin>
 8004bfe:	bf00      	nop
 8004c00:	40022000 	.word	0x40022000

08004c04 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <SystemClock_Config+0xe0>)
 8004c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8004c0c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
{
 8004c10:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c14:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c16:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c18:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <SystemClock_Config+0xe4>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004c2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c30:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c32:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c3c:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c3e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004c40:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004c46:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004c48:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004c4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004c4e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c50:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004c52:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c54:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004c56:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c58:	f7fe f926 	bl	8002ea8 <HAL_RCC_OscConfig>
 8004c5c:	b100      	cbz	r0, 8004c60 <SystemClock_Config+0x5c>
 8004c5e:	e7fe      	b.n	8004c5e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c60:	f7fe f8ea 	bl	8002e38 <HAL_PWREx_EnableOverDrive>
 8004c64:	b100      	cbz	r0, 8004c68 <SystemClock_Config+0x64>
 8004c66:	e7fe      	b.n	8004c66 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c68:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004c6c:	2106      	movs	r1, #6
 8004c6e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c70:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c76:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c78:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004c80:	f7fe fad4 	bl	800322c <HAL_RCC_ClockConfig>
 8004c84:	b100      	cbz	r0, 8004c88 <SystemClock_Config+0x84>
 8004c86:	e7fe      	b.n	8004c86 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <SystemClock_Config+0xe8>)
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c8a:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8004c8c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004c8e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004c92:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004c94:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004c96:	2305      	movs	r3, #5
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c98:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004c9a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004c9c:	2303      	movs	r3, #3
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004c9e:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ca0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004ca2:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004ca8:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004caa:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004cac:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004cb0:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004cb2:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cb4:	f7fe fb9c 	bl	80033f0 <HAL_RCCEx_PeriphCLKConfig>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	b100      	cbz	r0, 8004cbe <SystemClock_Config+0xba>
 8004cbc:	e7fe      	b.n	8004cbc <SystemClock_Config+0xb8>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004cbe:	f7fe fb53 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8004cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cca:	f7fc fead 	bl	8001a28 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004cce:	2004      	movs	r0, #4
 8004cd0:	f7fc fec0 	bl	8001a54 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	f7fc fe60 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 8004ce0:	b035      	add	sp, #212	; 0xd4
 8004ce2:	bd30      	pop	{r4, r5, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	00014868 	.word	0x00014868

08004cf0 <main>:
{
 8004cf0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004cf4:	b0a9      	sub	sp, #164	; 0xa4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cfa:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004cfe:	4bb1      	ldr	r3, [pc, #708]	; (8004fc4 <main+0x2d4>)
 8004d00:	2100      	movs	r1, #0
 8004d02:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d0c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004d12:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8004d16:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004d1a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004d1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004d22:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004d26:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004d2a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8004d2e:	07a5      	lsls	r5, r4, #30
 8004d30:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004d32:	ea02 0e06 	and.w	lr, r2, r6
 8004d36:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004d38:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004d3a:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways--);
 8004d3e:	3901      	subs	r1, #1
 8004d40:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004d44:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8004d48:	1c4f      	adds	r7, r1, #1
 8004d4a:	d1f6      	bne.n	8004d3a <main+0x4a>
 8004d4c:	3a20      	subs	r2, #32
    } while(sets--);
 8004d4e:	f112 0f20 	cmn.w	r2, #32
 8004d52:	d1ee      	bne.n	8004d32 <main+0x42>
 8004d54:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d5e:	615a      	str	r2, [r3, #20]
 8004d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004d64:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004d68:	f7fc fc94 	bl	8001694 <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d6c:	2400      	movs	r4, #0
  SystemClock_Config();
 8004d6e:	f7ff ff49 	bl	8004c04 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d72:	4b95      	ldr	r3, [pc, #596]	; (8004fc8 <main+0x2d8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004d74:	2120      	movs	r1, #32
 8004d76:	4895      	ldr	r0, [pc, #596]	; (8004fcc <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004d7a:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7e:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d80:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d82:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004d86:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004d8a:	f04f 080a 	mov.w	r8, #10
  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004d8e:	f04f 0a0d 	mov.w	sl, #13
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d94:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d98:	f002 0210 	and.w	r2, r2, #16
 8004d9c:	9202      	str	r2, [sp, #8]
 8004d9e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	f042 0202 	orr.w	r2, r2, #2
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbc:	f002 0202 	and.w	r2, r2, #2
 8004dc0:	9204      	str	r2, [sp, #16]
 8004dc2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	f002 0208 	and.w	r2, r2, #8
 8004dd2:	9205      	str	r2, [sp, #20]
 8004dd4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd8:	f042 0204 	orr.w	r2, r2, #4
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	f002 0204 	and.w	r2, r2, #4
 8004de4:	9206      	str	r2, [sp, #24]
 8004de6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	f002 0201 	and.w	r2, r2, #1
 8004df6:	9207      	str	r2, [sp, #28]
 8004df8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
 8004e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e04:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004e08:	9208      	str	r2, [sp, #32]
 8004e0a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
 8004e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e28:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8004e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e32:	f042 0220 	orr.w	r2, r2, #32
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3a:	f002 0220 	and.w	r2, r2, #32
 8004e3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004e4a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	930c      	str	r3, [sp, #48]	; 0x30
 8004e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004e56:	f7fd f9a9 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	210c      	movs	r1, #12
 8004e5e:	485c      	ldr	r0, [pc, #368]	; (8004fd0 <main+0x2e0>)
 8004e60:	f7fd f9a4 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8004e64:	2201      	movs	r2, #1
 8004e66:	2108      	movs	r1, #8
 8004e68:	485a      	ldr	r0, [pc, #360]	; (8004fd4 <main+0x2e4>)
 8004e6a:	f7fd f99f 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e74:	4856      	ldr	r0, [pc, #344]	; (8004fd0 <main+0x2e0>)
 8004e76:	f7fd f999 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e80:	4855      	ldr	r0, [pc, #340]	; (8004fd8 <main+0x2e8>)
 8004e82:	f7fd f993 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8004e86:	2200      	movs	r2, #0
 8004e88:	21c8      	movs	r1, #200	; 0xc8
 8004e8a:	4854      	ldr	r0, [pc, #336]	; (8004fdc <main+0x2ec>)
 8004e8c:	f7fd f98e 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e90:	a91b      	add	r1, sp, #108	; 0x6c
 8004e92:	4853      	ldr	r0, [pc, #332]	; (8004fe0 <main+0x2f0>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004e94:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e98:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e9c:	f7fd f89c 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ea0:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8004ea4:	484e      	ldr	r0, [pc, #312]	; (8004fe0 <main+0x2f0>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ea6:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004ea8:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eac:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004eb2:	f7fd f891 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004eb6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004eba:	a91b      	add	r1, sp, #108	; 0x6c
 8004ebc:	4847      	ldr	r0, [pc, #284]	; (8004fdc <main+0x2ec>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004ebe:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ec0:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ec4:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec8:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004eca:	f7fd f885 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8004ece:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed2:	a91b      	add	r1, sp, #108	; 0x6c
 8004ed4:	4843      	ldr	r0, [pc, #268]	; (8004fe4 <main+0x2f4>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8004ed6:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004ed8:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee2:	f7fd f879 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004ee6:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004ee8:	a91b      	add	r1, sp, #108	; 0x6c
 8004eea:	4838      	ldr	r0, [pc, #224]	; (8004fcc <main+0x2dc>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004eec:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004eee:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef6:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004ef8:	f7fd f86e 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004efc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f00:	a91b      	add	r1, sp, #108	; 0x6c
 8004f02:	4839      	ldr	r0, [pc, #228]	; (8004fe8 <main+0x2f8>)
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004f04:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f06:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8004f0c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f10:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f12:	f7fd f861 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004f16:	2260      	movs	r2, #96	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f18:	a91b      	add	r1, sp, #108	; 0x6c
 8004f1a:	4831      	ldr	r0, [pc, #196]	; (8004fe0 <main+0x2f0>)
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004f1c:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004f24:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f28:	f7fd f856 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004f2c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004f2e:	a91b      	add	r1, sp, #108	; 0x6c
 8004f30:	482c      	ldr	r0, [pc, #176]	; (8004fe4 <main+0x2f4>)
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004f32:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f34:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f38:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004f3e:	f7fd f84b 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8004f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f46:	a91b      	add	r1, sp, #108	; 0x6c
 8004f48:	4828      	ldr	r0, [pc, #160]	; (8004fec <main+0x2fc>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8004f4a:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f4c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f50:	f7fd f842 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8004f54:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004f56:	a91b      	add	r1, sp, #108	; 0x6c
 8004f58:	481c      	ldr	r0, [pc, #112]	; (8004fcc <main+0x2dc>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8004f5a:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004f60:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004f62:	f7fd f839 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004f66:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6a:	a91b      	add	r1, sp, #108	; 0x6c
 8004f6c:	4821      	ldr	r0, [pc, #132]	; (8004ff4 <main+0x304>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004f6e:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004f70:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f74:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f78:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7a:	f7fd f82d 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004f7e:	22f0      	movs	r2, #240	; 0xf0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f80:	a91b      	add	r1, sp, #108	; 0x6c
 8004f82:	4813      	ldr	r0, [pc, #76]	; (8004fd0 <main+0x2e0>)
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004f84:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004f86:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8a:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f8e:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f90:	f7fd f822 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004f98:	a91b      	add	r1, sp, #108	; 0x6c
 8004f9a:	4810      	ldr	r0, [pc, #64]	; (8004fdc <main+0x2ec>)
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004f9c:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004f9e:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa6:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004fa8:	f7fd f816 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004fac:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004fae:	a91b      	add	r1, sp, #108	; 0x6c
 8004fb0:	4806      	ldr	r0, [pc, #24]	; (8004fcc <main+0x2dc>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004fb2:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb4:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb8:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004fba:	f7fd f80d 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004fbe:	a91b      	add	r1, sp, #108	; 0x6c
 8004fc0:	e01a      	b.n	8004ff8 <main+0x308>
 8004fc2:	bf00      	nop
 8004fc4:	e000ed00 	.word	0xe000ed00
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020c00 	.word	0x40020c00
 8004fd0:	40022000 	.word	0x40022000
 8004fd4:	40022800 	.word	0x40022800
 8004fd8:	40021c00 	.word	0x40021c00
 8004fdc:	40021800 	.word	0x40021800
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40022400 	.word	0x40022400
 8004ff0:	10120000 	.word	0x10120000
 8004ff4:	40020000 	.word	0x40020000
 8004ff8:	4898      	ldr	r0, [pc, #608]	; (800525c <main+0x56c>)
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004ffa:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffe:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005002:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005004:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8005008:	f7fc ffe6 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800500c:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005010:	a91b      	add	r1, sp, #108	; 0x6c
 8005012:	4893      	ldr	r0, [pc, #588]	; (8005260 <main+0x570>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8005014:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501a:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800501c:	f7fc ffdc 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8005020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8005024:	a91b      	add	r1, sp, #108	; 0x6c
 8005026:	488f      	ldr	r0, [pc, #572]	; (8005264 <main+0x574>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8005028:	921b      	str	r2, [sp, #108]	; 0x6c
 800502a:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8005030:	f7fc ffd2 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8005034:	a91b      	add	r1, sp, #108	; 0x6c
 8005036:	488c      	ldr	r0, [pc, #560]	; (8005268 <main+0x578>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8005038:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800503c:	f04f 0b10 	mov.w	fp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005040:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005044:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8005046:	f7fc ffc7 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800504a:	f44f 7100 	mov.w	r1, #512	; 0x200
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800504e:	4887      	ldr	r0, [pc, #540]	; (800526c <main+0x57c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005050:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8005052:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8005054:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005058:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800505a:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800505e:	f7fc ffbb 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005062:	a91b      	add	r1, sp, #108	; 0x6c
 8005064:	487d      	ldr	r0, [pc, #500]	; (800525c <main+0x56c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005066:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800506a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800506e:	f7fc ffb3 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005072:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8005074:	a91b      	add	r1, sp, #108	; 0x6c
 8005076:	4879      	ldr	r0, [pc, #484]	; (800525c <main+0x56c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005078:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800507a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005082:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8005084:	f7fc ffa8 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8005088:	f248 0304 	movw	r3, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800508c:	a91b      	add	r1, sp, #108	; 0x6c
 800508e:	4878      	ldr	r0, [pc, #480]	; (8005270 <main+0x580>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8005090:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005092:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005096:	f7fc ff9f 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800509a:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800509c:	a91b      	add	r1, sp, #108	; 0x6c
 800509e:	4870      	ldr	r0, [pc, #448]	; (8005260 <main+0x570>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80050a2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80050a4:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050aa:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f7fc ff94 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80050b0:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80050b2:	a91b      	add	r1, sp, #108	; 0x6c
 80050b4:	486e      	ldr	r0, [pc, #440]	; (8005270 <main+0x580>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80050b6:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b8:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050bc:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80050be:	f7fc ff8b 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80050c2:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050c6:	486a      	ldr	r0, [pc, #424]	; (8005270 <main+0x580>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c8:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80050ca:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050cc:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d0:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80050d2:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d6:	f7fc ff7f 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80050da:	4b66      	ldr	r3, [pc, #408]	; (8005274 <main+0x584>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80050dc:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80050de:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80050e0:	485f      	ldr	r0, [pc, #380]	; (8005260 <main+0x570>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80050e2:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80050e4:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80050e8:	f7fc ff76 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80050ec:	a91b      	add	r1, sp, #108	; 0x6c
 80050ee:	4860      	ldr	r0, [pc, #384]	; (8005270 <main+0x580>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80050f0:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80050f4:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fa:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fc:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80050fe:	f7fc ff6b 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8005102:	22c8      	movs	r2, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005104:	a91b      	add	r1, sp, #108	; 0x6c
 8005106:	4859      	ldr	r0, [pc, #356]	; (800526c <main+0x57c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8005108:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510a:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510e:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005110:	f7fc ff62 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8005114:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005116:	a91b      	add	r1, sp, #108	; 0x6c
 8005118:	4852      	ldr	r0, [pc, #328]	; (8005264 <main+0x574>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800511a:	931b      	str	r3, [sp, #108]	; 0x6c
 800511c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800511e:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005122:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005128:	f7fc ff56 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800512c:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800512e:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005130:	a91b      	add	r1, sp, #108	; 0x6c
 8005132:	484c      	ldr	r0, [pc, #304]	; (8005264 <main+0x574>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005134:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005136:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005138:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800513c:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513e:	f7fc ff4b 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005142:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005144:	a91b      	add	r1, sp, #108	; 0x6c
 8005146:	484c      	ldr	r0, [pc, #304]	; (8005278 <main+0x588>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005148:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800514a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514e:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005152:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005154:	f7fc ff40 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8005158:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800515c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800515e:	a91b      	add	r1, sp, #108	; 0x6c
 8005160:	483e      	ldr	r0, [pc, #248]	; (800525c <main+0x56c>)
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8005162:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005164:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516a:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800516c:	f7fc ff34 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8005170:	a91b      	add	r1, sp, #108	; 0x6c
 8005172:	483e      	ldr	r0, [pc, #248]	; (800526c <main+0x57c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8005174:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005178:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800517c:	f7fc ff2c 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005180:	230b      	movs	r3, #11
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005182:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	a91b      	add	r1, sp, #108	; 0x6c
 8005186:	483d      	ldr	r0, [pc, #244]	; (800527c <main+0x58c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005188:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800518a:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005190:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005192:	f7fc ff21 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8005196:	2250      	movs	r2, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005198:	a91b      	add	r1, sp, #108	; 0x6c
 800519a:	4838      	ldr	r0, [pc, #224]	; (800527c <main+0x58c>)
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800519c:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a0:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a2:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80051a4:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a8:	f7fc ff16 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80051ac:	2228      	movs	r2, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ae:	a91b      	add	r1, sp, #108	; 0x6c
 80051b0:	4832      	ldr	r0, [pc, #200]	; (800527c <main+0x58c>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80051b2:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80051b4:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051bc:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051be:	f7fc ff0b 	bl	8001fd8 <HAL_GPIO_Init>
  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051c2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80051c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	482b      	ldr	r0, [pc, #172]	; (8005278 <main+0x588>)
 80051ca:	a91b      	add	r1, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 80051cc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005290 <main+0x5a0>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051d0:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80051d2:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d8:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051da:	f7fc fefd 	bl	8001fd8 <HAL_GPIO_Init>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <main+0x590>)
 80051e0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80051e4:	4640      	mov	r0, r8
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80051e6:	f8c8 4008 	str.w	r4, [r8, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80051ea:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80051ee:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80051f2:	f8c8 4020 	str.w	r4, [r8, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80051f6:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051fa:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc3.Init.NbrOfConversion = 1;
 80051fe:	f8c8 701c 	str.w	r7, [r8, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005202:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005206:	f8c8 7014 	str.w	r7, [r8, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800520a:	e888 1008 	stmia.w	r8, {r3, ip}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800520e:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <main+0x594>)
 8005210:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005214:	f7fc fa6e 	bl	80016f4 <HAL_ADC_Init>
 8005218:	b100      	cbz	r0, 800521c <main+0x52c>
 800521a:	e7fe      	b.n	800521a <main+0x52a>
  sConfig.Channel = ADC_CHANNEL_6;
 800521c:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800521e:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005220:	a91b      	add	r1, sp, #108	; 0x6c
 8005222:	4640      	mov	r0, r8
  sConfig.Channel = ADC_CHANNEL_6;
 8005224:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005226:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005228:	f7fc fb08 	bl	800183c <HAL_ADC_ConfigChannel>
 800522c:	b100      	cbz	r0, 8005230 <main+0x540>
 800522e:	e7fe      	b.n	800522e <main+0x53e>
  hdma2d.Instance = DMA2D;
 8005230:	4c15      	ldr	r4, [pc, #84]	; (8005288 <main+0x598>)
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <main+0x59c>)
  hdma2d.Init.Mode = DMA2D_M2M;
 8005234:	6060      	str	r0, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005236:	60a0      	str	r0, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8005238:	60e0      	str	r0, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800523a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800523c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800523e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005240:	6360      	str	r0, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005242:	4620      	mov	r0, r4
  hdma2d.Instance = DMA2D;
 8005244:	6023      	str	r3, [r4, #0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005246:	f7fc fd29 	bl	8001c9c <HAL_DMA2D_Init>
 800524a:	b100      	cbz	r0, 800524e <main+0x55e>
 800524c:	e7fe      	b.n	800524c <main+0x55c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800524e:	4639      	mov	r1, r7
 8005250:	4620      	mov	r0, r4
 8005252:	f7fc fe77 	bl	8001f44 <HAL_DMA2D_ConfigLayer>
 8005256:	b1e8      	cbz	r0, 8005294 <main+0x5a4>
 8005258:	e7fe      	b.n	8005258 <main+0x568>
 800525a:	bf00      	nop
 800525c:	40020c00 	.word	0x40020c00
 8005260:	40022000 	.word	0x40022000
 8005264:	40020800 	.word	0x40020800
 8005268:	40022800 	.word	0x40022800
 800526c:	40021800 	.word	0x40021800
 8005270:	40021c00 	.word	0x40021c00
 8005274:	10120000 	.word	0x10120000
 8005278:	40020400 	.word	0x40020400
 800527c:	40020000 	.word	0x40020000
 8005280:	40012200 	.word	0x40012200
 8005284:	0f000001 	.word	0x0f000001
 8005288:	20000678 	.word	0x20000678
 800528c:	4002b000 	.word	0x4002b000
 8005290:	200004f0 	.word	0x200004f0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005294:	4b97      	ldr	r3, [pc, #604]	; (80054f4 <main+0x804>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005296:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005298:	4a97      	ldr	r2, [pc, #604]	; (80054f8 <main+0x808>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800529a:	6058      	str	r0, [r3, #4]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800529c:	601a      	str	r2, [r3, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800529e:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80052a0:	6098      	str	r0, [r3, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80052a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80052a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80052a8:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80052aa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80052ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80052b0:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80052b2:	4618      	mov	r0, r3
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80052b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80052b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80052ba:	f8c3 900c 	str.w	r9, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 80052c0:	2207      	movs	r2, #7
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80052c2:	f8c3 b010 	str.w	fp, [r3, #16]
  SdramTiming.LoadToActiveDelay = 2;
 80052c6:	951b      	str	r5, [sp, #108]	; 0x6c
  SdramTiming.ExitSelfRefreshDelay = 7;
 80052c8:	921c      	str	r2, [sp, #112]	; 0x70
  SdramTiming.SelfRefreshTime = 4;
 80052ca:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
  SdramTiming.RowCycleDelay = 7;
 80052ce:	921e      	str	r2, [sp, #120]	; 0x78
  SdramTiming.WriteRecoveryTime = 3;
 80052d0:	961f      	str	r6, [sp, #124]	; 0x7c
  SdramTiming.RPDelay = 2;
 80052d2:	9520      	str	r5, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 80052d4:	9521      	str	r5, [sp, #132]	; 0x84
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80052d6:	f7fe fd6d 	bl	8003db4 <HAL_SDRAM_Init>
 80052da:	b100      	cbz	r0, 80052de <main+0x5ee>
 80052dc:	e7fe      	b.n	80052dc <main+0x5ec>
  hi2c1.Instance = I2C1;
 80052de:	4c87      	ldr	r4, [pc, #540]	; (80054fc <main+0x80c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
 80052e0:	4b87      	ldr	r3, [pc, #540]	; (8005500 <main+0x810>)
 80052e2:	f8df e244 	ldr.w	lr, [pc, #580]	; 8005528 <main+0x838>
  hi2c1.Init.OwnAddress1 = 0;
 80052e6:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052e8:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052ea:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052ec:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052ee:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052f0:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052f2:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052f4:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80052f6:	e884 4008 	stmia.w	r4, {r3, lr}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052fa:	f7fd f867 	bl	80023cc <HAL_I2C_Init>
 80052fe:	4601      	mov	r1, r0
 8005300:	b100      	cbz	r0, 8005304 <main+0x614>
 8005302:	e7fe      	b.n	8005302 <main+0x612>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005304:	4620      	mov	r0, r4
 8005306:	f7fd fbc3 	bl	8002a90 <HAL_I2CEx_ConfigAnalogFilter>
 800530a:	4601      	mov	r1, r0
 800530c:	b100      	cbz	r0, 8005310 <main+0x620>
 800530e:	e7fe      	b.n	800530e <main+0x61e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005310:	4620      	mov	r0, r4
 8005312:	f7fd fbe3 	bl	8002adc <HAL_I2CEx_ConfigDigitalFilter>
 8005316:	b100      	cbz	r0, 800531a <main+0x62a>
 8005318:	e7fe      	b.n	8005318 <main+0x628>
  hi2c3.Instance = I2C3;
 800531a:	4c7a      	ldr	r4, [pc, #488]	; (8005504 <main+0x814>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800531c:	2501      	movs	r5, #1
  hi2c3.Init.Timing = 0x00303D5B;
 800531e:	4b7a      	ldr	r3, [pc, #488]	; (8005508 <main+0x818>)
 8005320:	4e7a      	ldr	r6, [pc, #488]	; (800550c <main+0x81c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005322:	4620      	mov	r0, r4
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005324:	60e5      	str	r5, [r4, #12]
  hi2c3.Init.Timing = 0x00303D5B;
 8005326:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c3.Init.OwnAddress1 = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	60a3      	str	r3, [r4, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800532e:	6123      	str	r3, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8005330:	6163      	str	r3, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005332:	61a3      	str	r3, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005334:	61e3      	str	r3, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005336:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005338:	f7fd f848 	bl	80023cc <HAL_I2C_Init>
 800533c:	4601      	mov	r1, r0
 800533e:	b100      	cbz	r0, 8005342 <main+0x652>
 8005340:	e7fe      	b.n	8005340 <main+0x650>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005342:	4620      	mov	r0, r4
 8005344:	f7fd fba4 	bl	8002a90 <HAL_I2CEx_ConfigAnalogFilter>
 8005348:	4601      	mov	r1, r0
 800534a:	b100      	cbz	r0, 800534e <main+0x65e>
 800534c:	e7fe      	b.n	800534c <main+0x65c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800534e:	4620      	mov	r0, r4
 8005350:	f7fd fbc4 	bl	8002adc <HAL_I2CEx_ConfigDigitalFilter>
 8005354:	b100      	cbz	r0, 8005358 <main+0x668>
 8005356:	e7fe      	b.n	8005356 <main+0x666>
  hltdc.Instance = LTDC;
 8005358:	4c6d      	ldr	r4, [pc, #436]	; (8005510 <main+0x820>)
 800535a:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <main+0x824>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800535c:	6060      	str	r0, [r4, #4]
  hltdc.Instance = LTDC;
 800535e:	6023      	str	r3, [r4, #0]
  hltdc.Init.HorizontalSync = 40;
 8005360:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005362:	60a0      	str	r0, [r4, #8]
  hltdc.Init.HorizontalSync = 40;
 8005364:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8005366:	2309      	movs	r3, #9
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005368:	60e0      	str	r0, [r4, #12]
  hltdc.Init.VerticalSync = 9;
 800536a:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800536c:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800536e:	6120      	str	r0, [r4, #16]
  hltdc.Init.AccumulatedHBP = 53;
 8005370:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8005372:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
 8005374:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 11;
 8005378:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800537a:	f240 2315 	movw	r3, #533	; 0x215
  hltdc.Init.Backcolor.Green = 0;
 800537e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hltdc.Init.AccumulatedActiveW = 533;
 8005382:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8005384:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.Backcolor.Red = 0;
 8005388:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800538c:	4620      	mov	r0, r4
  hltdc.Init.AccumulatedActiveH = 283;
 800538e:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8005390:	f240 2335 	movw	r3, #565	; 0x235
 8005394:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8005396:	f240 131d 	movw	r3, #285	; 0x11d
 800539a:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800539c:	f7fd fc4a 	bl	8002c34 <HAL_LTDC_Init>
 80053a0:	4602      	mov	r2, r0
 80053a2:	b100      	cbz	r0, 80053a6 <main+0x6b6>
 80053a4:	e7fe      	b.n	80053a4 <main+0x6b4>
  pLayerCfg.WindowX0 = 0;
 80053a6:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.WindowX1 = 480;
 80053a8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 80053ac:	901d      	str	r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY1 = 272;
 80053ae:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80053b2:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg.Alpha = 255;
 80053b4:	26ff      	movs	r6, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 80053b6:	9021      	str	r0, [sp, #132]	; 0x84
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80053b8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 80053bc:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80053be:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80053c0:	2007      	movs	r0, #7
  pLayerCfg.ImageWidth = 480;
 80053c2:	9125      	str	r1, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80053c4:	a91b      	add	r1, sp, #108	; 0x6c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80053c6:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 80053c8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  pLayerCfg.WindowY1 = 272;
 80053cc:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.FBStartAdress = 0xC0000000;
 80053ce:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80053d0:	4620      	mov	r0, r4
  pLayerCfg.Alpha = 255;
 80053d2:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.ImageHeight = 272;
 80053d4:	9326      	str	r3, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Blue = 0;
 80053d6:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 80053da:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 80053de:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80053e2:	f7fd fcfd 	bl	8002de0 <HAL_LTDC_ConfigLayer>
 80053e6:	b100      	cbz	r0, 80053ea <main+0x6fa>
 80053e8:	e7fe      	b.n	80053e8 <main+0x6f8>
  hrtc.Instance = RTC;
 80053ea:	4c4b      	ldr	r4, [pc, #300]	; (8005518 <main+0x828>)
 80053ec:	4b4b      	ldr	r3, [pc, #300]	; (800551c <main+0x82c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80053ee:	6060      	str	r0, [r4, #4]
  hrtc.Instance = RTC;
 80053f0:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 80053f2:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80053f4:	6120      	str	r0, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80053f6:	6160      	str	r0, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80053f8:	61a0      	str	r0, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80053fa:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 80053fc:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 80053fe:	60e6      	str	r6, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005400:	f7fe fab2 	bl	8003968 <HAL_RTC_Init>
 8005404:	b100      	cbz	r0, 8005408 <main+0x718>
 8005406:	e7fe      	b.n	8005406 <main+0x716>
  sTime.Hours = 0x0;
 8005408:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800540c:	462a      	mov	r2, r5
  sTime.Minutes = 0x0;
 800540e:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005412:	a914      	add	r1, sp, #80	; 0x50
  sTime.Seconds = 0x0;
 8005414:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005418:	9018      	str	r0, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800541a:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800541c:	4620      	mov	r0, r4
 800541e:	f7fe fb4f 	bl	8003ac0 <HAL_RTC_SetTime>
 8005422:	b100      	cbz	r0, 8005426 <main+0x736>
 8005424:	e7fe      	b.n	8005424 <main+0x734>
  sDate.Year = 0x0;
 8005426:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800542a:	462a      	mov	r2, r5
 800542c:	a910      	add	r1, sp, #64	; 0x40
 800542e:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005430:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 8005434:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 8005438:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800543c:	f7fe fae1 	bl	8003a02 <HAL_RTC_SetDate>
 8005440:	b100      	cbz	r0, 8005444 <main+0x754>
 8005442:	e7fe      	b.n	8005442 <main+0x752>
  sAlarm.Alarm = RTC_ALARM_A;
 8005444:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 8005448:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 800544c:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005450:	462a      	mov	r2, r5
  sAlarm.AlarmTime.Seconds = 0x0;
 8005452:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005456:	a91b      	add	r1, sp, #108	; 0x6c
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005458:	901c      	str	r0, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800545a:	901f      	str	r0, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800545c:	9020      	str	r0, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800545e:	9021      	str	r0, [sp, #132]	; 0x84
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005460:	9022      	str	r0, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005462:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005464:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8005466:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 800546a:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800546c:	f7fe fb96 	bl	8003b9c <HAL_RTC_SetAlarm>
 8005470:	b100      	cbz	r0, 8005474 <main+0x784>
 8005472:	e7fe      	b.n	8005472 <main+0x782>
  sAlarm.Alarm = RTC_ALARM_B;
 8005474:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005478:	462a      	mov	r2, r5
 800547a:	a91b      	add	r1, sp, #108	; 0x6c
 800547c:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 800547e:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_B;
 8005482:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005484:	f7fe fb8a 	bl	8003b9c <HAL_RTC_SetAlarm>
 8005488:	b100      	cbz	r0, 800548c <main+0x79c>
 800548a:	e7fe      	b.n	800548a <main+0x79a>
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800548c:	2200      	movs	r2, #0
 800548e:	4822      	ldr	r0, [pc, #136]	; (8005518 <main+0x828>)
 8005490:	4611      	mov	r1, r2
 8005492:	f7fe fc47 	bl	8003d24 <HAL_RTCEx_SetWakeUpTimer>
 8005496:	4601      	mov	r1, r0
 8005498:	b100      	cbz	r0, 800549c <main+0x7ac>
 800549a:	e7fe      	b.n	800549a <main+0x7aa>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800549c:	2202      	movs	r2, #2
 800549e:	481e      	ldr	r0, [pc, #120]	; (8005518 <main+0x828>)
 80054a0:	f7fe fc1a 	bl	8003cd8 <HAL_RTCEx_SetTimeStamp>
 80054a4:	b100      	cbz	r0, 80054a8 <main+0x7b8>
 80054a6:	e7fe      	b.n	80054a6 <main+0x7b6>
  htim1.Instance = TIM1;
 80054a8:	4c1d      	ldr	r4, [pc, #116]	; (8005520 <main+0x830>)
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <main+0x834>)
  htim1.Init.Prescaler = 0;
 80054ac:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ae:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 80054b0:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054b2:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80054b4:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b6:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80054b8:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 80054ba:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80054bc:	f7fe fe0e 	bl	80040dc <HAL_TIM_Base_Init>
 80054c0:	b100      	cbz	r0, 80054c4 <main+0x7d4>
 80054c2:	e7fe      	b.n	80054c2 <main+0x7d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054c4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054c8:	a910      	add	r1, sp, #64	; 0x40
 80054ca:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054cc:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054ce:	f7fe feff 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 80054d2:	b100      	cbz	r0, 80054d6 <main+0x7e6>
 80054d4:	e7fe      	b.n	80054d4 <main+0x7e4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7fe fe1a 	bl	8004110 <HAL_TIM_PWM_Init>
 80054dc:	b100      	cbz	r0, 80054e0 <main+0x7f0>
 80054de:	e7fe      	b.n	80054de <main+0x7ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e0:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054e2:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80054e4:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054e6:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7fe ffcf 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80054ee:	4602      	mov	r2, r0
 80054f0:	b1e0      	cbz	r0, 800552c <main+0x83c>
 80054f2:	e7fe      	b.n	80054f2 <main+0x802>
 80054f4:	20000738 	.word	0x20000738
 80054f8:	a0000140 	.word	0xa0000140
 80054fc:	2000037c 	.word	0x2000037c
 8005500:	40005400 	.word	0x40005400
 8005504:	200002f0 	.word	0x200002f0
 8005508:	40005c00 	.word	0x40005c00
 800550c:	00303d5b 	.word	0x00303d5b
 8005510:	20000448 	.word	0x20000448
 8005514:	40016800 	.word	0x40016800
 8005518:	200005a8 	.word	0x200005a8
 800551c:	40002800 	.word	0x40002800
 8005520:	200005c8 	.word	0x200005c8
 8005524:	40010000 	.word	0x40010000
 8005528:	00c0eaff 	.word	0x00c0eaff
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800552c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800552e:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005530:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005532:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005534:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005536:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005538:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800553a:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800553c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800553e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005540:	f7ff f80e 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8005544:	b100      	cbz	r0, 8005548 <main+0x858>
 8005546:	e7fe      	b.n	8005546 <main+0x856>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800554c:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800554e:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005550:	a91b      	add	r1, sp, #108	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005552:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005558:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 800555a:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800555c:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800555e:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005560:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005562:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005564:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005566:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005568:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800556a:	f7fe ffb5 	bl	80044d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800556e:	4605      	mov	r5, r0
 8005570:	b100      	cbz	r0, 8005574 <main+0x884>
 8005572:	e7fe      	b.n	8005572 <main+0x882>
  HAL_TIM_MspPostInit(&htim1);
 8005574:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8005576:	4c7b      	ldr	r4, [pc, #492]	; (8005764 <main+0xa74>)
  HAL_TIM_MspPostInit(&htim1);
 8005578:	f000 fd1e 	bl	8005fb8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800557c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005580:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005582:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0;
 8005584:	60e5      	str	r5, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005586:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005588:	61a5      	str	r5, [r4, #24]
  htim2.Init.Prescaler = 0;
 800558a:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800558e:	f7fe fda5 	bl	80040dc <HAL_TIM_Base_Init>
 8005592:	b100      	cbz	r0, 8005596 <main+0x8a6>
 8005594:	e7fe      	b.n	8005594 <main+0x8a4>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005596:	a914      	add	r1, sp, #80	; 0x50
 8005598:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800559a:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800559c:	f7fe fe98 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 80055a0:	b100      	cbz	r0, 80055a4 <main+0x8b4>
 80055a2:	e7fe      	b.n	80055a2 <main+0x8b2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80055a4:	486f      	ldr	r0, [pc, #444]	; (8005764 <main+0xa74>)
 80055a6:	f7fe fdb3 	bl	8004110 <HAL_TIM_PWM_Init>
 80055aa:	b100      	cbz	r0, 80055ae <main+0x8be>
 80055ac:	e7fe      	b.n	80055ac <main+0x8bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ae:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055b0:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055b2:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055b4:	486b      	ldr	r0, [pc, #428]	; (8005764 <main+0xa74>)
 80055b6:	f7fe ff69 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80055ba:	4602      	mov	r2, r0
 80055bc:	b100      	cbz	r0, 80055c0 <main+0x8d0>
 80055be:	e7fe      	b.n	80055be <main+0x8ce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055c0:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 0;
 80055c2:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055c4:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055c6:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055c8:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055ca:	4866      	ldr	r0, [pc, #408]	; (8005764 <main+0xa74>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055cc:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055ce:	f7fe ffc7 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 80055d2:	4605      	mov	r5, r0
 80055d4:	b100      	cbz	r0, 80055d8 <main+0x8e8>
 80055d6:	e7fe      	b.n	80055d6 <main+0x8e6>
  htim3.Instance = TIM3;
 80055d8:	4c63      	ldr	r4, [pc, #396]	; (8005768 <main+0xa78>)
  HAL_TIM_MspPostInit(&htim2);
 80055da:	4862      	ldr	r0, [pc, #392]	; (8005764 <main+0xa74>)
 80055dc:	f000 fcec 	bl	8005fb8 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 80055e0:	4b62      	ldr	r3, [pc, #392]	; (800576c <main+0xa7c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80055e2:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e4:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 80055e6:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e8:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ea:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 0;
 80055ec:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80055f0:	f7fe fd74 	bl	80040dc <HAL_TIM_Base_Init>
 80055f4:	b100      	cbz	r0, 80055f8 <main+0x908>
 80055f6:	e7fe      	b.n	80055f6 <main+0x906>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055f8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80055fc:	a914      	add	r1, sp, #80	; 0x50
 80055fe:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005600:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005602:	f7fe fe65 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8005606:	b100      	cbz	r0, 800560a <main+0x91a>
 8005608:	e7fe      	b.n	8005608 <main+0x918>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800560a:	4620      	mov	r0, r4
 800560c:	f7fe fd80 	bl	8004110 <HAL_TIM_PWM_Init>
 8005610:	b100      	cbz	r0, 8005614 <main+0x924>
 8005612:	e7fe      	b.n	8005612 <main+0x922>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005614:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005616:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005618:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800561a:	4620      	mov	r0, r4
 800561c:	f7fe ff36 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8005620:	4602      	mov	r2, r0
 8005622:	b100      	cbz	r0, 8005626 <main+0x936>
 8005624:	e7fe      	b.n	8005624 <main+0x934>
  sConfigOC.Pulse = 0;
 8005626:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005628:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800562a:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800562c:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800562e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005630:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005632:	f7fe ff95 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8005636:	4605      	mov	r5, r0
 8005638:	b100      	cbz	r0, 800563c <main+0x94c>
 800563a:	e7fe      	b.n	800563a <main+0x94a>
  HAL_TIM_MspPostInit(&htim3);
 800563c:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 800563e:	4c4c      	ldr	r4, [pc, #304]	; (8005770 <main+0xa80>)
  HAL_TIM_MspPostInit(&htim3);
 8005640:	f000 fcba 	bl	8005fb8 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8005644:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <main+0xa84>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005646:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005648:	60a5      	str	r5, [r4, #8]
  htim5.Init.Period = 0;
 800564a:	60e5      	str	r5, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800564c:	6125      	str	r5, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800564e:	61a5      	str	r5, [r4, #24]
  htim5.Init.Prescaler = 0;
 8005650:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005654:	f7fe fd42 	bl	80040dc <HAL_TIM_Base_Init>
 8005658:	b100      	cbz	r0, 800565c <main+0x96c>
 800565a:	e7fe      	b.n	800565a <main+0x96a>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800565c:	a914      	add	r1, sp, #80	; 0x50
 800565e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005660:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005662:	f7fe fe35 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8005666:	b100      	cbz	r0, 800566a <main+0x97a>
 8005668:	e7fe      	b.n	8005668 <main+0x978>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800566a:	4841      	ldr	r0, [pc, #260]	; (8005770 <main+0xa80>)
 800566c:	f7fe fd50 	bl	8004110 <HAL_TIM_PWM_Init>
 8005670:	b100      	cbz	r0, 8005674 <main+0x984>
 8005672:	e7fe      	b.n	8005672 <main+0x982>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005674:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005676:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005678:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800567a:	483d      	ldr	r0, [pc, #244]	; (8005770 <main+0xa80>)
 800567c:	f7fe ff06 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8005680:	b100      	cbz	r0, 8005684 <main+0x994>
 8005682:	e7fe      	b.n	8005682 <main+0x992>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005684:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 8005686:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005688:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800568a:	220c      	movs	r2, #12
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800568c:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800568e:	a91b      	add	r1, sp, #108	; 0x6c
 8005690:	4837      	ldr	r0, [pc, #220]	; (8005770 <main+0xa80>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005692:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005694:	f7fe ff64 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8005698:	4605      	mov	r5, r0
 800569a:	b100      	cbz	r0, 800569e <main+0x9ae>
 800569c:	e7fe      	b.n	800569c <main+0x9ac>
  htim8.Instance = TIM8;
 800569e:	4c36      	ldr	r4, [pc, #216]	; (8005778 <main+0xa88>)
  HAL_TIM_MspPostInit(&htim5);
 80056a0:	4833      	ldr	r0, [pc, #204]	; (8005770 <main+0xa80>)
 80056a2:	f000 fc89 	bl	8005fb8 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 80056a6:	4b35      	ldr	r3, [pc, #212]	; (800577c <main+0xa8c>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80056a8:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056aa:	60a5      	str	r5, [r4, #8]
  htim8.Init.Period = 0;
 80056ac:	60e5      	str	r5, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ae:	6125      	str	r5, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 80056b0:	6165      	str	r5, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056b2:	61a5      	str	r5, [r4, #24]
  htim8.Init.Prescaler = 0;
 80056b4:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80056b8:	f7fe fd10 	bl	80040dc <HAL_TIM_Base_Init>
 80056bc:	b100      	cbz	r0, 80056c0 <main+0x9d0>
 80056be:	e7fe      	b.n	80056be <main+0x9ce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80056c4:	a91b      	add	r1, sp, #108	; 0x6c
 80056c6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056c8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80056ca:	f7fe fe01 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 80056ce:	b100      	cbz	r0, 80056d2 <main+0x9e2>
 80056d0:	e7fe      	b.n	80056d0 <main+0x9e0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d2:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80056d4:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056d6:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056d8:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80056da:	4620      	mov	r0, r4
 80056dc:	f7fe fed6 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80056e0:	b100      	cbz	r0, 80056e4 <main+0x9f4>
 80056e2:	e7fe      	b.n	80056e2 <main+0x9f2>
  htim12.Instance = TIM12;
 80056e4:	4c26      	ldr	r4, [pc, #152]	; (8005780 <main+0xa90>)
 80056e6:	4b27      	ldr	r3, [pc, #156]	; (8005784 <main+0xa94>)
  htim12.Init.Prescaler = 0;
 80056e8:	6060      	str	r0, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ea:	60a0      	str	r0, [r4, #8]
  htim12.Init.Period = 0;
 80056ec:	60e0      	str	r0, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ee:	6120      	str	r0, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056f0:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80056f2:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 80056f4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80056f6:	f7fe fd0b 	bl	8004110 <HAL_TIM_PWM_Init>
 80056fa:	4602      	mov	r2, r0
 80056fc:	b100      	cbz	r0, 8005700 <main+0xa10>
 80056fe:	e7fe      	b.n	80056fe <main+0xa0e>
  sConfigOC.Pulse = 0;
 8005700:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005702:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005704:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005706:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005708:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800570a:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800570c:	f7fe ff28 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8005710:	4605      	mov	r5, r0
 8005712:	b100      	cbz	r0, 8005716 <main+0xa26>
 8005714:	e7fe      	b.n	8005714 <main+0xa24>
  HAL_TIM_MspPostInit(&htim12);
 8005716:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8005718:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 800571c:	f000 fc4c 	bl	8005fb8 <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005720:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 8005722:	4819      	ldr	r0, [pc, #100]	; (8005788 <main+0xa98>)
  huart1.Init.BaudRate = 115200;
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <main+0xa9c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005726:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005728:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800572a:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800572c:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800572e:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005730:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005732:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005734:	6245      	str	r5, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8005736:	e880 0048 	stmia.w	r0, {r3, r6}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800573a:	f7ff f988 	bl	8004a4e <HAL_UART_Init>
 800573e:	b100      	cbz	r0, 8005742 <main+0xa52>
 8005740:	e7fe      	b.n	8005740 <main+0xa50>
  huart6.Instance = USART6;
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <main+0xaa0>)
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <main+0xaa4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005746:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005748:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800574a:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800574c:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800574e:	61d8      	str	r0, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005750:	6218      	str	r0, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005752:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005754:	4618      	mov	r0, r3
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005756:	615c      	str	r4, [r3, #20]
  huart6.Init.BaudRate = 115200;
 8005758:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800575c:	f7ff f977 	bl	8004a4e <HAL_UART_Init>
 8005760:	b1d0      	cbz	r0, 8005798 <main+0xaa8>
 8005762:	e7fe      	b.n	8005762 <main+0xa72>
 8005764:	200006b8 	.word	0x200006b8
 8005768:	20000408 	.word	0x20000408
 800576c:	40000400 	.word	0x40000400
 8005770:	200003c8 	.word	0x200003c8
 8005774:	40000c00 	.word	0x40000c00
 8005778:	2000033c 	.word	0x2000033c
 800577c:	40010400 	.word	0x40010400
 8005780:	200006f8 	.word	0x200006f8
 8005784:	40001800 	.word	0x40001800
 8005788:	20000538 	.word	0x20000538
 800578c:	40011000 	.word	0x40011000
 8005790:	20000608 	.word	0x20000608
 8005794:	40011400 	.word	0x40011400
	__HAL_RCC_GPIOI_CLK_ENABLE()
 8005798:	4b5f      	ldr	r3, [pc, #380]	; (8005918 <main+0xc28>)
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800579a:	2401      	movs	r4, #1
	gpioInitStructure.Pin = GPIO_PIN_1;
 800579c:	2502      	movs	r5, #2
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 800579e:	a91b      	add	r1, sp, #108	; 0x6c
	__HAL_RCC_GPIOI_CLK_ENABLE()
 80057a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 80057a2:	485e      	ldr	r0, [pc, #376]	; (800591c <main+0xc2c>)
	__HAL_RCC_GPIOI_CLK_ENABLE()
 80057a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpioInitStructure.Pin = GPIO_PIN_1;
 80057ac:	951b      	str	r5, [sp, #108]	; 0x6c
	__HAL_RCC_GPIOI_CLK_ENABLE()
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80057b2:	941c      	str	r4, [sp, #112]	; 0x70
	gpioInitStructure.Pull = GPIO_PULLUP;
 80057b4:	941d      	str	r4, [sp, #116]	; 0x74
	__HAL_RCC_GPIOI_CLK_ENABLE()
 80057b6:	9314      	str	r3, [sp, #80]	; 0x50
 80057b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
	gpioInitStructure.Speed = GPIO_SPEED_HIGH;
 80057ba:	2303      	movs	r3, #3
 80057bc:	931e      	str	r3, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 80057be:	f7fc fc0b 	bl	8001fd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80057c2:	2200      	movs	r2, #0
 80057c4:	4629      	mov	r1, r5
 80057c6:	4855      	ldr	r0, [pc, #340]	; (800591c <main+0xc2c>)
 80057c8:	f7fc fcf0 	bl	80021ac <HAL_GPIO_WritePin>
	led_on();
 80057cc:	f7ff fa12 	bl	8004bf4 <led_on>
	initscreen(BackGColor, ForeGColor);
 80057d0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80057d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80057d8:	f000 f9d2 	bl	8005b80 <initscreen>
	Master_Write(0x00, 0x01);
 80057dc:	2000      	movs	r0, #0
 80057de:	4621      	mov	r1, r4
 80057e0:	f000 f8a8 	bl	8005934 <Master_Write>
	HAL_Delay(500);
 80057e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057e8:	f7fb ff72 	bl	80016d0 <HAL_Delay>
		HAL_Delay(3000);
 80057ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80057f0:	f7fb ff6e 	bl	80016d0 <HAL_Delay>
		led_on();
 80057f4:	f7ff f9fe 	bl	8004bf4 <led_on>
		move(1, 50);
 80057f8:	2132      	movs	r1, #50	; 0x32
 80057fa:	2001      	movs	r0, #1
 80057fc:	f000 f954 	bl	8005aa8 <move>
		HAL_Delay(2000);
 8005800:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005804:	f7fb ff64 	bl	80016d0 <HAL_Delay>
		turn(1, 30);
 8005808:	211e      	movs	r1, #30
 800580a:	2001      	movs	r0, #1
 800580c:	f000 f976 	bl	8005afc <turn>
		HAL_Delay(3000);
 8005810:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005814:	f7fb ff5c 	bl	80016d0 <HAL_Delay>
		move(1, 50);
 8005818:	2132      	movs	r1, #50	; 0x32
 800581a:	2001      	movs	r0, #1
 800581c:	f000 f944 	bl	8005aa8 <move>
		HAL_Delay(2000);
 8005820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005824:	f7fb ff54 	bl	80016d0 <HAL_Delay>
		turn(1, 30);
 8005828:	211e      	movs	r1, #30
 800582a:	2001      	movs	r0, #1
 800582c:	f000 f966 	bl	8005afc <turn>
		HAL_Delay(3000);
 8005830:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005834:	f7fb ff4c 	bl	80016d0 <HAL_Delay>
		move(1, 50);
 8005838:	2132      	movs	r1, #50	; 0x32
 800583a:	2001      	movs	r0, #1
 800583c:	f000 f934 	bl	8005aa8 <move>
		HAL_Delay(2000);
 8005840:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005844:	f7fb ff44 	bl	80016d0 <HAL_Delay>
		turn(1, 30);
 8005848:	211e      	movs	r1, #30
 800584a:	2001      	movs	r0, #1
 800584c:	f000 f956 	bl	8005afc <turn>
		HAL_Delay(3000);
 8005850:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005854:	f7fb ff3c 	bl	80016d0 <HAL_Delay>
		move(1, 50);
 8005858:	2132      	movs	r1, #50	; 0x32
 800585a:	2001      	movs	r0, #1
 800585c:	f000 f924 	bl	8005aa8 <move>
		HAL_Delay(2000);
 8005860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005864:	f7fb ff34 	bl	80016d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	2102      	movs	r1, #2
 800586c:	482b      	ldr	r0, [pc, #172]	; (800591c <main+0xc2c>)
 800586e:	f7fc fc9d 	bl	80021ac <HAL_GPIO_WritePin>
		move(1, 0);
 8005872:	2100      	movs	r1, #0
 8005874:	2001      	movs	r0, #1
 8005876:	f000 f917 	bl	8005aa8 <move>
		HAL_Delay(3000);
 800587a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800587e:	f7fb ff27 	bl	80016d0 <HAL_Delay>
		move(0, 50);
 8005882:	2132      	movs	r1, #50	; 0x32
 8005884:	2000      	movs	r0, #0
 8005886:	f000 f90f 	bl	8005aa8 <move>
		HAL_Delay(2000);
 800588a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800588e:	f7fb ff1f 	bl	80016d0 <HAL_Delay>
		turn(0, 30);
 8005892:	211e      	movs	r1, #30
 8005894:	2000      	movs	r0, #0
 8005896:	f000 f931 	bl	8005afc <turn>
		HAL_Delay(3000);
 800589a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800589e:	f7fb ff17 	bl	80016d0 <HAL_Delay>
		move(0, 50);
 80058a2:	2132      	movs	r1, #50	; 0x32
 80058a4:	2000      	movs	r0, #0
 80058a6:	f000 f8ff 	bl	8005aa8 <move>
		HAL_Delay(2000);
 80058aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058ae:	f7fb ff0f 	bl	80016d0 <HAL_Delay>
		turn(0, 30);
 80058b2:	211e      	movs	r1, #30
 80058b4:	2000      	movs	r0, #0
 80058b6:	f000 f921 	bl	8005afc <turn>
		HAL_Delay(3000);
 80058ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80058be:	f7fb ff07 	bl	80016d0 <HAL_Delay>
		move(0, 50);
 80058c2:	2132      	movs	r1, #50	; 0x32
 80058c4:	2000      	movs	r0, #0
 80058c6:	f000 f8ef 	bl	8005aa8 <move>
		HAL_Delay(2000);
 80058ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058ce:	f7fb feff 	bl	80016d0 <HAL_Delay>
		turn(0, 30);
 80058d2:	211e      	movs	r1, #30
 80058d4:	2000      	movs	r0, #0
 80058d6:	f000 f911 	bl	8005afc <turn>
		HAL_Delay(3000);
 80058da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80058de:	f7fb fef7 	bl	80016d0 <HAL_Delay>
		turn(1, 30);
 80058e2:	211e      	movs	r1, #30
 80058e4:	2001      	movs	r0, #1
 80058e6:	f000 f909 	bl	8005afc <turn>
		HAL_Delay(6000);
 80058ea:	f241 7070 	movw	r0, #6000	; 0x1770
 80058ee:	f7fb feef 	bl	80016d0 <HAL_Delay>
		move(1, 0);
 80058f2:	2100      	movs	r1, #0
 80058f4:	2001      	movs	r0, #1
 80058f6:	f000 f8d7 	bl	8005aa8 <move>
		HAL_Delay(3000);
 80058fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80058fe:	f7fb fee7 	bl	80016d0 <HAL_Delay>
		move(1, 0);
 8005902:	2100      	movs	r1, #0
 8005904:	2001      	movs	r0, #1
 8005906:	f000 f8cf 	bl	8005aa8 <move>
		HAL_Delay(10000);
 800590a:	f242 7010 	movw	r0, #10000	; 0x2710
 800590e:	f7fb fedf 	bl	80016d0 <HAL_Delay>
		led_on();
 8005912:	f7ff f96f 	bl	8004bf4 <led_on>
 8005916:	e769      	b.n	80057ec <main+0xafc>
 8005918:	40023800 	.word	0x40023800
 800591c:	40022000 	.word	0x40022000

08005920 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005920:	6802      	ldr	r2, [r0, #0]
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d101      	bne.n	800592c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8005928:	f7fb bec0 	b.w	80016ac <HAL_IncTick>
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40001000 	.word	0x40001000

08005934 <Master_Write>:
#include "stm32f7xx_hal.h"

#include "stdbool.h"
#include "motor_control.h"

void Master_Write(uint8_t sadd, uint8_t byte) {
 8005934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t addr_PCA9685 = 0x60;
	uint8_t buffer[5];

	buffer[0] = 0;
	buffer[1] = 0;
	buffer[2] = 0;
 8005936:	2300      	movs	r3, #0
	buffer[3] = 0;
	buffer[4] = 0;

	buffer[0] = sadd;
	buffer[1] = byte;
 8005938:	f88d 1009 	strb.w	r1, [sp, #9]

	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 800593c:	aa02      	add	r2, sp, #8
 800593e:	21c0      	movs	r1, #192	; 0xc0
	buffer[2] = 0;
 8005940:	f88d 300a 	strb.w	r3, [sp, #10]
	buffer[3] = 0;
 8005944:	f88d 300b 	strb.w	r3, [sp, #11]
	buffer[4] = 0;
 8005948:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 800594c:	2364      	movs	r3, #100	; 0x64
	buffer[0] = sadd;
 800594e:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c1, addr_PCA9685 << 1, buffer, 2, 100);
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2302      	movs	r3, #2
 8005956:	4803      	ldr	r0, [pc, #12]	; (8005964 <Master_Write+0x30>)
 8005958:	f7fc fd8a 	bl	8002470 <HAL_I2C_Master_Transmit>
}
 800595c:	b005      	add	sp, #20
 800595e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005962:	bf00      	nop
 8005964:	2000037c 	.word	0x2000037c

08005968 <motor_write>:

void motor_write(uint8_t motor, bool direction, uint16_t speed) {
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4605      	mov	r5, r0
 800596e:	b085      	sub	sp, #20
 8005970:	460c      	mov	r4, r1

	uint16_t scaled_speed;
	uint8_t subadd_in1, subadd_in2, subadd_pwm;
	uint8_t scaled_lsb, scaled_msb;

	if (speed == 0) {
 8005972:	b19a      	cbz	r2, 800599c <motor_write+0x34>
		// This is stop
		scaled_speed = 0;
	} else {
		// Scale and zero 4 MSB
		scaled_speed = ((int) ((((float) speed) / 100.0) * 4096)) & 0x0FFF;
 8005974:	ee07 2a90 	vmov	s15, r2
 8005978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597c:	ee17 0a90 	vmov	r0, s15
 8005980:	f7fa fdfa 	bl	8000578 <__aeabi_f2d>
 8005984:	2200      	movs	r2, #0
 8005986:	4b43      	ldr	r3, [pc, #268]	; (8005a94 <motor_write+0x12c>)
 8005988:	f7fa ff74 	bl	8000874 <__aeabi_ddiv>
 800598c:	2200      	movs	r2, #0
 800598e:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <motor_write+0x130>)
 8005990:	f7fa fe46 	bl	8000620 <__aeabi_dmul>
 8005994:	f7fb f856 	bl	8000a44 <__aeabi_d2iz>
 8005998:	f3c0 020b 	ubfx	r2, r0, #0, #12
	}

	scaled_lsb = scaled_speed & 0x00FF;
 800599c:	b2d3      	uxtb	r3, r2
 800599e:	9300      	str	r3, [sp, #0]
	scaled_msb = scaled_speed >> 8;
 80059a0:	0a13      	lsrs	r3, r2, #8
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	1eab      	subs	r3, r5, #2
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d84e      	bhi.n	8005a4a <motor_write+0xe2>
 80059ac:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <motor_write+0x134>)
 80059ae:	493c      	ldr	r1, [pc, #240]	; (8005aa0 <motor_write+0x138>)
 80059b0:	5cd0      	ldrb	r0, [r2, r3]
 80059b2:	4a3c      	ldr	r2, [pc, #240]	; (8005aa4 <motor_write+0x13c>)
 80059b4:	5ccd      	ldrb	r5, [r1, r3]
 80059b6:	5cd6      	ldrb	r6, [r2, r3]
 80059b8:	1cf3      	adds	r3, r6, #3
 80059ba:	f100 0b01 	add.w	fp, r0, #1
 80059be:	f100 0a02 	add.w	sl, r0, #2
 80059c2:	f100 0903 	add.w	r9, r0, #3
 80059c6:	9302      	str	r3, [sp, #8]
 80059c8:	1c6b      	adds	r3, r5, #1
 80059ca:	f106 0801 	add.w	r8, r6, #1
 80059ce:	1cb7      	adds	r7, r6, #2
 80059d0:	9303      	str	r3, [sp, #12]
		subadd_in1 = 0x2E;
		subadd_in2 = 0x2A;
		subadd_pwm = 0x26;
	}

	if (direction) {
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	d03d      	beq.n	8005a52 <motor_write+0xea>

		// Forward
		// IN1 = H
		Master_Write(subadd_in1 + 0, 0x00);
 80059d6:	2100      	movs	r1, #0
 80059d8:	f7ff ffac 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 1, 0x10);
 80059dc:	2110      	movs	r1, #16
 80059de:	fa5f f08b 	uxtb.w	r0, fp
 80059e2:	f7ff ffa7 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 2, 0x00);
 80059e6:	2100      	movs	r1, #0
 80059e8:	fa5f f08a 	uxtb.w	r0, sl
 80059ec:	f7ff ffa2 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 3, 0x00);
 80059f0:	2100      	movs	r1, #0
 80059f2:	fa5f f089 	uxtb.w	r0, r9
 80059f6:	f7ff ff9d 	bl	8005934 <Master_Write>

		// IN2 = L
		Master_Write(subadd_in2 + 0, 0x00);
 80059fa:	2100      	movs	r1, #0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff ff99 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 1, 0x00);
 8005a02:	2100      	movs	r1, #0
 8005a04:	fa5f f088 	uxtb.w	r0, r8
 8005a08:	f7ff ff94 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 2, 0x00);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	b2f8      	uxtb	r0, r7
 8005a10:	f7ff ff90 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 3, 0x10);
 8005a14:	2110      	movs	r1, #16
 8005a16:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005a1a:	f7ff ff8b 	bl	8005934 <Master_Write>

		// PWM = scaled_speed
		Master_Write(subadd_pwm + 0, 0x00);
 8005a1e:	4628      	mov	r0, r5
 8005a20:	2100      	movs	r1, #0
 8005a22:	f7ff ff87 	bl	8005934 <Master_Write>
		Master_Write(subadd_pwm + 1, 0x00);
 8005a26:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f7ff ff82 	bl	8005934 <Master_Write>
		Master_Write(subadd_pwm + 2, scaled_lsb);
 8005a30:	1ca8      	adds	r0, r5, #2
 8005a32:	9900      	ldr	r1, [sp, #0]
 8005a34:	b2c0      	uxtb	r0, r0
 8005a36:	f7ff ff7d 	bl	8005934 <Master_Write>
		Master_Write(subadd_pwm + 3, scaled_msb);
 8005a3a:	1ce8      	adds	r0, r5, #3
 8005a3c:	9901      	ldr	r1, [sp, #4]
 8005a3e:	b2c0      	uxtb	r0, r0
		Master_Write(subadd_pwm + 1, 0x00);
		Master_Write(subadd_pwm + 2, scaled_lsb);
		Master_Write(subadd_pwm + 3, scaled_msb);
	}

}
 8005a40:	b005      	add	sp, #20
 8005a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Master_Write(subadd_pwm + 3, scaled_msb);
 8005a46:	f7ff bf75 	b.w	8005934 <Master_Write>
	scaled_msb = scaled_speed >> 8;
 8005a4a:	2526      	movs	r5, #38	; 0x26
 8005a4c:	262a      	movs	r6, #42	; 0x2a
 8005a4e:	202e      	movs	r0, #46	; 0x2e
 8005a50:	e7b2      	b.n	80059b8 <motor_write+0x50>
		Master_Write(subadd_in1 + 0, 0x00);
 8005a52:	4621      	mov	r1, r4
 8005a54:	f7ff ff6e 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 1, 0x00);
 8005a58:	4621      	mov	r1, r4
 8005a5a:	fa5f f08b 	uxtb.w	r0, fp
 8005a5e:	f7ff ff69 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 2, 0x00);
 8005a62:	4621      	mov	r1, r4
 8005a64:	fa5f f08a 	uxtb.w	r0, sl
 8005a68:	f7ff ff64 	bl	8005934 <Master_Write>
		Master_Write(subadd_in1 + 3, 0x10);
 8005a6c:	2110      	movs	r1, #16
 8005a6e:	fa5f f089 	uxtb.w	r0, r9
 8005a72:	f7ff ff5f 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 0, 0x00);
 8005a76:	4621      	mov	r1, r4
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f7ff ff5b 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 1, 0x10);
 8005a7e:	2110      	movs	r1, #16
 8005a80:	fa5f f088 	uxtb.w	r0, r8
 8005a84:	f7ff ff56 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 2, 0x00);
 8005a88:	4621      	mov	r1, r4
 8005a8a:	b2f8      	uxtb	r0, r7
 8005a8c:	f7ff ff52 	bl	8005934 <Master_Write>
		Master_Write(subadd_in2 + 3, 0x00);
 8005a90:	4621      	mov	r1, r4
 8005a92:	e7c0      	b.n	8005a16 <motor_write+0xae>
 8005a94:	40590000 	.word	0x40590000
 8005a98:	40b00000 	.word	0x40b00000
 8005a9c:	080086dd 	.word	0x080086dd
 8005aa0:	080086e3 	.word	0x080086e3
 8005aa4:	080086e0 	.word	0x080086e0

08005aa8 <move>:

void move(bool direction, uint16_t speed) {
 8005aa8:	b530      	push	{r4, r5, lr}

	char opstr[50];

	if (direction) {
		snprintf(opstr, 50, "Forward    Speed = %u", speed);
 8005aaa:	460b      	mov	r3, r1
void move(bool direction, uint16_t speed) {
 8005aac:	b08f      	sub	sp, #60	; 0x3c
 8005aae:	460c      	mov	r4, r1
	if (direction) {
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b1e8      	cbz	r0, 8005af0 <move+0x48>
		snprintf(opstr, 50, "Forward    Speed = %u", speed);
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <move+0x4c>)
		LCDwrite(opstr);
	} else {
		snprintf(opstr, 50, "Backward   Speed = %u", speed);
 8005ab6:	2132      	movs	r1, #50	; 0x32
 8005ab8:	a801      	add	r0, sp, #4
 8005aba:	f000 fc5f 	bl	800637c <sniprintf>
		LCDwrite(opstr);
 8005abe:	a801      	add	r0, sp, #4
 8005ac0:	f000 f87e 	bl	8005bc0 <LCDwrite>
	}

	motor_write(1, direction, speed);
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f7ff ff4d 	bl	8005968 <motor_write>
	motor_write(2, direction, speed);
 8005ace:	4622      	mov	r2, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	f7ff ff48 	bl	8005968 <motor_write>
	motor_write(3, direction, speed);
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	2003      	movs	r0, #3
 8005ade:	f7ff ff43 	bl	8005968 <motor_write>
	motor_write(4, direction, speed);
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	2004      	movs	r0, #4
 8005ae8:	f7ff ff3e 	bl	8005968 <motor_write>

}
 8005aec:	b00f      	add	sp, #60	; 0x3c
 8005aee:	bd30      	pop	{r4, r5, pc}
		snprintf(opstr, 50, "Backward   Speed = %u", speed);
 8005af0:	4a01      	ldr	r2, [pc, #4]	; (8005af8 <move+0x50>)
 8005af2:	e7e0      	b.n	8005ab6 <move+0xe>
 8005af4:	080086e6 	.word	0x080086e6
 8005af8:	080086fc 	.word	0x080086fc

08005afc <turn>:

void turn(bool direction, uint16_t speed) {
 8005afc:	b530      	push	{r4, r5, lr}

	char opstr[50];

	if (direction) {
		snprintf(opstr, 50, "Turn Right Speed = %u", speed);
 8005afe:	460b      	mov	r3, r1
void turn(bool direction, uint16_t speed) {
 8005b00:	b08f      	sub	sp, #60	; 0x3c
 8005b02:	460c      	mov	r4, r1
	if (direction) {
 8005b04:	4605      	mov	r5, r0
 8005b06:	b1e8      	cbz	r0, 8005b44 <turn+0x48>
		snprintf(opstr, 50, "Turn Right Speed = %u", speed);
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <turn+0x7c>)
 8005b0a:	2132      	movs	r1, #50	; 0x32
 8005b0c:	a801      	add	r0, sp, #4
 8005b0e:	f000 fc35 	bl	800637c <sniprintf>
		LCDwrite(opstr);
 8005b12:	a801      	add	r0, sp, #4
 8005b14:	f000 f854 	bl	8005bc0 <LCDwrite>
//		motor_write(1, true, speed);
//		motor_write(2, false, speed);
//		motor_write(4, true, speed);
//		motor_write(3, false, speed);

		motor_write(1, true, speed);
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	f7ff ff23 	bl	8005968 <motor_write>
		motor_write(2, true, 5);
 8005b22:	2205      	movs	r2, #5
 8005b24:	2101      	movs	r1, #1
 8005b26:	2002      	movs	r0, #2
 8005b28:	f7ff ff1e 	bl	8005968 <motor_write>
		motor_write(4, true, speed);
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	2101      	movs	r1, #1
 8005b30:	2004      	movs	r0, #4
 8005b32:	f7ff ff19 	bl	8005968 <motor_write>
		motor_write(3, true, 5);
 8005b36:	2205      	movs	r2, #5
//		motor_write(3, true, speed);

		motor_write(1, false, speed);
		motor_write(2, true, speed);
		motor_write(4, false, speed);
		motor_write(3, true, speed);
 8005b38:	2101      	movs	r1, #1
 8005b3a:	2003      	movs	r0, #3
 8005b3c:	f7ff ff14 	bl	8005968 <motor_write>

	}

}
 8005b40:	b00f      	add	sp, #60	; 0x3c
 8005b42:	bd30      	pop	{r4, r5, pc}
		snprintf(opstr, 50, "Turn Left  Speed = %u", speed);
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <turn+0x80>)
 8005b46:	2132      	movs	r1, #50	; 0x32
 8005b48:	a801      	add	r0, sp, #4
 8005b4a:	f000 fc17 	bl	800637c <sniprintf>
		LCDwrite(opstr);
 8005b4e:	a801      	add	r0, sp, #4
 8005b50:	f000 f836 	bl	8005bc0 <LCDwrite>
		motor_write(1, false, speed);
 8005b54:	4622      	mov	r2, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f7ff ff05 	bl	8005968 <motor_write>
		motor_write(2, true, speed);
 8005b5e:	4622      	mov	r2, r4
 8005b60:	2101      	movs	r1, #1
 8005b62:	2002      	movs	r0, #2
 8005b64:	f7ff ff00 	bl	8005968 <motor_write>
		motor_write(4, false, speed);
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	2004      	movs	r0, #4
 8005b6e:	f7ff fefb 	bl	8005968 <motor_write>
		motor_write(3, true, speed);
 8005b72:	4622      	mov	r2, r4
 8005b74:	e7e0      	b.n	8005b38 <turn+0x3c>
 8005b76:	bf00      	nop
 8005b78:	08008712 	.word	0x08008712
 8005b7c:	08008728 	.word	0x08008728

08005b80 <initscreen>:

#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"

// Screen initialization
void initscreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	460d      	mov	r5, r1

	// Start LCD
	BSP_LCD_Init();
 8005b86:	f7fb fbdf 	bl	8001348 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8005b8a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fb f946 	bl	8000e20 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8005b94:	2000      	movs	r0, #0
 8005b96:	f7fb f97f 	bl	8000e98 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8005b9a:	f7fb fb09 	bl	80011b0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(BackGroundColor);
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f7fb f9b0 	bl	8000f04 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7fb f989 	bl	8000ebc <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7fb f97a 	bl	8000ea4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <initscreen+0x3c>)
}
 8005bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	BSP_LCD_SetFont(&Font24);
 8005bb6:	f7fb b98d 	b.w	8000ed4 <BSP_LCD_SetFont>
 8005bba:	bf00      	nop
 8005bbc:	20000000 	.word	0x20000000

08005bc0 <LCDwrite>:

void LCDwrite(char str[]) {
 8005bc0:	b530      	push	{r4, r5, lr}

	static uint32_t line = 0;

	char intstr[50];

	BSP_LCD_ClearStringLine(line);
 8005bc2:	4c1c      	ldr	r4, [pc, #112]	; (8005c34 <LCDwrite+0x74>)
void LCDwrite(char str[]) {
 8005bc4:	b08f      	sub	sp, #60	; 0x3c
 8005bc6:	4605      	mov	r5, r0
	BSP_LCD_ClearStringLine(line);
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	f7fb fac9 	bl	8001160 <BSP_LCD_ClearStringLine>
	BSP_LCD_DisplayStringAtLine((uint16_t) line, (uint8_t *) " ");
 8005bce:	491a      	ldr	r1, [pc, #104]	; (8005c38 <LCDwrite+0x78>)
 8005bd0:	8820      	ldrh	r0, [r4, #0]
 8005bd2:	f7fb fa81 	bl	80010d8 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAt(0, LINE(line), (uint8_t *) " ", LEFT_MODE);
 8005bd6:	f7fb f989 	bl	8000eec <BSP_LCD_GetFont>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	88c1      	ldrh	r1, [r0, #6]
 8005bde:	2000      	movs	r0, #0
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <LCDwrite+0x78>)
 8005be2:	fb11 f103 	smulbb	r1, r1, r3
 8005be6:	2303      	movs	r3, #3
 8005be8:	b289      	uxth	r1, r1
 8005bea:	f7fb fa21 	bl	8001030 <BSP_LCD_DisplayStringAt>
	snprintf(intstr, 50, str);
 8005bee:	462a      	mov	r2, r5
 8005bf0:	2132      	movs	r1, #50	; 0x32
 8005bf2:	a801      	add	r0, sp, #4
 8005bf4:	f000 fbc2 	bl	800637c <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) line, (uint8_t *) intstr);
 8005bf8:	a901      	add	r1, sp, #4
 8005bfa:	8820      	ldrh	r0, [r4, #0]
 8005bfc:	f7fb fa6c 	bl	80010d8 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAt(0, LINE(line), (uint8_t *) intstr, LEFT_MODE);
 8005c00:	f7fb f974 	bl	8000eec <BSP_LCD_GetFont>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	88c1      	ldrh	r1, [r0, #6]
 8005c08:	aa01      	add	r2, sp, #4
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	fb11 f103 	smulbb	r1, r1, r3
 8005c10:	2303      	movs	r3, #3
 8005c12:	b289      	uxth	r1, r1
 8005c14:	f7fb fa0c 	bl	8001030 <BSP_LCD_DisplayStringAt>
	line++;
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	3301      	adds	r3, #1
	if (line > 10) {
 8005c1c:	2b0a      	cmp	r3, #10
	line++;
 8005c1e:	6023      	str	r3, [r4, #0]
	if (line > 10) {
 8005c20:	d905      	bls.n	8005c2e <LCDwrite+0x6e>
		BSP_LCD_Clear(BackGColor);
 8005c22:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005c26:	f7fb f96d 	bl	8000f04 <BSP_LCD_Clear>
		line = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6023      	str	r3, [r4, #0]
	}
}
 8005c2e:	b00f      	add	sp, #60	; 0x3c
 8005c30:	bd30      	pop	{r4, r5, pc}
 8005c32:	bf00      	nop
 8005c34:	200001fc 	.word	0x200001fc
 8005c38:	0800875a 	.word	0x0800875a

08005c3c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_MspInit+0x88>)
{
 8005c3e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c42:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
 8005c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c4c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005c50:	9200      	str	r2, [sp, #0]
 8005c52:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c66:	f7fb fe89 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f06f 000b 	mvn.w	r0, #11
 8005c70:	4611      	mov	r1, r2
 8005c72:	f7fb fe95 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005c76:	2200      	movs	r2, #0
 8005c78:	f06f 000a 	mvn.w	r0, #10
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	f7fb fe8f 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005c82:	2200      	movs	r2, #0
 8005c84:	f06f 0009 	mvn.w	r0, #9
 8005c88:	4611      	mov	r1, r2
 8005c8a:	f7fb fe89 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f06f 0004 	mvn.w	r0, #4
 8005c94:	4611      	mov	r1, r2
 8005c96:	f7fb fe83 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f06f 0003 	mvn.w	r0, #3
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	f7fb fe7d 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f06f 0001 	mvn.w	r0, #1
 8005cac:	4611      	mov	r1, r2
 8005cae:	f7fb fe77 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	4611      	mov	r1, r2
 8005cba:	f7fb fe71 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cbe:	b003      	add	sp, #12
 8005cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc4:	40023800 	.word	0x40023800

08005cc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8005cc8:	6802      	ldr	r2, [r0, #0]
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_ADC_MspInit+0x4c>)
 8005ccc:	429a      	cmp	r2, r3
{
 8005cce:	b530      	push	{r4, r5, lr}
 8005cd0:	b087      	sub	sp, #28
  if(hadc->Instance==ADC3)
 8005cd2:	d11d      	bne.n	8005d10 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cd4:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cd8:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cdc:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ce0:	480d      	ldr	r0, [pc, #52]	; (8005d18 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cea:	9502      	str	r5, [sp, #8]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8005cf6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8005cfa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cfc:	f7fc f96c 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8005d00:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8005d02:	a901      	add	r1, sp, #4
 8005d04:	4805      	ldr	r0, [pc, #20]	; (8005d1c <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8005d06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d08:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8005d0c:	f7fc f964 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005d10:	b007      	add	sp, #28
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	40012200 	.word	0x40012200
 8005d18:	40021400 	.word	0x40021400
 8005d1c:	40020000 	.word	0x40020000

08005d20 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005d20:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 8005d22:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <HAL_DMA2D_MspInit+0x38>)
 8005d24:	6802      	ldr	r2, [r0, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d112      	bne.n	8005d50 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d2a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005d2e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005d38:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005d3c:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005d46:	f7fb fe2b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005d4a:	205a      	movs	r0, #90	; 0x5a
 8005d4c:	f7fb fe60 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005d50:	b003      	add	sp, #12
 8005d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d56:	bf00      	nop
 8005d58:	4002b000 	.word	0x4002b000

08005d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005d5c:	6803      	ldr	r3, [r0, #0]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <HAL_I2C_MspInit+0x9c>)
 8005d60:	4293      	cmp	r3, r2
{
 8005d62:	b510      	push	{r4, lr}
 8005d64:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8005d66:	d12a      	bne.n	8005dbe <HAL_I2C_MspInit+0x62>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8005d68:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6c:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d6e:	a903      	add	r1, sp, #12
 8005d70:	4822      	ldr	r0, [pc, #136]	; (8005dfc <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8005d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d74:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d76:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d7e:	2304      	movs	r3, #4
 8005d80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d82:	f7fc f929 	bl	8001fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d86:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <HAL_I2C_MspInit+0xa4>)
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005d88:	4621      	mov	r1, r4
 8005d8a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005d94:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005da0:	f7fb fdfe 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005da4:	201f      	movs	r0, #31
 8005da6:	f7fb fe33 	bl	8001a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005daa:	2020      	movs	r0, #32
 8005dac:	4622      	mov	r2, r4
 8005dae:	4621      	mov	r1, r4
 8005db0:	f7fb fdf6 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005db4:	2020      	movs	r0, #32
 8005db6:	f7fb fe2b 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005dba:	b008      	add	sp, #32
 8005dbc:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <HAL_I2C_MspInit+0xa8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d1fa      	bne.n	8005dba <HAL_I2C_MspInit+0x5e>
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005dc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005dc8:	a903      	add	r1, sp, #12
 8005dca:	480f      	ldr	r0, [pc, #60]	; (8005e08 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005dcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dce:	2312      	movs	r3, #18
 8005dd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005dda:	2304      	movs	r3, #4
 8005ddc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005dde:	f7fc f8fb 	bl	8001fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <HAL_I2C_MspInit+0xa4>)
 8005de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df2:	9302      	str	r3, [sp, #8]
 8005df4:	9b02      	ldr	r3, [sp, #8]
}
 8005df6:	e7e0      	b.n	8005dba <HAL_I2C_MspInit+0x5e>
 8005df8:	40005400 	.word	0x40005400
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40005c00 	.word	0x40005c00
 8005e08:	40021c00 	.word	0x40021c00

08005e0c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8005e0c:	6802      	ldr	r2, [r0, #0]
 8005e0e:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <HAL_LTDC_MspInit+0xa8>)
 8005e10:	429a      	cmp	r2, r3
{
 8005e12:	b570      	push	{r4, r5, r6, lr}
 8005e14:	b086      	sub	sp, #24
  if(hltdc->Instance==LTDC)
 8005e16:	d14b      	bne.n	8005eb0 <HAL_LTDC_MspInit+0xa4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e18:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e20:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005e24:	a901      	add	r1, sp, #4
 8005e26:	4824      	ldr	r0, [pc, #144]	; (8005eb8 <HAL_LTDC_MspInit+0xac>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e28:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e30:	9502      	str	r5, [sp, #8]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e38:	9404      	str	r4, [sp, #16]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005e3e:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e40:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005e42:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005e44:	f7fc f8c8 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8005e48:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005e4c:	a901      	add	r1, sp, #4
 8005e4e:	481b      	ldr	r0, [pc, #108]	; (8005ebc <HAL_LTDC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8005e50:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e52:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e54:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e56:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e58:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005e5a:	f7fc f8bd 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8005e5e:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005e60:	a901      	add	r1, sp, #4
 8005e62:	4817      	ldr	r0, [pc, #92]	; (8005ec0 <HAL_LTDC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8005e64:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e66:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e6c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005e6e:	f7fc f8b3 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005e76:	a901      	add	r1, sp, #4
 8005e78:	4812      	ldr	r0, [pc, #72]	; (8005ec4 <HAL_LTDC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005e7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005e7c:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005e80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e82:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e84:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005e86:	f7fc f8a7 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005e8a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005e8e:	a901      	add	r1, sp, #4
 8005e90:	480d      	ldr	r0, [pc, #52]	; (8005ec8 <HAL_LTDC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005e92:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e94:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e98:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e9a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005e9c:	f7fc f89c 	bl	8001fd8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8005ea0:	2058      	movs	r0, #88	; 0x58
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	f7fb fd7b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005eaa:	2058      	movs	r0, #88	; 0x58
 8005eac:	f7fb fdb0 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005eb0:	b006      	add	sp, #24
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	40016800 	.word	0x40016800
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	40022400 	.word	0x40022400
 8005ec0:	40022800 	.word	0x40022800
 8005ec4:	40021800 	.word	0x40021800
 8005ec8:	40022000 	.word	0x40022000

08005ecc <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8005ecc:	6802      	ldr	r2, [r0, #0]
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <HAL_RTC_MspInit+0x14>)
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d104      	bne.n	8005ede <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ed4:	4a03      	ldr	r2, [pc, #12]	; (8005ee4 <HAL_RTC_MspInit+0x18>)
 8005ed6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ede:	4770      	bx	lr
 8005ee0:	40002800 	.word	0x40002800
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8005ee8:	6803      	ldr	r3, [r0, #0]
{
 8005eea:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8005eec:	4a23      	ldr	r2, [pc, #140]	; (8005f7c <HAL_TIM_Base_MspInit+0x94>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10b      	bne.n	8005f0a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ef2:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <HAL_TIM_Base_MspInit+0x98>)
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005f06:	b006      	add	sp, #24
 8005f08:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d10b      	bne.n	8005f28 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f10:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	e7ee      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <HAL_TIM_Base_MspInit+0x9c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d10a      	bne.n	8005f44 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <HAL_TIM_Base_MspInit+0x98>)
 8005f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f32:	f042 0202 	orr.w	r2, r2, #2
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	e7e0      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 8005f44:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <HAL_TIM_Base_MspInit+0xa0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10a      	bne.n	8005f60 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <HAL_TIM_Base_MspInit+0x98>)
 8005f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f4e:	f042 0208 	orr.w	r2, r2, #8
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	e7d2      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8005f60:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <HAL_TIM_Base_MspInit+0xa4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d1cf      	bne.n	8005f06 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_TIM_Base_MspInit+0x98>)
 8005f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6a:	f042 0202 	orr.w	r2, r2, #2
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	9b05      	ldr	r3, [sp, #20]
}
 8005f7a:	e7c4      	b.n	8005f06 <HAL_TIM_Base_MspInit+0x1e>
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000c00 	.word	0x40000c00
 8005f8c:	40010400 	.word	0x40010400

08005f90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 8005f90:	6802      	ldr	r2, [r0, #0]
{
 8005f92:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <HAL_TIM_PWM_MspInit+0x24>)
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d10a      	bne.n	8005fb0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005f9a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8005f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005fb0:	b002      	add	sp, #8
 8005fb2:	4770      	bx	lr
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8005fba:	6803      	ldr	r3, [r0, #0]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <HAL_TIM_MspPostInit+0x90>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d110      	bne.n	8005fe4 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8005fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8005fc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8005fca:	a901      	add	r1, sp, #4
 8005fcc:	481f      	ldr	r0, [pc, #124]	; (800604c <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8005fda:	f7fb fffd 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005fde:	b007      	add	sp, #28
 8005fe0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d102      	bne.n	8005ff0 <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	e7ea      	b.n	8005fc6 <HAL_TIM_MspPostInit+0xe>
  else if(htim->Instance==TIM3)
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_TIM_MspPostInit+0x98>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10a      	bne.n	800600c <HAL_TIM_MspPostInit+0x54>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8005ff6:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff8:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8005ffa:	a901      	add	r1, sp, #4
 8005ffc:	4815      	ldr	r0, [pc, #84]	; (8006054 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8005ffe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006000:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006004:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006006:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	e7e6      	b.n	8005fda <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM5)
 800600c:	4a12      	ldr	r2, [pc, #72]	; (8006058 <HAL_TIM_MspPostInit+0xa0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10a      	bne.n	8006028 <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8006012:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8006016:	a901      	add	r1, sp, #4
 8006018:	4810      	ldr	r0, [pc, #64]	; (800605c <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800601a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006022:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	e7d8      	b.n	8005fda <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM12)
 8006028:	4a0d      	ldr	r2, [pc, #52]	; (8006060 <HAL_TIM_MspPostInit+0xa8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d1d7      	bne.n	8005fde <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800602e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8006030:	a901      	add	r1, sp, #4
 8006032:	480c      	ldr	r0, [pc, #48]	; (8006064 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8006034:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006036:	2302      	movs	r3, #2
 8006038:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2300      	movs	r3, #0
 800603c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800603e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006040:	2309      	movs	r3, #9
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	e7c9      	b.n	8005fda <HAL_TIM_MspPostInit+0x22>
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40020000 	.word	0x40020000
 8006050:	40000400 	.word	0x40000400
 8006054:	40020400 	.word	0x40020400
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40022000 	.word	0x40022000
 8006060:	40001800 	.word	0x40001800
 8006064:	40021c00 	.word	0x40021c00

08006068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8006068:	6803      	ldr	r3, [r0, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_UART_MspInit+0x88>)
 800606c:	4293      	cmp	r3, r2
{
 800606e:	b570      	push	{r4, r5, r6, lr}
 8006070:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8006072:	d123      	bne.n	80060bc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006074:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <HAL_UART_MspInit+0x8c>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006076:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006078:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800607a:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800607e:	a903      	add	r1, sp, #12
 8006080:	481d      	ldr	r0, [pc, #116]	; (80060f8 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006082:	f042 0210 	orr.w	r2, r2, #16
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 800608c:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006092:	9406      	str	r4, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8006098:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800609a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800609c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800609e:	f7fb ff9b 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80060a6:	a903      	add	r1, sp, #12
 80060a8:	4814      	ldr	r0, [pc, #80]	; (80060fc <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80060aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060b2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060b4:	f7fb ff90 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80060b8:	b008      	add	sp, #32
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <HAL_UART_MspInit+0x98>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d1fa      	bne.n	80060b8 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART6_CLK_ENABLE();
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <HAL_UART_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060c4:	a903      	add	r1, sp, #12
 80060c6:	480f      	ldr	r0, [pc, #60]	; (8006104 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80060c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ca:	f042 0220 	orr.w	r2, r2, #32
 80060ce:	645a      	str	r2, [r3, #68]	; 0x44
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80060da:	23c0      	movs	r3, #192	; 0xc0
 80060dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060de:	2302      	movs	r3, #2
 80060e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e6:	2303      	movs	r3, #3
 80060e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80060ea:	2308      	movs	r3, #8
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	e7e1      	b.n	80060b4 <HAL_UART_MspInit+0x4c>
 80060f0:	40011000 	.word	0x40011000
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40020400 	.word	0x40020400
 80060fc:	40020000 	.word	0x40020000
 8006100:	40011400 	.word	0x40011400
 8006104:	40020800 	.word	0x40020800

08006108 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8006108:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800610a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 800610c:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800610e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8006110:	2c00      	cmp	r4, #0
 8006112:	d14e      	bne.n	80061b2 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8006114:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006116:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006118:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800611a:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 800611c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800611e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8006120:	4b26      	ldr	r3, [pc, #152]	; (80061bc <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006122:	4827      	ldr	r0, [pc, #156]	; (80061c0 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006130:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006136:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800613c:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006140:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8006142:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006144:	f7fb ff48 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8006148:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800614c:	a901      	add	r1, sp, #4
 800614e:	481d      	ldr	r0, [pc, #116]	; (80061c4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8006150:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006152:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006154:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006156:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006158:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800615a:	f7fb ff3d 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800615e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006162:	a901      	add	r1, sp, #4
 8006164:	4818      	ldr	r0, [pc, #96]	; (80061c8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8006166:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006168:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800616c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800616e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006170:	f7fb ff32 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8006174:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006178:	a901      	add	r1, sp, #4
 800617a:	4814      	ldr	r0, [pc, #80]	; (80061cc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800617c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006180:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006182:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006184:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006186:	f7fb ff27 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800618a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800618c:	a901      	add	r1, sp, #4
 800618e:	4810      	ldr	r0, [pc, #64]	; (80061d0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8006190:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006192:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006194:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006196:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006198:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800619a:	f7fb ff1d 	bl	8001fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800619e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80061a0:	a901      	add	r1, sp, #4
 80061a2:	480c      	ldr	r0, [pc, #48]	; (80061d4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80061a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80061ac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80061ae:	f7fb ff13 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80061b2:	b007      	add	sp, #28
 80061b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000200 	.word	0x20000200
 80061bc:	40023800 	.word	0x40023800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40021800 	.word	0x40021800
 80061c8:	40020c00 	.word	0x40020c00
 80061cc:	40021400 	.word	0x40021400
 80061d0:	40021c00 	.word	0x40021c00
 80061d4:	40020800 	.word	0x40020800

080061d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061d8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80061da:	4601      	mov	r1, r0
{
 80061dc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80061de:	2200      	movs	r2, #0
 80061e0:	2036      	movs	r0, #54	; 0x36
 80061e2:	f7fb fbdd 	bl	80019a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80061e6:	2036      	movs	r0, #54	; 0x36
 80061e8:	f7fb fc12 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80061ec:	4b14      	ldr	r3, [pc, #80]	; (8006240 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061ee:	a901      	add	r1, sp, #4
 80061f0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80061f4:	4c13      	ldr	r4, [pc, #76]	; (8006244 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80061f6:	f042 0210 	orr.w	r2, r2, #16
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	9302      	str	r3, [sp, #8]
 8006204:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006206:	f7fd f8d5 	bl	80033b4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800620a:	f7fd f8b3 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006210:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8006212:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8006214:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006218:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800621a:	4b0c      	ldr	r3, [pc, #48]	; (800624c <HAL_InitTick+0x74>)
 800621c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006220:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8006222:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8006224:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006226:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8006228:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800622a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800622c:	f7fd ff56 	bl	80040dc <HAL_TIM_Base_Init>
 8006230:	b920      	cbnz	r0, 800623c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006232:	4620      	mov	r0, r4
 8006234:	f7fd fe2a 	bl	8003e8c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8006238:	b008      	add	sp, #32
 800623a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800623c:	2001      	movs	r0, #1
 800623e:	e7fb      	b.n	8006238 <HAL_InitTick+0x60>
 8006240:	40023800 	.word	0x40023800
 8006244:	2000076c 	.word	0x2000076c
 8006248:	40001000 	.word	0x40001000
 800624c:	000f4240 	.word	0x000f4240

08006250 <SVC_Handler>:
 8006250:	4770      	bx	lr

08006252 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006252:	4770      	bx	lr

08006254 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8006254:	f7fb bc0b 	b.w	8001a6e <HAL_SYSTICK_IRQHandler>

08006258 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <I2C1_EV_IRQHandler+0x8>)
 800625a:	f7fc b9a1 	b.w	80025a0 <HAL_I2C_EV_IRQHandler>
 800625e:	bf00      	nop
 8006260:	2000037c 	.word	0x2000037c

08006264 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <I2C1_ER_IRQHandler+0x8>)
 8006266:	f7fc bbc9 	b.w	80029fc <HAL_I2C_ER_IRQHandler>
 800626a:	bf00      	nop
 800626c:	2000037c 	.word	0x2000037c

08006270 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <TIM6_DAC_IRQHandler+0x8>)
 8006272:	f7fd be1a 	b.w	8003eaa <HAL_TIM_IRQHandler>
 8006276:	bf00      	nop
 8006278:	2000076c 	.word	0x2000076c

0800627c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <LTDC_IRQHandler+0x8>)
 800627e:	f7fc bd4c 	b.w	8002d1a <HAL_LTDC_IRQHandler>
 8006282:	bf00      	nop
 8006284:	20000448 	.word	0x20000448

08006288 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <DMA2D_IRQHandler+0x8>)
 800628a:	f7fb bdd1 	b.w	8001e30 <HAL_DMA2D_IRQHandler>
 800628e:	bf00      	nop
 8006290:	20000678 	.word	0x20000678

08006294 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006294:	490f      	ldr	r1, [pc, #60]	; (80062d4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006296:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006298:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800629c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <SystemInit+0x44>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80062ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80062b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <SystemInit+0x48>)
 80062be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80062c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062ce:	608b      	str	r3, [r1, #8]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	e000ed00 	.word	0xe000ed00
 80062d8:	40023800 	.word	0x40023800
 80062dc:	24003010 	.word	0x24003010

080062e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80062e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80062e6:	e003      	b.n	80062f0 <LoopCopyDataInit>

080062e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80062ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062ee:	3104      	adds	r1, #4

080062f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062f0:	480b      	ldr	r0, [pc, #44]	; (8006320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062f2:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062f8:	d3f6      	bcc.n	80062e8 <CopyDataInit>
  ldr  r2, =_sbss
 80062fa:	4a0b      	ldr	r2, [pc, #44]	; (8006328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062fc:	e002      	b.n	8006304 <LoopFillZerobss>

080062fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006300:	f842 3b04 	str.w	r3, [r2], #4

08006304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006308:	d3f9      	bcc.n	80062fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800630a:	f7ff ffc3 	bl	8006294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800630e:	f000 f811 	bl	8006334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006312:	f7fe fced 	bl	8004cf0 <main>
  bx  lr    
 8006316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006318:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800631c:	0800879c 	.word	0x0800879c
  ldr  r0, =_sdata
 8006320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006324:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8006328:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800632c:	200007b0 	.word	0x200007b0

08006330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006330:	e7fe      	b.n	8006330 <ADC_IRQHandler>
	...

08006334 <__libc_init_array>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	4e0d      	ldr	r6, [pc, #52]	; (800636c <__libc_init_array+0x38>)
 8006338:	4c0d      	ldr	r4, [pc, #52]	; (8006370 <__libc_init_array+0x3c>)
 800633a:	1ba4      	subs	r4, r4, r6
 800633c:	10a4      	asrs	r4, r4, #2
 800633e:	2500      	movs	r5, #0
 8006340:	42a5      	cmp	r5, r4
 8006342:	d109      	bne.n	8006358 <__libc_init_array+0x24>
 8006344:	4e0b      	ldr	r6, [pc, #44]	; (8006374 <__libc_init_array+0x40>)
 8006346:	4c0c      	ldr	r4, [pc, #48]	; (8006378 <__libc_init_array+0x44>)
 8006348:	f000 fc54 	bl	8006bf4 <_init>
 800634c:	1ba4      	subs	r4, r4, r6
 800634e:	10a4      	asrs	r4, r4, #2
 8006350:	2500      	movs	r5, #0
 8006352:	42a5      	cmp	r5, r4
 8006354:	d105      	bne.n	8006362 <__libc_init_array+0x2e>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800635c:	4798      	blx	r3
 800635e:	3501      	adds	r5, #1
 8006360:	e7ee      	b.n	8006340 <__libc_init_array+0xc>
 8006362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006366:	4798      	blx	r3
 8006368:	3501      	adds	r5, #1
 800636a:	e7f2      	b.n	8006352 <__libc_init_array+0x1e>
 800636c:	08008794 	.word	0x08008794
 8006370:	08008794 	.word	0x08008794
 8006374:	08008794 	.word	0x08008794
 8006378:	08008798 	.word	0x08008798

0800637c <sniprintf>:
 800637c:	b40c      	push	{r2, r3}
 800637e:	b530      	push	{r4, r5, lr}
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <sniprintf+0x64>)
 8006382:	1e0c      	subs	r4, r1, #0
 8006384:	b09d      	sub	sp, #116	; 0x74
 8006386:	681d      	ldr	r5, [r3, #0]
 8006388:	da08      	bge.n	800639c <sniprintf+0x20>
 800638a:	238b      	movs	r3, #139	; 0x8b
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	b01d      	add	sp, #116	; 0x74
 8006394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006398:	b002      	add	sp, #8
 800639a:	4770      	bx	lr
 800639c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063a4:	bf14      	ite	ne
 80063a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063aa:	4623      	moveq	r3, r4
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063b4:	9002      	str	r0, [sp, #8]
 80063b6:	9006      	str	r0, [sp, #24]
 80063b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063be:	ab21      	add	r3, sp, #132	; 0x84
 80063c0:	a902      	add	r1, sp, #8
 80063c2:	4628      	mov	r0, r5
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	f000 f869 	bl	800649c <_svfiprintf_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	bfbc      	itt	lt
 80063ce:	238b      	movlt	r3, #139	; 0x8b
 80063d0:	602b      	strlt	r3, [r5, #0]
 80063d2:	2c00      	cmp	r4, #0
 80063d4:	d0dd      	beq.n	8006392 <sniprintf+0x16>
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e7d9      	b.n	8006392 <sniprintf+0x16>
 80063de:	bf00      	nop
 80063e0:	20000010 	.word	0x20000010

080063e4 <__ssputs_r>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	688e      	ldr	r6, [r1, #8]
 80063ea:	429e      	cmp	r6, r3
 80063ec:	4682      	mov	sl, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4691      	mov	r9, r2
 80063f2:	4698      	mov	r8, r3
 80063f4:	d835      	bhi.n	8006462 <__ssputs_r+0x7e>
 80063f6:	898a      	ldrh	r2, [r1, #12]
 80063f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fc:	d031      	beq.n	8006462 <__ssputs_r+0x7e>
 80063fe:	6825      	ldr	r5, [r4, #0]
 8006400:	6909      	ldr	r1, [r1, #16]
 8006402:	1a6f      	subs	r7, r5, r1
 8006404:	6965      	ldr	r5, [r4, #20]
 8006406:	2302      	movs	r3, #2
 8006408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800640c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006410:	f108 0301 	add.w	r3, r8, #1
 8006414:	443b      	add	r3, r7
 8006416:	429d      	cmp	r5, r3
 8006418:	bf38      	it	cc
 800641a:	461d      	movcc	r5, r3
 800641c:	0553      	lsls	r3, r2, #21
 800641e:	d531      	bpl.n	8006484 <__ssputs_r+0xa0>
 8006420:	4629      	mov	r1, r5
 8006422:	f000 fb39 	bl	8006a98 <_malloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	b950      	cbnz	r0, 8006440 <__ssputs_r+0x5c>
 800642a:	230c      	movs	r3, #12
 800642c:	f8ca 3000 	str.w	r3, [sl]
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006440:	463a      	mov	r2, r7
 8006442:	6921      	ldr	r1, [r4, #16]
 8006444:	f000 fab4 	bl	80069b0 <memcpy>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	6126      	str	r6, [r4, #16]
 8006456:	6165      	str	r5, [r4, #20]
 8006458:	443e      	add	r6, r7
 800645a:	1bed      	subs	r5, r5, r7
 800645c:	6026      	str	r6, [r4, #0]
 800645e:	60a5      	str	r5, [r4, #8]
 8006460:	4646      	mov	r6, r8
 8006462:	4546      	cmp	r6, r8
 8006464:	bf28      	it	cs
 8006466:	4646      	movcs	r6, r8
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	f000 faaa 	bl	80069c6 <memmove>
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	1b9b      	subs	r3, r3, r6
 8006476:	60a3      	str	r3, [r4, #8]
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	441e      	add	r6, r3
 800647c:	6026      	str	r6, [r4, #0]
 800647e:	2000      	movs	r0, #0
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	462a      	mov	r2, r5
 8006486:	f000 fb65 	bl	8006b54 <_realloc_r>
 800648a:	4606      	mov	r6, r0
 800648c:	2800      	cmp	r0, #0
 800648e:	d1e1      	bne.n	8006454 <__ssputs_r+0x70>
 8006490:	6921      	ldr	r1, [r4, #16]
 8006492:	4650      	mov	r0, sl
 8006494:	f000 fab2 	bl	80069fc <_free_r>
 8006498:	e7c7      	b.n	800642a <__ssputs_r+0x46>
	...

0800649c <_svfiprintf_r>:
 800649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	b09d      	sub	sp, #116	; 0x74
 80064a2:	4680      	mov	r8, r0
 80064a4:	9303      	str	r3, [sp, #12]
 80064a6:	898b      	ldrh	r3, [r1, #12]
 80064a8:	061c      	lsls	r4, r3, #24
 80064aa:	460d      	mov	r5, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d50f      	bpl.n	80064d0 <_svfiprintf_r+0x34>
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	b96b      	cbnz	r3, 80064d0 <_svfiprintf_r+0x34>
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	f000 faef 	bl	8006a98 <_malloc_r>
 80064ba:	6028      	str	r0, [r5, #0]
 80064bc:	6128      	str	r0, [r5, #16]
 80064be:	b928      	cbnz	r0, 80064cc <_svfiprintf_r+0x30>
 80064c0:	230c      	movs	r3, #12
 80064c2:	f8c8 3000 	str.w	r3, [r8]
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	e0c5      	b.n	8006658 <_svfiprintf_r+0x1bc>
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	616b      	str	r3, [r5, #20]
 80064d0:	2300      	movs	r3, #0
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	2320      	movs	r3, #32
 80064d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064da:	2330      	movs	r3, #48	; 0x30
 80064dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e0:	f04f 0b01 	mov.w	fp, #1
 80064e4:	4637      	mov	r7, r6
 80064e6:	463c      	mov	r4, r7
 80064e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d13c      	bne.n	800656a <_svfiprintf_r+0xce>
 80064f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80064f4:	d00b      	beq.n	800650e <_svfiprintf_r+0x72>
 80064f6:	4653      	mov	r3, sl
 80064f8:	4632      	mov	r2, r6
 80064fa:	4629      	mov	r1, r5
 80064fc:	4640      	mov	r0, r8
 80064fe:	f7ff ff71 	bl	80063e4 <__ssputs_r>
 8006502:	3001      	adds	r0, #1
 8006504:	f000 80a3 	beq.w	800664e <_svfiprintf_r+0x1b2>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	4453      	add	r3, sl
 800650c:	9309      	str	r3, [sp, #36]	; 0x24
 800650e:	783b      	ldrb	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 809c 	beq.w	800664e <_svfiprintf_r+0x1b2>
 8006516:	2300      	movs	r3, #0
 8006518:	f04f 32ff 	mov.w	r2, #4294967295
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	9205      	str	r2, [sp, #20]
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006528:	931a      	str	r3, [sp, #104]	; 0x68
 800652a:	2205      	movs	r2, #5
 800652c:	7821      	ldrb	r1, [r4, #0]
 800652e:	4850      	ldr	r0, [pc, #320]	; (8006670 <_svfiprintf_r+0x1d4>)
 8006530:	f7f9 fe6e 	bl	8000210 <memchr>
 8006534:	1c67      	adds	r7, r4, #1
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	b9d8      	cbnz	r0, 8006572 <_svfiprintf_r+0xd6>
 800653a:	06d9      	lsls	r1, r3, #27
 800653c:	bf44      	itt	mi
 800653e:	2220      	movmi	r2, #32
 8006540:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006544:	071a      	lsls	r2, r3, #28
 8006546:	bf44      	itt	mi
 8006548:	222b      	movmi	r2, #43	; 0x2b
 800654a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800654e:	7822      	ldrb	r2, [r4, #0]
 8006550:	2a2a      	cmp	r2, #42	; 0x2a
 8006552:	d016      	beq.n	8006582 <_svfiprintf_r+0xe6>
 8006554:	9a07      	ldr	r2, [sp, #28]
 8006556:	2100      	movs	r1, #0
 8006558:	200a      	movs	r0, #10
 800655a:	4627      	mov	r7, r4
 800655c:	3401      	adds	r4, #1
 800655e:	783b      	ldrb	r3, [r7, #0]
 8006560:	3b30      	subs	r3, #48	; 0x30
 8006562:	2b09      	cmp	r3, #9
 8006564:	d951      	bls.n	800660a <_svfiprintf_r+0x16e>
 8006566:	b1c9      	cbz	r1, 800659c <_svfiprintf_r+0x100>
 8006568:	e011      	b.n	800658e <_svfiprintf_r+0xf2>
 800656a:	2b25      	cmp	r3, #37	; 0x25
 800656c:	d0c0      	beq.n	80064f0 <_svfiprintf_r+0x54>
 800656e:	4627      	mov	r7, r4
 8006570:	e7b9      	b.n	80064e6 <_svfiprintf_r+0x4a>
 8006572:	4a3f      	ldr	r2, [pc, #252]	; (8006670 <_svfiprintf_r+0x1d4>)
 8006574:	1a80      	subs	r0, r0, r2
 8006576:	fa0b f000 	lsl.w	r0, fp, r0
 800657a:	4318      	orrs	r0, r3
 800657c:	9004      	str	r0, [sp, #16]
 800657e:	463c      	mov	r4, r7
 8006580:	e7d3      	b.n	800652a <_svfiprintf_r+0x8e>
 8006582:	9a03      	ldr	r2, [sp, #12]
 8006584:	1d11      	adds	r1, r2, #4
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	2a00      	cmp	r2, #0
 800658c:	db01      	blt.n	8006592 <_svfiprintf_r+0xf6>
 800658e:	9207      	str	r2, [sp, #28]
 8006590:	e004      	b.n	800659c <_svfiprintf_r+0x100>
 8006592:	4252      	negs	r2, r2
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	9207      	str	r2, [sp, #28]
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	783b      	ldrb	r3, [r7, #0]
 800659e:	2b2e      	cmp	r3, #46	; 0x2e
 80065a0:	d10e      	bne.n	80065c0 <_svfiprintf_r+0x124>
 80065a2:	787b      	ldrb	r3, [r7, #1]
 80065a4:	2b2a      	cmp	r3, #42	; 0x2a
 80065a6:	f107 0101 	add.w	r1, r7, #1
 80065aa:	d132      	bne.n	8006612 <_svfiprintf_r+0x176>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	1d1a      	adds	r2, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	9203      	str	r2, [sp, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bfb8      	it	lt
 80065b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065bc:	3702      	adds	r7, #2
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	4c2c      	ldr	r4, [pc, #176]	; (8006674 <_svfiprintf_r+0x1d8>)
 80065c2:	7839      	ldrb	r1, [r7, #0]
 80065c4:	2203      	movs	r2, #3
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7f9 fe22 	bl	8000210 <memchr>
 80065cc:	b138      	cbz	r0, 80065de <_svfiprintf_r+0x142>
 80065ce:	2340      	movs	r3, #64	; 0x40
 80065d0:	1b00      	subs	r0, r0, r4
 80065d2:	fa03 f000 	lsl.w	r0, r3, r0
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	4303      	orrs	r3, r0
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	3701      	adds	r7, #1
 80065de:	7839      	ldrb	r1, [r7, #0]
 80065e0:	4825      	ldr	r0, [pc, #148]	; (8006678 <_svfiprintf_r+0x1dc>)
 80065e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e6:	2206      	movs	r2, #6
 80065e8:	1c7e      	adds	r6, r7, #1
 80065ea:	f7f9 fe11 	bl	8000210 <memchr>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d035      	beq.n	800665e <_svfiprintf_r+0x1c2>
 80065f2:	4b22      	ldr	r3, [pc, #136]	; (800667c <_svfiprintf_r+0x1e0>)
 80065f4:	b9fb      	cbnz	r3, 8006636 <_svfiprintf_r+0x19a>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	3307      	adds	r3, #7
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	3308      	adds	r3, #8
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006604:	444b      	add	r3, r9
 8006606:	9309      	str	r3, [sp, #36]	; 0x24
 8006608:	e76c      	b.n	80064e4 <_svfiprintf_r+0x48>
 800660a:	fb00 3202 	mla	r2, r0, r2, r3
 800660e:	2101      	movs	r1, #1
 8006610:	e7a3      	b.n	800655a <_svfiprintf_r+0xbe>
 8006612:	2300      	movs	r3, #0
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	4618      	mov	r0, r3
 8006618:	240a      	movs	r4, #10
 800661a:	460f      	mov	r7, r1
 800661c:	3101      	adds	r1, #1
 800661e:	783a      	ldrb	r2, [r7, #0]
 8006620:	3a30      	subs	r2, #48	; 0x30
 8006622:	2a09      	cmp	r2, #9
 8006624:	d903      	bls.n	800662e <_svfiprintf_r+0x192>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ca      	beq.n	80065c0 <_svfiprintf_r+0x124>
 800662a:	9005      	str	r0, [sp, #20]
 800662c:	e7c8      	b.n	80065c0 <_svfiprintf_r+0x124>
 800662e:	fb04 2000 	mla	r0, r4, r0, r2
 8006632:	2301      	movs	r3, #1
 8006634:	e7f1      	b.n	800661a <_svfiprintf_r+0x17e>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4b10      	ldr	r3, [pc, #64]	; (8006680 <_svfiprintf_r+0x1e4>)
 800663e:	a904      	add	r1, sp, #16
 8006640:	4640      	mov	r0, r8
 8006642:	f3af 8000 	nop.w
 8006646:	f1b0 3fff 	cmp.w	r0, #4294967295
 800664a:	4681      	mov	r9, r0
 800664c:	d1d9      	bne.n	8006602 <_svfiprintf_r+0x166>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	065b      	lsls	r3, r3, #25
 8006652:	f53f af38 	bmi.w	80064c6 <_svfiprintf_r+0x2a>
 8006656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006658:	b01d      	add	sp, #116	; 0x74
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	ab03      	add	r3, sp, #12
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	462a      	mov	r2, r5
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <_svfiprintf_r+0x1e4>)
 8006666:	a904      	add	r1, sp, #16
 8006668:	4640      	mov	r0, r8
 800666a:	f000 f881 	bl	8006770 <_printf_i>
 800666e:	e7ea      	b.n	8006646 <_svfiprintf_r+0x1aa>
 8006670:	08008756 	.word	0x08008756
 8006674:	0800875c 	.word	0x0800875c
 8006678:	08008760 	.word	0x08008760
 800667c:	00000000 	.word	0x00000000
 8006680:	080063e5 	.word	0x080063e5

08006684 <_printf_common>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	4691      	mov	r9, r2
 800668a:	461f      	mov	r7, r3
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	bfb8      	it	lt
 8006698:	4613      	movlt	r3, r2
 800669a:	f8c9 3000 	str.w	r3, [r9]
 800669e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a2:	4606      	mov	r6, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	b112      	cbz	r2, 80066ae <_printf_common+0x2a>
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c9 3000 	str.w	r3, [r9]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	0699      	lsls	r1, r3, #26
 80066b2:	bf42      	ittt	mi
 80066b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066b8:	3302      	addmi	r3, #2
 80066ba:	f8c9 3000 	strmi.w	r3, [r9]
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	f015 0506 	ands.w	r5, r5, #6
 80066c4:	d107      	bne.n	80066d6 <_printf_common+0x52>
 80066c6:	f104 0a19 	add.w	sl, r4, #25
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	f8d9 2000 	ldr.w	r2, [r9]
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	429d      	cmp	r5, r3
 80066d4:	db29      	blt.n	800672a <_printf_common+0xa6>
 80066d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	3300      	adds	r3, #0
 80066de:	bf18      	it	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	0692      	lsls	r2, r2, #26
 80066e4:	d42e      	bmi.n	8006744 <_printf_common+0xc0>
 80066e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ea:	4639      	mov	r1, r7
 80066ec:	4630      	mov	r0, r6
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d021      	beq.n	8006738 <_printf_common+0xb4>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	68e5      	ldr	r5, [r4, #12]
 80066f8:	f8d9 2000 	ldr.w	r2, [r9]
 80066fc:	f003 0306 	and.w	r3, r3, #6
 8006700:	2b04      	cmp	r3, #4
 8006702:	bf08      	it	eq
 8006704:	1aad      	subeq	r5, r5, r2
 8006706:	68a3      	ldr	r3, [r4, #8]
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	bf0c      	ite	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	2500      	movne	r5, #0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfc4      	itt	gt
 8006716:	1a9b      	subgt	r3, r3, r2
 8006718:	18ed      	addgt	r5, r5, r3
 800671a:	f04f 0900 	mov.w	r9, #0
 800671e:	341a      	adds	r4, #26
 8006720:	454d      	cmp	r5, r9
 8006722:	d11b      	bne.n	800675c <_printf_common+0xd8>
 8006724:	2000      	movs	r0, #0
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672a:	2301      	movs	r3, #1
 800672c:	4652      	mov	r2, sl
 800672e:	4639      	mov	r1, r7
 8006730:	4630      	mov	r0, r6
 8006732:	47c0      	blx	r8
 8006734:	3001      	adds	r0, #1
 8006736:	d103      	bne.n	8006740 <_printf_common+0xbc>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	3501      	adds	r5, #1
 8006742:	e7c2      	b.n	80066ca <_printf_common+0x46>
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	2030      	movs	r0, #48	; 0x30
 800674a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674e:	4422      	add	r2, r4
 8006750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006758:	3302      	adds	r3, #2
 800675a:	e7c4      	b.n	80066e6 <_printf_common+0x62>
 800675c:	2301      	movs	r3, #1
 800675e:	4622      	mov	r2, r4
 8006760:	4639      	mov	r1, r7
 8006762:	4630      	mov	r0, r6
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d0e6      	beq.n	8006738 <_printf_common+0xb4>
 800676a:	f109 0901 	add.w	r9, r9, #1
 800676e:	e7d7      	b.n	8006720 <_printf_common+0x9c>

08006770 <_printf_i>:
 8006770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006774:	4617      	mov	r7, r2
 8006776:	7e0a      	ldrb	r2, [r1, #24]
 8006778:	b085      	sub	sp, #20
 800677a:	2a6e      	cmp	r2, #110	; 0x6e
 800677c:	4698      	mov	r8, r3
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006784:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006788:	f000 80bc 	beq.w	8006904 <_printf_i+0x194>
 800678c:	d81a      	bhi.n	80067c4 <_printf_i+0x54>
 800678e:	2a63      	cmp	r2, #99	; 0x63
 8006790:	d02e      	beq.n	80067f0 <_printf_i+0x80>
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x3a>
 8006794:	2a00      	cmp	r2, #0
 8006796:	f000 80c8 	beq.w	800692a <_printf_i+0x1ba>
 800679a:	2a58      	cmp	r2, #88	; 0x58
 800679c:	f000 808a 	beq.w	80068b4 <_printf_i+0x144>
 80067a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80067a8:	e02a      	b.n	8006800 <_printf_i+0x90>
 80067aa:	2a64      	cmp	r2, #100	; 0x64
 80067ac:	d001      	beq.n	80067b2 <_printf_i+0x42>
 80067ae:	2a69      	cmp	r2, #105	; 0x69
 80067b0:	d1f6      	bne.n	80067a0 <_printf_i+0x30>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80067ba:	d023      	beq.n	8006804 <_printf_i+0x94>
 80067bc:	1d11      	adds	r1, r2, #4
 80067be:	6019      	str	r1, [r3, #0]
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	e027      	b.n	8006814 <_printf_i+0xa4>
 80067c4:	2a73      	cmp	r2, #115	; 0x73
 80067c6:	f000 80b4 	beq.w	8006932 <_printf_i+0x1c2>
 80067ca:	d808      	bhi.n	80067de <_printf_i+0x6e>
 80067cc:	2a6f      	cmp	r2, #111	; 0x6f
 80067ce:	d02a      	beq.n	8006826 <_printf_i+0xb6>
 80067d0:	2a70      	cmp	r2, #112	; 0x70
 80067d2:	d1e5      	bne.n	80067a0 <_printf_i+0x30>
 80067d4:	680a      	ldr	r2, [r1, #0]
 80067d6:	f042 0220 	orr.w	r2, r2, #32
 80067da:	600a      	str	r2, [r1, #0]
 80067dc:	e003      	b.n	80067e6 <_printf_i+0x76>
 80067de:	2a75      	cmp	r2, #117	; 0x75
 80067e0:	d021      	beq.n	8006826 <_printf_i+0xb6>
 80067e2:	2a78      	cmp	r2, #120	; 0x78
 80067e4:	d1dc      	bne.n	80067a0 <_printf_i+0x30>
 80067e6:	2278      	movs	r2, #120	; 0x78
 80067e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80067ec:	496e      	ldr	r1, [pc, #440]	; (80069a8 <_printf_i+0x238>)
 80067ee:	e064      	b.n	80068ba <_printf_i+0x14a>
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80067f6:	1d11      	adds	r1, r2, #4
 80067f8:	6019      	str	r1, [r3, #0]
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e0a3      	b.n	800694c <_printf_i+0x1dc>
 8006804:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006808:	f102 0104 	add.w	r1, r2, #4
 800680c:	6019      	str	r1, [r3, #0]
 800680e:	d0d7      	beq.n	80067c0 <_printf_i+0x50>
 8006810:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da03      	bge.n	8006820 <_printf_i+0xb0>
 8006818:	222d      	movs	r2, #45	; 0x2d
 800681a:	425b      	negs	r3, r3
 800681c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006820:	4962      	ldr	r1, [pc, #392]	; (80069ac <_printf_i+0x23c>)
 8006822:	220a      	movs	r2, #10
 8006824:	e017      	b.n	8006856 <_printf_i+0xe6>
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800682e:	d003      	beq.n	8006838 <_printf_i+0xc8>
 8006830:	1d08      	adds	r0, r1, #4
 8006832:	6018      	str	r0, [r3, #0]
 8006834:	680b      	ldr	r3, [r1, #0]
 8006836:	e006      	b.n	8006846 <_printf_i+0xd6>
 8006838:	f010 0f40 	tst.w	r0, #64	; 0x40
 800683c:	f101 0004 	add.w	r0, r1, #4
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	d0f7      	beq.n	8006834 <_printf_i+0xc4>
 8006844:	880b      	ldrh	r3, [r1, #0]
 8006846:	4959      	ldr	r1, [pc, #356]	; (80069ac <_printf_i+0x23c>)
 8006848:	2a6f      	cmp	r2, #111	; 0x6f
 800684a:	bf14      	ite	ne
 800684c:	220a      	movne	r2, #10
 800684e:	2208      	moveq	r2, #8
 8006850:	2000      	movs	r0, #0
 8006852:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006856:	6865      	ldr	r5, [r4, #4]
 8006858:	60a5      	str	r5, [r4, #8]
 800685a:	2d00      	cmp	r5, #0
 800685c:	f2c0 809c 	blt.w	8006998 <_printf_i+0x228>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	f020 0004 	bic.w	r0, r0, #4
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d13f      	bne.n	80068ec <_printf_i+0x17c>
 800686c:	2d00      	cmp	r5, #0
 800686e:	f040 8095 	bne.w	800699c <_printf_i+0x22c>
 8006872:	4675      	mov	r5, lr
 8006874:	2a08      	cmp	r2, #8
 8006876:	d10b      	bne.n	8006890 <_printf_i+0x120>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d508      	bpl.n	8006890 <_printf_i+0x120>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	bfde      	ittt	le
 8006886:	2330      	movle	r3, #48	; 0x30
 8006888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800688c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006890:	ebae 0305 	sub.w	r3, lr, r5
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	f8cd 8000 	str.w	r8, [sp]
 800689a:	463b      	mov	r3, r7
 800689c:	aa03      	add	r2, sp, #12
 800689e:	4621      	mov	r1, r4
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff feef 	bl	8006684 <_printf_common>
 80068a6:	3001      	adds	r0, #1
 80068a8:	d155      	bne.n	8006956 <_printf_i+0x1e6>
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	b005      	add	sp, #20
 80068b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80068b8:	493c      	ldr	r1, [pc, #240]	; (80069ac <_printf_i+0x23c>)
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068c2:	f100 0504 	add.w	r5, r0, #4
 80068c6:	601d      	str	r5, [r3, #0]
 80068c8:	d001      	beq.n	80068ce <_printf_i+0x15e>
 80068ca:	6803      	ldr	r3, [r0, #0]
 80068cc:	e002      	b.n	80068d4 <_printf_i+0x164>
 80068ce:	0655      	lsls	r5, r2, #25
 80068d0:	d5fb      	bpl.n	80068ca <_printf_i+0x15a>
 80068d2:	8803      	ldrh	r3, [r0, #0]
 80068d4:	07d0      	lsls	r0, r2, #31
 80068d6:	bf44      	itt	mi
 80068d8:	f042 0220 	orrmi.w	r2, r2, #32
 80068dc:	6022      	strmi	r2, [r4, #0]
 80068de:	b91b      	cbnz	r3, 80068e8 <_printf_i+0x178>
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	f022 0220 	bic.w	r2, r2, #32
 80068e6:	6022      	str	r2, [r4, #0]
 80068e8:	2210      	movs	r2, #16
 80068ea:	e7b1      	b.n	8006850 <_printf_i+0xe0>
 80068ec:	4675      	mov	r5, lr
 80068ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80068f2:	fb02 3310 	mls	r3, r2, r0, r3
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068fc:	4603      	mov	r3, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	d1f5      	bne.n	80068ee <_printf_i+0x17e>
 8006902:	e7b7      	b.n	8006874 <_printf_i+0x104>
 8006904:	6808      	ldr	r0, [r1, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	6949      	ldr	r1, [r1, #20]
 800690a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800690e:	d004      	beq.n	800691a <_printf_i+0x1aa>
 8006910:	1d10      	adds	r0, r2, #4
 8006912:	6018      	str	r0, [r3, #0]
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	6019      	str	r1, [r3, #0]
 8006918:	e007      	b.n	800692a <_printf_i+0x1ba>
 800691a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800691e:	f102 0004 	add.w	r0, r2, #4
 8006922:	6018      	str	r0, [r3, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	d0f6      	beq.n	8006916 <_printf_i+0x1a6>
 8006928:	8019      	strh	r1, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	4675      	mov	r5, lr
 8006930:	e7b1      	b.n	8006896 <_printf_i+0x126>
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	1d11      	adds	r1, r2, #4
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	6815      	ldr	r5, [r2, #0]
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	2100      	movs	r1, #0
 800693e:	4628      	mov	r0, r5
 8006940:	f7f9 fc66 	bl	8000210 <memchr>
 8006944:	b108      	cbz	r0, 800694a <_printf_i+0x1da>
 8006946:	1b40      	subs	r0, r0, r5
 8006948:	6060      	str	r0, [r4, #4]
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	e79f      	b.n	8006896 <_printf_i+0x126>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	462a      	mov	r2, r5
 800695a:	4639      	mov	r1, r7
 800695c:	4630      	mov	r0, r6
 800695e:	47c0      	blx	r8
 8006960:	3001      	adds	r0, #1
 8006962:	d0a2      	beq.n	80068aa <_printf_i+0x13a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d507      	bpl.n	800697a <_printf_i+0x20a>
 800696a:	2500      	movs	r5, #0
 800696c:	f104 0919 	add.w	r9, r4, #25
 8006970:	68e3      	ldr	r3, [r4, #12]
 8006972:	9a03      	ldr	r2, [sp, #12]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	429d      	cmp	r5, r3
 8006978:	db05      	blt.n	8006986 <_printf_i+0x216>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	4298      	cmp	r0, r3
 8006980:	bfb8      	it	lt
 8006982:	4618      	movlt	r0, r3
 8006984:	e793      	b.n	80068ae <_printf_i+0x13e>
 8006986:	2301      	movs	r3, #1
 8006988:	464a      	mov	r2, r9
 800698a:	4639      	mov	r1, r7
 800698c:	4630      	mov	r0, r6
 800698e:	47c0      	blx	r8
 8006990:	3001      	adds	r0, #1
 8006992:	d08a      	beq.n	80068aa <_printf_i+0x13a>
 8006994:	3501      	adds	r5, #1
 8006996:	e7eb      	b.n	8006970 <_printf_i+0x200>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1a7      	bne.n	80068ec <_printf_i+0x17c>
 800699c:	780b      	ldrb	r3, [r1, #0]
 800699e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a6:	e765      	b.n	8006874 <_printf_i+0x104>
 80069a8:	08008778 	.word	0x08008778
 80069ac:	08008767 	.word	0x08008767

080069b0 <memcpy>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	1e43      	subs	r3, r0, #1
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	d100      	bne.n	80069bc <memcpy+0xc>
 80069ba:	bd10      	pop	{r4, pc}
 80069bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c4:	e7f7      	b.n	80069b6 <memcpy+0x6>

080069c6 <memmove>:
 80069c6:	4288      	cmp	r0, r1
 80069c8:	b510      	push	{r4, lr}
 80069ca:	eb01 0302 	add.w	r3, r1, r2
 80069ce:	d803      	bhi.n	80069d8 <memmove+0x12>
 80069d0:	1e42      	subs	r2, r0, #1
 80069d2:	4299      	cmp	r1, r3
 80069d4:	d10c      	bne.n	80069f0 <memmove+0x2a>
 80069d6:	bd10      	pop	{r4, pc}
 80069d8:	4298      	cmp	r0, r3
 80069da:	d2f9      	bcs.n	80069d0 <memmove+0xa>
 80069dc:	1881      	adds	r1, r0, r2
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	42d3      	cmn	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memmove+0x20>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069ee:	e7f7      	b.n	80069e0 <memmove+0x1a>
 80069f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069f8:	e7eb      	b.n	80069d2 <memmove+0xc>
	...

080069fc <_free_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d045      	beq.n	8006a90 <_free_r+0x94>
 8006a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a08:	1f0c      	subs	r4, r1, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfb8      	it	lt
 8006a0e:	18e4      	addlt	r4, r4, r3
 8006a10:	f000 f8d6 	bl	8006bc0 <__malloc_lock>
 8006a14:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <_free_r+0x98>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	4610      	mov	r0, r2
 8006a1a:	b933      	cbnz	r3, 8006a2a <_free_r+0x2e>
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	6014      	str	r4, [r2, #0]
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a26:	f000 b8cc 	b.w	8006bc2 <__malloc_unlock>
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	d90c      	bls.n	8006a48 <_free_r+0x4c>
 8006a2e:	6821      	ldr	r1, [r4, #0]
 8006a30:	1862      	adds	r2, r4, r1
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bf04      	itt	eq
 8006a36:	681a      	ldreq	r2, [r3, #0]
 8006a38:	685b      	ldreq	r3, [r3, #4]
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	bf04      	itt	eq
 8006a3e:	1852      	addeq	r2, r2, r1
 8006a40:	6022      	streq	r2, [r4, #0]
 8006a42:	6004      	str	r4, [r0, #0]
 8006a44:	e7ec      	b.n	8006a20 <_free_r+0x24>
 8006a46:	4613      	mov	r3, r2
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	b10a      	cbz	r2, 8006a50 <_free_r+0x54>
 8006a4c:	42a2      	cmp	r2, r4
 8006a4e:	d9fa      	bls.n	8006a46 <_free_r+0x4a>
 8006a50:	6819      	ldr	r1, [r3, #0]
 8006a52:	1858      	adds	r0, r3, r1
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d10b      	bne.n	8006a70 <_free_r+0x74>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	4401      	add	r1, r0
 8006a5c:	1858      	adds	r0, r3, r1
 8006a5e:	4282      	cmp	r2, r0
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	d1dd      	bne.n	8006a20 <_free_r+0x24>
 8006a64:	6810      	ldr	r0, [r2, #0]
 8006a66:	6852      	ldr	r2, [r2, #4]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	4401      	add	r1, r0
 8006a6c:	6019      	str	r1, [r3, #0]
 8006a6e:	e7d7      	b.n	8006a20 <_free_r+0x24>
 8006a70:	d902      	bls.n	8006a78 <_free_r+0x7c>
 8006a72:	230c      	movs	r3, #12
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	e7d3      	b.n	8006a20 <_free_r+0x24>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	1821      	adds	r1, r4, r0
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	bf04      	itt	eq
 8006a80:	6811      	ldreq	r1, [r2, #0]
 8006a82:	6852      	ldreq	r2, [r2, #4]
 8006a84:	6062      	str	r2, [r4, #4]
 8006a86:	bf04      	itt	eq
 8006a88:	1809      	addeq	r1, r1, r0
 8006a8a:	6021      	streq	r1, [r4, #0]
 8006a8c:	605c      	str	r4, [r3, #4]
 8006a8e:	e7c7      	b.n	8006a20 <_free_r+0x24>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	20000204 	.word	0x20000204

08006a98 <_malloc_r>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	1ccd      	adds	r5, r1, #3
 8006a9c:	f025 0503 	bic.w	r5, r5, #3
 8006aa0:	3508      	adds	r5, #8
 8006aa2:	2d0c      	cmp	r5, #12
 8006aa4:	bf38      	it	cc
 8006aa6:	250c      	movcc	r5, #12
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	4606      	mov	r6, r0
 8006aac:	db01      	blt.n	8006ab2 <_malloc_r+0x1a>
 8006aae:	42a9      	cmp	r1, r5
 8006ab0:	d903      	bls.n	8006aba <_malloc_r+0x22>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	f000 f881 	bl	8006bc0 <__malloc_lock>
 8006abe:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <_malloc_r+0xb4>)
 8006ac0:	6814      	ldr	r4, [r2, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	b991      	cbnz	r1, 8006aec <_malloc_r+0x54>
 8006ac6:	4c22      	ldr	r4, [pc, #136]	; (8006b50 <_malloc_r+0xb8>)
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	b91b      	cbnz	r3, 8006ad4 <_malloc_r+0x3c>
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 f867 	bl	8006ba0 <_sbrk_r>
 8006ad2:	6020      	str	r0, [r4, #0]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f000 f862 	bl	8006ba0 <_sbrk_r>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d126      	bne.n	8006b2e <_malloc_r+0x96>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f86c 	bl	8006bc2 <__malloc_unlock>
 8006aea:	e7e4      	b.n	8006ab6 <_malloc_r+0x1e>
 8006aec:	680b      	ldr	r3, [r1, #0]
 8006aee:	1b5b      	subs	r3, r3, r5
 8006af0:	d41a      	bmi.n	8006b28 <_malloc_r+0x90>
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	d90f      	bls.n	8006b16 <_malloc_r+0x7e>
 8006af6:	600b      	str	r3, [r1, #0]
 8006af8:	50cd      	str	r5, [r1, r3]
 8006afa:	18cc      	adds	r4, r1, r3
 8006afc:	4630      	mov	r0, r6
 8006afe:	f000 f860 	bl	8006bc2 <__malloc_unlock>
 8006b02:	f104 000b 	add.w	r0, r4, #11
 8006b06:	1d23      	adds	r3, r4, #4
 8006b08:	f020 0007 	bic.w	r0, r0, #7
 8006b0c:	1ac3      	subs	r3, r0, r3
 8006b0e:	d01b      	beq.n	8006b48 <_malloc_r+0xb0>
 8006b10:	425a      	negs	r2, r3
 8006b12:	50e2      	str	r2, [r4, r3]
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
 8006b16:	428c      	cmp	r4, r1
 8006b18:	bf0d      	iteet	eq
 8006b1a:	6863      	ldreq	r3, [r4, #4]
 8006b1c:	684b      	ldrne	r3, [r1, #4]
 8006b1e:	6063      	strne	r3, [r4, #4]
 8006b20:	6013      	streq	r3, [r2, #0]
 8006b22:	bf18      	it	ne
 8006b24:	460c      	movne	r4, r1
 8006b26:	e7e9      	b.n	8006afc <_malloc_r+0x64>
 8006b28:	460c      	mov	r4, r1
 8006b2a:	6849      	ldr	r1, [r1, #4]
 8006b2c:	e7ca      	b.n	8006ac4 <_malloc_r+0x2c>
 8006b2e:	1cc4      	adds	r4, r0, #3
 8006b30:	f024 0403 	bic.w	r4, r4, #3
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d005      	beq.n	8006b44 <_malloc_r+0xac>
 8006b38:	1a21      	subs	r1, r4, r0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f000 f830 	bl	8006ba0 <_sbrk_r>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d0cd      	beq.n	8006ae0 <_malloc_r+0x48>
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	e7d9      	b.n	8006afc <_malloc_r+0x64>
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000204 	.word	0x20000204
 8006b50:	20000208 	.word	0x20000208

08006b54 <_realloc_r>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	4607      	mov	r7, r0
 8006b58:	4614      	mov	r4, r2
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	b921      	cbnz	r1, 8006b68 <_realloc_r+0x14>
 8006b5e:	4611      	mov	r1, r2
 8006b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b64:	f7ff bf98 	b.w	8006a98 <_malloc_r>
 8006b68:	b922      	cbnz	r2, 8006b74 <_realloc_r+0x20>
 8006b6a:	f7ff ff47 	bl	80069fc <_free_r>
 8006b6e:	4625      	mov	r5, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b74:	f000 f826 	bl	8006bc4 <_malloc_usable_size_r>
 8006b78:	4284      	cmp	r4, r0
 8006b7a:	d90f      	bls.n	8006b9c <_realloc_r+0x48>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f7ff ff8a 	bl	8006a98 <_malloc_r>
 8006b84:	4605      	mov	r5, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d0f2      	beq.n	8006b70 <_realloc_r+0x1c>
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	f7ff ff0f 	bl	80069b0 <memcpy>
 8006b92:	4631      	mov	r1, r6
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff ff31 	bl	80069fc <_free_r>
 8006b9a:	e7e9      	b.n	8006b70 <_realloc_r+0x1c>
 8006b9c:	4635      	mov	r5, r6
 8006b9e:	e7e7      	b.n	8006b70 <_realloc_r+0x1c>

08006ba0 <_sbrk_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4c06      	ldr	r4, [pc, #24]	; (8006bbc <_sbrk_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	f000 f814 	bl	8006bd8 <_sbrk>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_sbrk_r+0x1a>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_sbrk_r+0x1a>
 8006bb8:	602b      	str	r3, [r5, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	200007ac 	.word	0x200007ac

08006bc0 <__malloc_lock>:
 8006bc0:	4770      	bx	lr

08006bc2 <__malloc_unlock>:
 8006bc2:	4770      	bx	lr

08006bc4 <_malloc_usable_size_r>:
 8006bc4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f1a0 0004 	sub.w	r0, r0, #4
 8006bce:	bfbc      	itt	lt
 8006bd0:	580b      	ldrlt	r3, [r1, r0]
 8006bd2:	18c0      	addlt	r0, r0, r3
 8006bd4:	4770      	bx	lr
	...

08006bd8 <_sbrk>:
 8006bd8:	4b04      	ldr	r3, [pc, #16]	; (8006bec <_sbrk+0x14>)
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	4602      	mov	r2, r0
 8006bde:	b909      	cbnz	r1, 8006be4 <_sbrk+0xc>
 8006be0:	4903      	ldr	r1, [pc, #12]	; (8006bf0 <_sbrk+0x18>)
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	4402      	add	r2, r0
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	4770      	bx	lr
 8006bec:	2000020c 	.word	0x2000020c
 8006bf0:	200007b0 	.word	0x200007b0

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
